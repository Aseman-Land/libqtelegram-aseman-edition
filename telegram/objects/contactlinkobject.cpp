// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactlinkobject.h"

ContactLinkObject::ContactLinkObject(const ContactLink &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ContactLinkObject::ContactLinkObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ContactLinkObject::~ContactLinkObject() {
}

ContactLinkObject &ContactLinkObject::operator =(const ContactLink &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

bool ContactLinkObject::operator ==(const ContactLink &b) const {
    return m_core == b;
}

void ContactLinkObject::setClassType(quint32 classType) {
    ContactLink::ContactLinkClassType result;
    switch(classType) {
    case TypeContactLinkUnknown:
        result = ContactLink::typeContactLinkUnknown;
        break;
    case TypeContactLinkNone:
        result = ContactLink::typeContactLinkNone;
        break;
    case TypeContactLinkHasPhone:
        result = ContactLink::typeContactLinkHasPhone;
        break;
    case TypeContactLinkContact:
        result = ContactLink::typeContactLinkContact;
        break;
    default:
        result = ContactLink::typeContactLinkUnknown;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactLinkObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactLink::typeContactLinkUnknown:
        result = TypeContactLinkUnknown;
        break;
    case ContactLink::typeContactLinkNone:
        result = TypeContactLinkNone;
        break;
    case ContactLink::typeContactLinkHasPhone:
        result = TypeContactLinkHasPhone;
        break;
    case ContactLink::typeContactLinkContact:
        result = TypeContactLinkContact;
        break;
    default:
        result = TypeContactLinkUnknown;
        break;
    }

    return result;
}

void ContactLinkObject::setCore(const ContactLink &core) {
    operator =(core);
}

ContactLink ContactLinkObject::core() const {
    return m_core;
}

