// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTGEOPOINT_OBJECT
#define LQTG_TYPE_INPUTGEOPOINT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputgeopoint.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputGeoPointObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputGeoPointClassType)
    Q_PROPERTY(qreal lat READ lat WRITE setLat NOTIFY latChanged)
    Q_PROPERTY(qreal longValue READ longValue WRITE setLongValue NOTIFY longValueChanged)
    Q_PROPERTY(InputGeoPoint core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputGeoPointClassType {
        TypeInputGeoPointEmpty,
        TypeInputGeoPoint
    };

    InputGeoPointObject(const InputGeoPoint &core, QObject *parent = 0);
    InputGeoPointObject(QObject *parent = 0);
    virtual ~InputGeoPointObject();

    void setLat(qreal lat);
    qreal lat() const;

    void setLongValue(qreal longValue);
    qreal longValue() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputGeoPoint &core);
    InputGeoPoint core() const;

    InputGeoPointObject &operator =(const InputGeoPoint &b);
    bool operator ==(const InputGeoPoint &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void latChanged();
    void longValueChanged();

private Q_SLOTS:

private:
    InputGeoPoint m_core;
};

inline InputGeoPointObject::InputGeoPointObject(const InputGeoPoint &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputGeoPointObject::InputGeoPointObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputGeoPointObject::~InputGeoPointObject() {
}

inline void InputGeoPointObject::setLat(qreal lat) {
    if(m_core.lat() == lat) return;
    m_core.setLat(lat);
    Q_EMIT latChanged();
    Q_EMIT coreChanged();
}

inline qreal InputGeoPointObject::lat() const {
    return m_core.lat();
}

inline void InputGeoPointObject::setLongValue(qreal longValue) {
    if(m_core.longValue() == longValue) return;
    m_core.setLongValue(longValue);
    Q_EMIT longValueChanged();
    Q_EMIT coreChanged();
}

inline qreal InputGeoPointObject::longValue() const {
    return m_core.longValue();
}

inline InputGeoPointObject &InputGeoPointObject::operator =(const InputGeoPoint &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT latChanged();
    Q_EMIT longValueChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputGeoPointObject::operator ==(const InputGeoPoint &b) const {
    return m_core == b;
}

inline void InputGeoPointObject::setClassType(quint32 classType) {
    InputGeoPoint::InputGeoPointClassType result;
    switch(classType) {
    case TypeInputGeoPointEmpty:
        result = InputGeoPoint::typeInputGeoPointEmpty;
        break;
    case TypeInputGeoPoint:
        result = InputGeoPoint::typeInputGeoPoint;
        break;
    default:
        result = InputGeoPoint::typeInputGeoPointEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputGeoPointObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputGeoPoint::typeInputGeoPointEmpty:
        result = TypeInputGeoPointEmpty;
        break;
    case InputGeoPoint::typeInputGeoPoint:
        result = TypeInputGeoPoint;
        break;
    default:
        result = TypeInputGeoPointEmpty;
        break;
    }

    return result;
}

inline void InputGeoPointObject::setCore(const InputGeoPoint &core) {
    operator =(core);
}

inline InputGeoPoint InputGeoPointObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTGEOPOINT_OBJECT
