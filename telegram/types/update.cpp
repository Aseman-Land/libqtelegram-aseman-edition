// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "update.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Update::Update(UpdateType classType, InboundPkt *in) :
    m_authKeyId(0),
    m_blocked(false),
    m_channelId(0),
    m_chatId(0),
    m_date(0),
    m_enabled(false),
    m_flags(0),
    m_idInt(0),
    m_inviterId(0),
    m_isAdmin(false),
    m_maxDate(0),
    m_maxId(0),
    m_popup(false),
    m_previous(false),
    m_pts(0),
    m_ptsCount(0),
    m_qts(0),
    m_queryId(0),
    m_randomId(0),
    m_userId(0),
    m_version(0),
    m_views(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Update::Update(InboundPkt *in) :
    m_authKeyId(0),
    m_blocked(false),
    m_channelId(0),
    m_chatId(0),
    m_date(0),
    m_enabled(false),
    m_flags(0),
    m_idInt(0),
    m_inviterId(0),
    m_isAdmin(false),
    m_maxDate(0),
    m_maxId(0),
    m_popup(false),
    m_previous(false),
    m_pts(0),
    m_ptsCount(0),
    m_qts(0),
    m_queryId(0),
    m_randomId(0),
    m_userId(0),
    m_version(0),
    m_views(0),
    m_classType(typeUpdateNewMessage)
{
    fetch(in);
}

Update::Update(const Null &null) :
    TelegramTypeObject(null),
    m_authKeyId(0),
    m_blocked(false),
    m_channelId(0),
    m_chatId(0),
    m_date(0),
    m_enabled(false),
    m_flags(0),
    m_idInt(0),
    m_inviterId(0),
    m_isAdmin(false),
    m_maxDate(0),
    m_maxId(0),
    m_popup(false),
    m_previous(false),
    m_pts(0),
    m_ptsCount(0),
    m_qts(0),
    m_queryId(0),
    m_randomId(0),
    m_userId(0),
    m_version(0),
    m_views(0),
    m_classType(typeUpdateNewMessage)
{
}

Update::~Update() {
}

void Update::setAction(const SendMessageAction &action) {
    m_action = action;
}

SendMessageAction Update::action() const {
    return m_action;
}

void Update::setAuthKeyId(qint64 authKeyId) {
    m_authKeyId = authKeyId;
}

qint64 Update::authKeyId() const {
    return m_authKeyId;
}

void Update::setBlocked(bool blocked) {
    m_blocked = blocked;
}

bool Update::blocked() const {
    return m_blocked;
}

void Update::setChannelId(qint32 channelId) {
    m_channelId = channelId;
}

qint32 Update::channelId() const {
    return m_channelId;
}

void Update::setChat(const EncryptedChat &chat) {
    m_chat = chat;
}

EncryptedChat Update::chat() const {
    return m_chat;
}

void Update::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

qint32 Update::chatId() const {
    return m_chatId;
}

void Update::setDate(qint32 date) {
    m_date = date;
}

qint32 Update::date() const {
    return m_date;
}

void Update::setDcOptions(const QList<DcOption> &dcOptions) {
    m_dcOptions = dcOptions;
}

QList<DcOption> Update::dcOptions() const {
    return m_dcOptions;
}

void Update::setDevice(const QString &device) {
    m_device = device;
}

QString Update::device() const {
    return m_device;
}

void Update::setEnabled(bool enabled) {
    m_enabled = enabled;
}

bool Update::enabled() const {
    return m_enabled;
}

void Update::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString Update::firstName() const {
    return m_firstName;
}

void Update::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 Update::flags() const {
    return m_flags;
}

void Update::setForeignLink(const ContactLink &foreignLink) {
    m_foreignLink = foreignLink;
}

ContactLink Update::foreignLink() const {
    return m_foreignLink;
}

void Update::setGroup(const MessageGroup &group) {
    m_group = group;
}

MessageGroup Update::group() const {
    return m_group;
}

void Update::setIdString(const QString &idString) {
    m_idString = idString;
}

QString Update::idString() const {
    return m_idString;
}

void Update::setIdInt(qint32 idInt) {
    m_idInt = idInt;
}

qint32 Update::idInt() const {
    return m_idInt;
}

void Update::setInviterId(qint32 inviterId) {
    m_inviterId = inviterId;
}

qint32 Update::inviterId() const {
    return m_inviterId;
}

void Update::setIsAdmin(bool isAdmin) {
    m_isAdmin = isAdmin;
}

bool Update::isAdmin() const {
    return m_isAdmin;
}

void Update::setKey(const PrivacyKey &key) {
    m_key = key;
}

PrivacyKey Update::key() const {
    return m_key;
}

void Update::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString Update::lastName() const {
    return m_lastName;
}

void Update::setLocation(const QString &location) {
    m_location = location;
}

QString Update::location() const {
    return m_location;
}

void Update::setMaxDate(qint32 maxDate) {
    m_maxDate = maxDate;
}

qint32 Update::maxDate() const {
    return m_maxDate;
}

void Update::setMaxId(qint32 maxId) {
    m_maxId = maxId;
}

qint32 Update::maxId() const {
    return m_maxId;
}

void Update::setMedia(const MessageMedia &media) {
    m_media = media;
}

MessageMedia Update::media() const {
    return m_media;
}

void Update::setMessageEncrypted(const EncryptedMessage &messageEncrypted) {
    m_messageEncrypted = messageEncrypted;
}

EncryptedMessage Update::messageEncrypted() const {
    return m_messageEncrypted;
}

void Update::setMessage(const Message &message) {
    m_message = message;
}

Message Update::message() const {
    return m_message;
}

void Update::setMessageString(const QString &messageString) {
    m_messageString = messageString;
}

QString Update::messageString() const {
    return m_messageString;
}

void Update::setMessages(const QList<qint32> &messages) {
    m_messages = messages;
}

QList<qint32> Update::messages() const {
    return m_messages;
}

void Update::setMyLink(const ContactLink &myLink) {
    m_myLink = myLink;
}

ContactLink Update::myLink() const {
    return m_myLink;
}

void Update::setNotifySettings(const PeerNotifySettings &notifySettings) {
    m_notifySettings = notifySettings;
}

PeerNotifySettings Update::notifySettings() const {
    return m_notifySettings;
}

void Update::setOffset(const QString &offset) {
    m_offset = offset;
}

QString Update::offset() const {
    return m_offset;
}

void Update::setOrder(const QList<qint64> &order) {
    m_order = order;
}

QList<qint64> Update::order() const {
    return m_order;
}

void Update::setParticipants(const ChatParticipants &participants) {
    m_participants = participants;
}

ChatParticipants Update::participants() const {
    return m_participants;
}

void Update::setPeerNotify(const NotifyPeer &peerNotify) {
    m_peerNotify = peerNotify;
}

NotifyPeer Update::peerNotify() const {
    return m_peerNotify;
}

void Update::setPeer(const Peer &peer) {
    m_peer = peer;
}

Peer Update::peer() const {
    return m_peer;
}

void Update::setPhone(const QString &phone) {
    m_phone = phone;
}

QString Update::phone() const {
    return m_phone;
}

void Update::setPhoto(const UserProfilePhoto &photo) {
    m_photo = photo;
}

UserProfilePhoto Update::photo() const {
    return m_photo;
}

void Update::setPopup(bool popup) {
    m_popup = popup;
}

bool Update::popup() const {
    return m_popup;
}

void Update::setPrevious(bool previous) {
    m_previous = previous;
}

bool Update::previous() const {
    return m_previous;
}

void Update::setPts(qint32 pts) {
    m_pts = pts;
}

qint32 Update::pts() const {
    return m_pts;
}

void Update::setPtsCount(qint32 ptsCount) {
    m_ptsCount = ptsCount;
}

qint32 Update::ptsCount() const {
    return m_ptsCount;
}

void Update::setQts(qint32 qts) {
    m_qts = qts;
}

qint32 Update::qts() const {
    return m_qts;
}

void Update::setQuery(const QString &query) {
    m_query = query;
}

QString Update::query() const {
    return m_query;
}

void Update::setQueryId(qint64 queryId) {
    m_queryId = queryId;
}

qint64 Update::queryId() const {
    return m_queryId;
}

void Update::setRandomId(qint64 randomId) {
    m_randomId = randomId;
}

qint64 Update::randomId() const {
    return m_randomId;
}

void Update::setRules(const QList<PrivacyRule> &rules) {
    m_rules = rules;
}

QList<PrivacyRule> Update::rules() const {
    return m_rules;
}

void Update::setStatus(const UserStatus &status) {
    m_status = status;
}

UserStatus Update::status() const {
    return m_status;
}

void Update::setStickerset(const MessagesStickerSet &stickerset) {
    m_stickerset = stickerset;
}

MessagesStickerSet Update::stickerset() const {
    return m_stickerset;
}

void Update::setType(const QString &type) {
    m_type = type;
}

QString Update::type() const {
    return m_type;
}

void Update::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 Update::userId() const {
    return m_userId;
}

void Update::setUsername(const QString &username) {
    m_username = username;
}

QString Update::username() const {
    return m_username;
}

void Update::setVersion(qint32 version) {
    m_version = version;
}

qint32 Update::version() const {
    return m_version;
}

void Update::setViews(qint32 views) {
    m_views = views;
}

qint32 Update::views() const {
    return m_views;
}

void Update::setWebpage(const WebPage &webpage) {
    m_webpage = webpage;
}

WebPage Update::webpage() const {
    return m_webpage;
}

bool Update::operator ==(const Update &b) const {
    return m_classType == b.m_classType &&
           m_action == b.m_action &&
           m_authKeyId == b.m_authKeyId &&
           m_blocked == b.m_blocked &&
           m_channelId == b.m_channelId &&
           m_chat == b.m_chat &&
           m_chatId == b.m_chatId &&
           m_date == b.m_date &&
           m_dcOptions == b.m_dcOptions &&
           m_device == b.m_device &&
           m_enabled == b.m_enabled &&
           m_firstName == b.m_firstName &&
           m_flags == b.m_flags &&
           m_foreignLink == b.m_foreignLink &&
           m_group == b.m_group &&
           m_idString == b.m_idString &&
           m_idInt == b.m_idInt &&
           m_inviterId == b.m_inviterId &&
           m_isAdmin == b.m_isAdmin &&
           m_key == b.m_key &&
           m_lastName == b.m_lastName &&
           m_location == b.m_location &&
           m_maxDate == b.m_maxDate &&
           m_maxId == b.m_maxId &&
           m_media == b.m_media &&
           m_messageEncrypted == b.m_messageEncrypted &&
           m_message == b.m_message &&
           m_messageString == b.m_messageString &&
           m_messages == b.m_messages &&
           m_myLink == b.m_myLink &&
           m_notifySettings == b.m_notifySettings &&
           m_offset == b.m_offset &&
           m_order == b.m_order &&
           m_participants == b.m_participants &&
           m_peerNotify == b.m_peerNotify &&
           m_peer == b.m_peer &&
           m_phone == b.m_phone &&
           m_photo == b.m_photo &&
           m_popup == b.m_popup &&
           m_previous == b.m_previous &&
           m_pts == b.m_pts &&
           m_ptsCount == b.m_ptsCount &&
           m_qts == b.m_qts &&
           m_query == b.m_query &&
           m_queryId == b.m_queryId &&
           m_randomId == b.m_randomId &&
           m_rules == b.m_rules &&
           m_status == b.m_status &&
           m_stickerset == b.m_stickerset &&
           m_type == b.m_type &&
           m_userId == b.m_userId &&
           m_username == b.m_username &&
           m_version == b.m_version &&
           m_views == b.m_views &&
           m_webpage == b.m_webpage;
}

void Update::setClassType(Update::UpdateType classType) {
    m_classType = classType;
}

Update::UpdateType Update::classType() const {
    return m_classType;
}

bool Update::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUpdateNewMessage: {
        m_message.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateMessageID: {
        m_idInt = in->fetchInt();
        m_randomId = in->fetchLong();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateDeleteMessages: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_messages.append(type);
        }
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateUserTyping: {
        m_userId = in->fetchInt();
        m_action.fetch(in);
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChatUserTyping: {
        m_chatId = in->fetchInt();
        m_userId = in->fetchInt();
        m_action.fetch(in);
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChatParticipants: {
        m_participants.fetch(in);
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateUserStatus: {
        m_userId = in->fetchInt();
        m_status.fetch(in);
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateUserName: {
        m_userId = in->fetchInt();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        m_username = in->fetchQString();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateUserPhoto: {
        m_userId = in->fetchInt();
        m_date = in->fetchInt();
        m_photo.fetch(in);
        m_previous = in->fetchBool();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateContactRegistered: {
        m_userId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateContactLink: {
        m_userId = in->fetchInt();
        m_myLink.fetch(in);
        m_foreignLink.fetch(in);
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateNewAuthorization: {
        m_authKeyId = in->fetchLong();
        m_date = in->fetchInt();
        m_device = in->fetchQString();
        m_location = in->fetchQString();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateNewEncryptedMessage: {
        m_messageEncrypted.fetch(in);
        m_qts = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateEncryptedChatTyping: {
        m_chatId = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateEncryption: {
        m_chat.fetch(in);
        m_date = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateEncryptedMessagesRead: {
        m_chatId = in->fetchInt();
        m_maxDate = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChatParticipantAdd: {
        m_chatId = in->fetchInt();
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_version = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChatParticipantDelete: {
        m_chatId = in->fetchInt();
        m_userId = in->fetchInt();
        m_version = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateDcOptions: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_dcOptions_length = in->fetchInt();
        m_dcOptions.clear();
        for (qint32 i = 0; i < m_dcOptions_length; i++) {
            DcOption type;
            type.fetch(in);
            m_dcOptions.append(type);
        }
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateUserBlocked: {
        m_userId = in->fetchInt();
        m_blocked = in->fetchBool();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateNotifySettings: {
        m_peerNotify.fetch(in);
        m_notifySettings.fetch(in);
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateServiceNotification: {
        m_type = in->fetchQString();
        m_messageString = in->fetchQString();
        m_media.fetch(in);
        m_popup = in->fetchBool();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdatePrivacy: {
        m_key.fetch(in);
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_rules_length = in->fetchInt();
        m_rules.clear();
        for (qint32 i = 0; i < m_rules_length; i++) {
            PrivacyRule type;
            type.fetch(in);
            m_rules.append(type);
        }
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateUserPhone: {
        m_userId = in->fetchInt();
        m_phone = in->fetchQString();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateReadHistoryInbox: {
        m_peer.fetch(in);
        m_maxId = in->fetchInt();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateReadHistoryOutbox: {
        m_peer.fetch(in);
        m_maxId = in->fetchInt();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateWebPage: {
        m_webpage.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateReadMessagesContents: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_messages.append(type);
        }
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChannelTooLong: {
        m_flags = in->fetchInt();
        m_channelId = in->fetchInt();
        if(m_flags & 1<<0) {
            m_pts = in->fetchInt();
        }
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChannel: {
        m_channelId = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChannelGroup: {
        m_channelId = in->fetchInt();
        m_group.fetch(in);
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateNewChannelMessage: {
        m_message.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateReadChannelInbox: {
        m_channelId = in->fetchInt();
        m_maxId = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateDeleteChannelMessages: {
        m_channelId = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            qint32 type;
            type = in->fetchInt();
            m_messages.append(type);
        }
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChannelMessageViews: {
        m_channelId = in->fetchInt();
        m_idInt = in->fetchInt();
        m_views = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChatAdmins: {
        m_chatId = in->fetchInt();
        m_enabled = in->fetchBool();
        m_version = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChatParticipantAdmin: {
        m_chatId = in->fetchInt();
        m_userId = in->fetchInt();
        m_isAdmin = in->fetchBool();
        m_version = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateNewStickerSet: {
        m_stickerset.fetch(in);
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateStickerSetsOrder: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_order_length = in->fetchInt();
        m_order.clear();
        for (qint32 i = 0; i < m_order_length; i++) {
            qint64 type;
            type = in->fetchLong();
            m_order.append(type);
        }
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateStickerSets: {
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateSavedGifs: {
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateBotInlineQuery: {
        m_queryId = in->fetchLong();
        m_userId = in->fetchInt();
        m_query = in->fetchQString();
        m_offset = in->fetchQString();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateBotInlineSend: {
        m_userId = in->fetchInt();
        m_query = in->fetchQString();
        m_idString = in->fetchQString();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateEditChannelMessage: {
        m_message.fetch(in);
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    case typeUpdateChannelPinnedMessage: {
        m_channelId = in->fetchInt();
        m_idInt = in->fetchInt();
        m_classType = static_cast<UpdateType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Update::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUpdateNewMessage: {
        m_message.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateMessageID: {
        out->appendInt(m_idInt);
        out->appendLong(m_randomId);
        return true;
    }
        break;
    
    case typeUpdateDeleteMessages: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            out->appendInt(m_messages[i]);
        }
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateUserTyping: {
        out->appendInt(m_userId);
        m_action.push(out);
        return true;
    }
        break;
    
    case typeUpdateChatUserTyping: {
        out->appendInt(m_chatId);
        out->appendInt(m_userId);
        m_action.push(out);
        return true;
    }
        break;
    
    case typeUpdateChatParticipants: {
        m_participants.push(out);
        return true;
    }
        break;
    
    case typeUpdateUserStatus: {
        out->appendInt(m_userId);
        m_status.push(out);
        return true;
    }
        break;
    
    case typeUpdateUserName: {
        out->appendInt(m_userId);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        out->appendQString(m_username);
        return true;
    }
        break;
    
    case typeUpdateUserPhoto: {
        out->appendInt(m_userId);
        out->appendInt(m_date);
        m_photo.push(out);
        out->appendBool(m_previous);
        return true;
    }
        break;
    
    case typeUpdateContactRegistered: {
        out->appendInt(m_userId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeUpdateContactLink: {
        out->appendInt(m_userId);
        m_myLink.push(out);
        m_foreignLink.push(out);
        return true;
    }
        break;
    
    case typeUpdateNewAuthorization: {
        out->appendLong(m_authKeyId);
        out->appendInt(m_date);
        out->appendQString(m_device);
        out->appendQString(m_location);
        return true;
    }
        break;
    
    case typeUpdateNewEncryptedMessage: {
        m_messageEncrypted.push(out);
        out->appendInt(m_qts);
        return true;
    }
        break;
    
    case typeUpdateEncryptedChatTyping: {
        out->appendInt(m_chatId);
        return true;
    }
        break;
    
    case typeUpdateEncryption: {
        m_chat.push(out);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeUpdateEncryptedMessagesRead: {
        out->appendInt(m_chatId);
        out->appendInt(m_maxDate);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeUpdateChatParticipantAdd: {
        out->appendInt(m_chatId);
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        out->appendInt(m_version);
        return true;
    }
        break;
    
    case typeUpdateChatParticipantDelete: {
        out->appendInt(m_chatId);
        out->appendInt(m_userId);
        out->appendInt(m_version);
        return true;
    }
        break;
    
    case typeUpdateDcOptions: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_dcOptions.count());
        for (qint32 i = 0; i < m_dcOptions.count(); i++) {
            m_dcOptions[i].push(out);
        }
        return true;
    }
        break;
    
    case typeUpdateUserBlocked: {
        out->appendInt(m_userId);
        out->appendBool(m_blocked);
        return true;
    }
        break;
    
    case typeUpdateNotifySettings: {
        m_peerNotify.push(out);
        m_notifySettings.push(out);
        return true;
    }
        break;
    
    case typeUpdateServiceNotification: {
        out->appendQString(m_type);
        out->appendQString(m_messageString);
        m_media.push(out);
        out->appendBool(m_popup);
        return true;
    }
        break;
    
    case typeUpdatePrivacy: {
        m_key.push(out);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_rules.count());
        for (qint32 i = 0; i < m_rules.count(); i++) {
            m_rules[i].push(out);
        }
        return true;
    }
        break;
    
    case typeUpdateUserPhone: {
        out->appendInt(m_userId);
        out->appendQString(m_phone);
        return true;
    }
        break;
    
    case typeUpdateReadHistoryInbox: {
        m_peer.push(out);
        out->appendInt(m_maxId);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateReadHistoryOutbox: {
        m_peer.push(out);
        out->appendInt(m_maxId);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateWebPage: {
        m_webpage.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateReadMessagesContents: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            out->appendInt(m_messages[i]);
        }
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateChannelTooLong: {
        out->appendInt(m_flags);
        out->appendInt(m_channelId);
        out->appendInt(m_pts);
        return true;
    }
        break;
    
    case typeUpdateChannel: {
        out->appendInt(m_channelId);
        return true;
    }
        break;
    
    case typeUpdateChannelGroup: {
        out->appendInt(m_channelId);
        m_group.push(out);
        return true;
    }
        break;
    
    case typeUpdateNewChannelMessage: {
        m_message.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateReadChannelInbox: {
        out->appendInt(m_channelId);
        out->appendInt(m_maxId);
        return true;
    }
        break;
    
    case typeUpdateDeleteChannelMessages: {
        out->appendInt(m_channelId);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            out->appendInt(m_messages[i]);
        }
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateChannelMessageViews: {
        out->appendInt(m_channelId);
        out->appendInt(m_idInt);
        out->appendInt(m_views);
        return true;
    }
        break;
    
    case typeUpdateChatAdmins: {
        out->appendInt(m_chatId);
        out->appendBool(m_enabled);
        out->appendInt(m_version);
        return true;
    }
        break;
    
    case typeUpdateChatParticipantAdmin: {
        out->appendInt(m_chatId);
        out->appendInt(m_userId);
        out->appendBool(m_isAdmin);
        out->appendInt(m_version);
        return true;
    }
        break;
    
    case typeUpdateNewStickerSet: {
        m_stickerset.push(out);
        return true;
    }
        break;
    
    case typeUpdateStickerSetsOrder: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_order.count());
        for (qint32 i = 0; i < m_order.count(); i++) {
            out->appendLong(m_order[i]);
        }
        return true;
    }
        break;
    
    case typeUpdateStickerSets: {
        return true;
    }
        break;
    
    case typeUpdateSavedGifs: {
        return true;
    }
        break;
    
    case typeUpdateBotInlineQuery: {
        out->appendLong(m_queryId);
        out->appendInt(m_userId);
        out->appendQString(m_query);
        out->appendQString(m_offset);
        return true;
    }
        break;
    
    case typeUpdateBotInlineSend: {
        out->appendInt(m_userId);
        out->appendQString(m_query);
        out->appendQString(m_idString);
        return true;
    }
        break;
    
    case typeUpdateEditChannelMessage: {
        m_message.push(out);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        return true;
    }
        break;
    
    case typeUpdateChannelPinnedMessage: {
        out->appendInt(m_channelId);
        out->appendInt(m_idInt);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray Update::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Update &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Update::typeUpdateNewMessage:
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateMessageID:
        stream << item.idInt();
        stream << item.randomId();
        break;
    case Update::typeUpdateDeleteMessages:
        stream << item.messages();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateUserTyping:
        stream << item.userId();
        stream << item.action();
        break;
    case Update::typeUpdateChatUserTyping:
        stream << item.chatId();
        stream << item.userId();
        stream << item.action();
        break;
    case Update::typeUpdateChatParticipants:
        stream << item.participants();
        break;
    case Update::typeUpdateUserStatus:
        stream << item.userId();
        stream << item.status();
        break;
    case Update::typeUpdateUserName:
        stream << item.userId();
        stream << item.firstName();
        stream << item.lastName();
        stream << item.username();
        break;
    case Update::typeUpdateUserPhoto:
        stream << item.userId();
        stream << item.date();
        stream << item.photo();
        stream << item.previous();
        break;
    case Update::typeUpdateContactRegistered:
        stream << item.userId();
        stream << item.date();
        break;
    case Update::typeUpdateContactLink:
        stream << item.userId();
        stream << item.myLink();
        stream << item.foreignLink();
        break;
    case Update::typeUpdateNewAuthorization:
        stream << item.authKeyId();
        stream << item.date();
        stream << item.device();
        stream << item.location();
        break;
    case Update::typeUpdateNewEncryptedMessage:
        stream << item.messageEncrypted();
        stream << item.qts();
        break;
    case Update::typeUpdateEncryptedChatTyping:
        stream << item.chatId();
        break;
    case Update::typeUpdateEncryption:
        stream << item.chat();
        stream << item.date();
        break;
    case Update::typeUpdateEncryptedMessagesRead:
        stream << item.chatId();
        stream << item.maxDate();
        stream << item.date();
        break;
    case Update::typeUpdateChatParticipantAdd:
        stream << item.chatId();
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        stream << item.version();
        break;
    case Update::typeUpdateChatParticipantDelete:
        stream << item.chatId();
        stream << item.userId();
        stream << item.version();
        break;
    case Update::typeUpdateDcOptions:
        stream << item.dcOptions();
        break;
    case Update::typeUpdateUserBlocked:
        stream << item.userId();
        stream << item.blocked();
        break;
    case Update::typeUpdateNotifySettings:
        stream << item.peerNotify();
        stream << item.notifySettings();
        break;
    case Update::typeUpdateServiceNotification:
        stream << item.type();
        stream << item.messageString();
        stream << item.media();
        stream << item.popup();
        break;
    case Update::typeUpdatePrivacy:
        stream << item.key();
        stream << item.rules();
        break;
    case Update::typeUpdateUserPhone:
        stream << item.userId();
        stream << item.phone();
        break;
    case Update::typeUpdateReadHistoryInbox:
        stream << item.peer();
        stream << item.maxId();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateReadHistoryOutbox:
        stream << item.peer();
        stream << item.maxId();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateWebPage:
        stream << item.webpage();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateReadMessagesContents:
        stream << item.messages();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateChannelTooLong:
        stream << item.flags();
        stream << item.channelId();
        stream << item.pts();
        break;
    case Update::typeUpdateChannel:
        stream << item.channelId();
        break;
    case Update::typeUpdateChannelGroup:
        stream << item.channelId();
        stream << item.group();
        break;
    case Update::typeUpdateNewChannelMessage:
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateReadChannelInbox:
        stream << item.channelId();
        stream << item.maxId();
        break;
    case Update::typeUpdateDeleteChannelMessages:
        stream << item.channelId();
        stream << item.messages();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateChannelMessageViews:
        stream << item.channelId();
        stream << item.idInt();
        stream << item.views();
        break;
    case Update::typeUpdateChatAdmins:
        stream << item.chatId();
        stream << item.enabled();
        stream << item.version();
        break;
    case Update::typeUpdateChatParticipantAdmin:
        stream << item.chatId();
        stream << item.userId();
        stream << item.isAdmin();
        stream << item.version();
        break;
    case Update::typeUpdateNewStickerSet:
        stream << item.stickerset();
        break;
    case Update::typeUpdateStickerSetsOrder:
        stream << item.order();
        break;
    case Update::typeUpdateStickerSets:
        
        break;
    case Update::typeUpdateSavedGifs:
        
        break;
    case Update::typeUpdateBotInlineQuery:
        stream << item.queryId();
        stream << item.userId();
        stream << item.query();
        stream << item.offset();
        break;
    case Update::typeUpdateBotInlineSend:
        stream << item.userId();
        stream << item.query();
        stream << item.idString();
        break;
    case Update::typeUpdateEditChannelMessage:
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        break;
    case Update::typeUpdateChannelPinnedMessage:
        stream << item.channelId();
        stream << item.idInt();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Update &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Update::UpdateType>(type));
    switch(type) {
    case Update::typeUpdateNewMessage: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateMessageID: {
        qint32 m_id_int;
        stream >> m_id_int;
        item.setIdInt(m_id_int);
        qint64 m_random_id;
        stream >> m_random_id;
        item.setRandomId(m_random_id);
    }
        break;
    case Update::typeUpdateDeleteMessages: {
        QList<qint32> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateUserTyping: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        SendMessageAction m_action;
        stream >> m_action;
        item.setAction(m_action);
    }
        break;
    case Update::typeUpdateChatUserTyping: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        SendMessageAction m_action;
        stream >> m_action;
        item.setAction(m_action);
    }
        break;
    case Update::typeUpdateChatParticipants: {
        ChatParticipants m_participants;
        stream >> m_participants;
        item.setParticipants(m_participants);
    }
        break;
    case Update::typeUpdateUserStatus: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        UserStatus m_status;
        stream >> m_status;
        item.setStatus(m_status);
    }
        break;
    case Update::typeUpdateUserName: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
        QString m_username;
        stream >> m_username;
        item.setUsername(m_username);
    }
        break;
    case Update::typeUpdateUserPhoto: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        UserProfilePhoto m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        bool m_previous;
        stream >> m_previous;
        item.setPrevious(m_previous);
    }
        break;
    case Update::typeUpdateContactRegistered: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case Update::typeUpdateContactLink: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        ContactLink m_my_link;
        stream >> m_my_link;
        item.setMyLink(m_my_link);
        ContactLink m_foreign_link;
        stream >> m_foreign_link;
        item.setForeignLink(m_foreign_link);
    }
        break;
    case Update::typeUpdateNewAuthorization: {
        qint64 m_auth_key_id;
        stream >> m_auth_key_id;
        item.setAuthKeyId(m_auth_key_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        QString m_device;
        stream >> m_device;
        item.setDevice(m_device);
        QString m_location;
        stream >> m_location;
        item.setLocation(m_location);
    }
        break;
    case Update::typeUpdateNewEncryptedMessage: {
        EncryptedMessage m_message_Encrypted;
        stream >> m_message_Encrypted;
        item.setMessageEncrypted(m_message_Encrypted);
        qint32 m_qts;
        stream >> m_qts;
        item.setQts(m_qts);
    }
        break;
    case Update::typeUpdateEncryptedChatTyping: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
    }
        break;
    case Update::typeUpdateEncryption: {
        EncryptedChat m_chat;
        stream >> m_chat;
        item.setChat(m_chat);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case Update::typeUpdateEncryptedMessagesRead: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_max_date;
        stream >> m_max_date;
        item.setMaxDate(m_max_date);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case Update::typeUpdateChatParticipantAdd: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    case Update::typeUpdateChatParticipantDelete: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    case Update::typeUpdateDcOptions: {
        QList<DcOption> m_dc_options;
        stream >> m_dc_options;
        item.setDcOptions(m_dc_options);
    }
        break;
    case Update::typeUpdateUserBlocked: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        bool m_blocked;
        stream >> m_blocked;
        item.setBlocked(m_blocked);
    }
        break;
    case Update::typeUpdateNotifySettings: {
        NotifyPeer m_peer_Notify;
        stream >> m_peer_Notify;
        item.setPeerNotify(m_peer_Notify);
        PeerNotifySettings m_notify_settings;
        stream >> m_notify_settings;
        item.setNotifySettings(m_notify_settings);
    }
        break;
    case Update::typeUpdateServiceNotification: {
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        QString m_message_string;
        stream >> m_message_string;
        item.setMessageString(m_message_string);
        MessageMedia m_media;
        stream >> m_media;
        item.setMedia(m_media);
        bool m_popup;
        stream >> m_popup;
        item.setPopup(m_popup);
    }
        break;
    case Update::typeUpdatePrivacy: {
        PrivacyKey m_key;
        stream >> m_key;
        item.setKey(m_key);
        QList<PrivacyRule> m_rules;
        stream >> m_rules;
        item.setRules(m_rules);
    }
        break;
    case Update::typeUpdateUserPhone: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_phone;
        stream >> m_phone;
        item.setPhone(m_phone);
    }
        break;
    case Update::typeUpdateReadHistoryInbox: {
        Peer m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
        qint32 m_max_id;
        stream >> m_max_id;
        item.setMaxId(m_max_id);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateReadHistoryOutbox: {
        Peer m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
        qint32 m_max_id;
        stream >> m_max_id;
        item.setMaxId(m_max_id);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateWebPage: {
        WebPage m_webpage;
        stream >> m_webpage;
        item.setWebpage(m_webpage);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateReadMessagesContents: {
        QList<qint32> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateChannelTooLong: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
    }
        break;
    case Update::typeUpdateChannel: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
    }
        break;
    case Update::typeUpdateChannelGroup: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        MessageGroup m_group;
        stream >> m_group;
        item.setGroup(m_group);
    }
        break;
    case Update::typeUpdateNewChannelMessage: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateReadChannelInbox: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_max_id;
        stream >> m_max_id;
        item.setMaxId(m_max_id);
    }
        break;
    case Update::typeUpdateDeleteChannelMessages: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        QList<qint32> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateChannelMessageViews: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_id_int;
        stream >> m_id_int;
        item.setIdInt(m_id_int);
        qint32 m_views;
        stream >> m_views;
        item.setViews(m_views);
    }
        break;
    case Update::typeUpdateChatAdmins: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        bool m_enabled;
        stream >> m_enabled;
        item.setEnabled(m_enabled);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    case Update::typeUpdateChatParticipantAdmin: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        bool m_is_admin;
        stream >> m_is_admin;
        item.setIsAdmin(m_is_admin);
        qint32 m_version;
        stream >> m_version;
        item.setVersion(m_version);
    }
        break;
    case Update::typeUpdateNewStickerSet: {
        MessagesStickerSet m_stickerset;
        stream >> m_stickerset;
        item.setStickerset(m_stickerset);
    }
        break;
    case Update::typeUpdateStickerSetsOrder: {
        QList<qint64> m_order;
        stream >> m_order;
        item.setOrder(m_order);
    }
        break;
    case Update::typeUpdateStickerSets: {
        
    }
        break;
    case Update::typeUpdateSavedGifs: {
        
    }
        break;
    case Update::typeUpdateBotInlineQuery: {
        qint64 m_query_id;
        stream >> m_query_id;
        item.setQueryId(m_query_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_query;
        stream >> m_query;
        item.setQuery(m_query);
        QString m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
    }
        break;
    case Update::typeUpdateBotInlineSend: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_query;
        stream >> m_query;
        item.setQuery(m_query);
        QString m_id_string;
        stream >> m_id_string;
        item.setIdString(m_id_string);
    }
        break;
    case Update::typeUpdateEditChannelMessage: {
        Message m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
    }
        break;
    case Update::typeUpdateChannelPinnedMessage: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
        qint32 m_id_int;
        stream >> m_id_int;
        item.setIdInt(m_id_int);
    }
        break;
    }
    return stream;
}

