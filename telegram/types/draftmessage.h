// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_DRAFTMESSAGE
#define LQTG_TYPE_DRAFTMESSAGE

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QList>
#include "messageentity.h"
#include <QString>

class LIBQTELEGRAMSHARED_EXPORT DraftMessage : public TelegramTypeObject
{
public:
    enum DraftMessageClassType {
        typeDraftMessageEmpty = 0xba4baec5,
        typeDraftMessage = 0xfd8e711f
    };

    DraftMessage(DraftMessageClassType classType = typeDraftMessageEmpty, InboundPkt *in = 0);
    DraftMessage(InboundPkt *in);
    DraftMessage(const Null&);
    virtual ~DraftMessage();

    void setDate(qint32 date);
    qint32 date() const;

    void setEntities(const QList<MessageEntity> &entities);
    QList<MessageEntity> entities() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setMessage(const QString &message);
    QString message() const;

    void setNoWebpage(bool noWebpage);
    bool noWebpage() const;

    void setReplyToMsgId(qint32 replyToMsgId);
    qint32 replyToMsgId() const;

    void setClassType(DraftMessageClassType classType);
    DraftMessageClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static DraftMessage fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const DraftMessage &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_date;
    QList<MessageEntity> m_entities;
    qint32 m_flags;
    QString m_message;
    qint32 m_replyToMsgId;
    DraftMessageClassType m_classType;
};

Q_DECLARE_METATYPE(DraftMessage)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const DraftMessage &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, DraftMessage &item);

inline DraftMessage::DraftMessage(DraftMessageClassType classType, InboundPkt *in) :
    m_date(0),
    m_flags(0),
    m_replyToMsgId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline DraftMessage::DraftMessage(InboundPkt *in) :
    m_date(0),
    m_flags(0),
    m_replyToMsgId(0),
    m_classType(typeDraftMessageEmpty)
{
    fetch(in);
}

inline DraftMessage::DraftMessage(const Null &null) :
    TelegramTypeObject(null),
    m_date(0),
    m_flags(0),
    m_replyToMsgId(0),
    m_classType(typeDraftMessageEmpty)
{
}

inline DraftMessage::~DraftMessage() {
}

inline void DraftMessage::setDate(qint32 date) {
    m_date = date;
}

inline qint32 DraftMessage::date() const {
    return m_date;
}

inline void DraftMessage::setEntities(const QList<MessageEntity> &entities) {
    m_entities = entities;
}

inline QList<MessageEntity> DraftMessage::entities() const {
    return m_entities;
}

inline void DraftMessage::setFlags(qint32 flags) {
    m_flags = flags;
}

inline qint32 DraftMessage::flags() const {
    return m_flags;
}

inline void DraftMessage::setMessage(const QString &message) {
    m_message = message;
}

inline QString DraftMessage::message() const {
    return m_message;
}

inline void DraftMessage::setNoWebpage(bool noWebpage) {
    if(noWebpage) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

inline bool DraftMessage::noWebpage() const {
    return (m_flags & 1<<1);
}

inline void DraftMessage::setReplyToMsgId(qint32 replyToMsgId) {
    m_replyToMsgId = replyToMsgId;
}

inline qint32 DraftMessage::replyToMsgId() const {
    return m_replyToMsgId;
}

inline bool DraftMessage::operator ==(const DraftMessage &b) const {
    return m_classType == b.m_classType &&
           m_date == b.m_date &&
           m_entities == b.m_entities &&
           m_flags == b.m_flags &&
           m_message == b.m_message &&
           m_replyToMsgId == b.m_replyToMsgId;
}

inline void DraftMessage::setClassType(DraftMessage::DraftMessageClassType classType) {
    m_classType = classType;
}

inline DraftMessage::DraftMessageClassType DraftMessage::classType() const {
    return m_classType;
}

inline bool DraftMessage::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDraftMessageEmpty: {
        m_classType = static_cast<DraftMessageClassType>(x);
        return true;
    }
        break;
    
    case typeDraftMessage: {
        m_flags = in->fetchInt();
        if(m_flags & 1<<0) {
            m_replyToMsgId = in->fetchInt();
        }
        m_message = in->fetchQString();
        if(m_flags & 1<<3) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<3) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        m_date = in->fetchInt();
        m_classType = static_cast<DraftMessageClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool DraftMessage::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDraftMessageEmpty: {
        return true;
    }
        break;
    
    case typeDraftMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_replyToMsgId);
        out->appendQString(m_message);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_entities.count());
        for (qint32 i = 0; i < m_entities.count(); i++) {
            m_entities[i].push(out);
        }
        out->appendInt(m_date);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> DraftMessage::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeDraftMessageEmpty: {
        result["classType"] = "DraftMessage::typeDraftMessageEmpty";
        return result;
    }
        break;
    
    case typeDraftMessage: {
        result["classType"] = "DraftMessage::typeDraftMessage";
        result["noWebpage"] = QVariant::fromValue<bool>(noWebpage());
        result["replyToMsgId"] = QVariant::fromValue<qint32>(replyToMsgId());
        result["message"] = QVariant::fromValue<QString>(message());
        QList<QVariant> _entities;
        Q_FOREACH(const MessageEntity &m__type, m_entities)
            _entities << m__type.toMap();
        result["entities"] = _entities;
        result["date"] = QVariant::fromValue<qint32>(date());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline DraftMessage DraftMessage::fromMap(const QMap<QString, QVariant> &map) {
    DraftMessage result;
    if(map.value("classType").toString() == "DraftMessage::typeDraftMessageEmpty") {
        result.setClassType(typeDraftMessageEmpty);
        return result;
    }
    if(map.value("classType").toString() == "DraftMessage::typeDraftMessage") {
        result.setClassType(typeDraftMessage);
        result.setNoWebpage( map.value("noWebpage").value<bool>() );
        result.setReplyToMsgId( map.value("replyToMsgId").value<qint32>() );
        result.setMessage( map.value("message").value<QString>() );
        QList<QVariant> map_entities = map["entities"].toList();
        QList<MessageEntity> _entities;
        Q_FOREACH(const QVariant &var, map_entities)
            _entities << MessageEntity::fromMap(var.toMap());
        result.setEntities(_entities);
        result.setDate( map.value("date").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray DraftMessage::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const DraftMessage &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case DraftMessage::typeDraftMessageEmpty:
        
        break;
    case DraftMessage::typeDraftMessage:
        stream << item.flags();
        stream << item.replyToMsgId();
        stream << item.message();
        stream << item.entities();
        stream << item.date();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, DraftMessage &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<DraftMessage::DraftMessageClassType>(type));
    switch(type) {
    case DraftMessage::typeDraftMessageEmpty: {
        
    }
        break;
    case DraftMessage::typeDraftMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_reply_to_msg_id;
        stream >> m_reply_to_msg_id;
        item.setReplyToMsgId(m_reply_to_msg_id);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_DRAFTMESSAGE
