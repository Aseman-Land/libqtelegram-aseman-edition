// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authpasswordrecoveryobject.h"

AuthPasswordRecoveryObject::AuthPasswordRecoveryObject(const AuthPasswordRecovery &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

AuthPasswordRecoveryObject::AuthPasswordRecoveryObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

AuthPasswordRecoveryObject::~AuthPasswordRecoveryObject() {
}

void AuthPasswordRecoveryObject::setEmailPattern(const QString &emailPattern) {
    if(m_core.emailPattern() == emailPattern) return;
    m_core.setEmailPattern(emailPattern);
    Q_EMIT emailPatternChanged();
    Q_EMIT coreChanged();
}

QString AuthPasswordRecoveryObject::emailPattern() const {
    return m_core.emailPattern();
}

AuthPasswordRecoveryObject &AuthPasswordRecoveryObject::operator =(const AuthPasswordRecovery &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT emailPatternChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool AuthPasswordRecoveryObject::operator ==(const AuthPasswordRecovery &b) const {
    return m_core == b;
}

void AuthPasswordRecoveryObject::setClassType(quint32 classType) {
    AuthPasswordRecovery::AuthPasswordRecoveryType result;
    switch(classType) {
    case TypeAuthPasswordRecovery:
        result = AuthPasswordRecovery::typeAuthPasswordRecovery;
        break;
    default:
        result = AuthPasswordRecovery::typeAuthPasswordRecovery;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AuthPasswordRecoveryObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthPasswordRecovery::typeAuthPasswordRecovery:
        result = TypeAuthPasswordRecovery;
        break;
    default:
        result = TypeAuthPasswordRecovery;
        break;
    }

    return result;
}

void AuthPasswordRecoveryObject::setCore(const AuthPasswordRecovery &core) {
    operator =(core);
}

AuthPasswordRecovery AuthPasswordRecoveryObject::core() const {
    return m_core;
}

