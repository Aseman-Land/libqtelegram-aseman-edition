// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTAPPEVENT
#define LQTG_TYPE_INPUTAPPEVENT

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QString>
#include <QtGlobal>

class LIBQTELEGRAMSHARED_EXPORT InputAppEvent : public TelegramTypeObject
{
public:
    enum InputAppEventClassType {
        typeInputAppEvent = 0x770656a8
    };

    InputAppEvent(InputAppEventClassType classType = typeInputAppEvent, InboundPkt *in = 0);
    InputAppEvent(InboundPkt *in);
    InputAppEvent(const Null&);
    virtual ~InputAppEvent();

    void setData(const QString &data);
    QString data() const;

    void setPeer(qint64 peer);
    qint64 peer() const;

    void setTime(qreal time);
    qreal time() const;

    void setType(const QString &type);
    QString type() const;

    void setClassType(InputAppEventClassType classType);
    InputAppEventClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static InputAppEvent fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const InputAppEvent &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_data;
    qint64 m_peer;
    qreal m_time;
    QString m_type;
    InputAppEventClassType m_classType;
};

Q_DECLARE_METATYPE(InputAppEvent)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const InputAppEvent &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, InputAppEvent &item);

inline InputAppEvent::InputAppEvent(InputAppEventClassType classType, InboundPkt *in) :
    m_peer(0),
    m_time(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline InputAppEvent::InputAppEvent(InboundPkt *in) :
    m_peer(0),
    m_time(0),
    m_classType(typeInputAppEvent)
{
    fetch(in);
}

inline InputAppEvent::InputAppEvent(const Null &null) :
    TelegramTypeObject(null),
    m_peer(0),
    m_time(0),
    m_classType(typeInputAppEvent)
{
}

inline InputAppEvent::~InputAppEvent() {
}

inline void InputAppEvent::setData(const QString &data) {
    m_data = data;
}

inline QString InputAppEvent::data() const {
    return m_data;
}

inline void InputAppEvent::setPeer(qint64 peer) {
    m_peer = peer;
}

inline qint64 InputAppEvent::peer() const {
    return m_peer;
}

inline void InputAppEvent::setTime(qreal time) {
    m_time = time;
}

inline qreal InputAppEvent::time() const {
    return m_time;
}

inline void InputAppEvent::setType(const QString &type) {
    m_type = type;
}

inline QString InputAppEvent::type() const {
    return m_type;
}

inline bool InputAppEvent::operator ==(const InputAppEvent &b) const {
    return m_classType == b.m_classType &&
           m_data == b.m_data &&
           m_peer == b.m_peer &&
           m_time == b.m_time &&
           m_type == b.m_type;
}

inline void InputAppEvent::setClassType(InputAppEvent::InputAppEventClassType classType) {
    m_classType = classType;
}

inline InputAppEvent::InputAppEventClassType InputAppEvent::classType() const {
    return m_classType;
}

inline bool InputAppEvent::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputAppEvent: {
        m_time = in->fetchDouble();
        m_type = in->fetchQString();
        m_peer = in->fetchLong();
        m_data = in->fetchQString();
        m_classType = static_cast<InputAppEventClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool InputAppEvent::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputAppEvent: {
        out->appendDouble(m_time);
        out->appendQString(m_type);
        out->appendLong(m_peer);
        out->appendQString(m_data);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> InputAppEvent::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputAppEvent: {
        result["classType"] = "InputAppEvent::typeInputAppEvent";
        result["time"] = QVariant::fromValue<qreal>(time());
        result["type"] = QVariant::fromValue<QString>(type());
        result["peer"] = QVariant::fromValue<qint64>(peer());
        result["data"] = QVariant::fromValue<QString>(data());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline InputAppEvent InputAppEvent::fromMap(const QMap<QString, QVariant> &map) {
    InputAppEvent result;
    if(map.value("classType").toString() == "InputAppEvent::typeInputAppEvent") {
        result.setClassType(typeInputAppEvent);
        result.setTime( map.value("time").value<qreal>() );
        result.setType( map.value("type").value<QString>() );
        result.setPeer( map.value("peer").value<qint64>() );
        result.setData( map.value("data").value<QString>() );
        return result;
    }
    return result;
}

inline QByteArray InputAppEvent::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const InputAppEvent &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputAppEvent::typeInputAppEvent:
        stream << item.time();
        stream << item.type();
        stream << item.peer();
        stream << item.data();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, InputAppEvent &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputAppEvent::InputAppEventClassType>(type));
    switch(type) {
    case InputAppEvent::typeInputAppEvent: {
        qreal m_time;
        stream >> m_time;
        item.setTime(m_time);
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        qint64 m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
        QString m_data;
        stream >> m_data;
        item.setData(m_data);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_INPUTAPPEVENT
