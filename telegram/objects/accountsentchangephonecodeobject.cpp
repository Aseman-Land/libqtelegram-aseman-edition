// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "accountsentchangephonecodeobject.h"

AccountSentChangePhoneCodeObject::AccountSentChangePhoneCodeObject(const AccountSentChangePhoneCode &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

AccountSentChangePhoneCodeObject::AccountSentChangePhoneCodeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

AccountSentChangePhoneCodeObject::~AccountSentChangePhoneCodeObject() {
}

void AccountSentChangePhoneCodeObject::setPhoneCodeHash(const QString &phoneCodeHash) {
    if(m_core.phoneCodeHash() == phoneCodeHash) return;
    m_core.setPhoneCodeHash(phoneCodeHash);
    Q_EMIT phoneCodeHashChanged();
    Q_EMIT coreChanged();
}

QString AccountSentChangePhoneCodeObject::phoneCodeHash() const {
    return m_core.phoneCodeHash();
}

void AccountSentChangePhoneCodeObject::setSendCallTimeout(qint32 sendCallTimeout) {
    if(m_core.sendCallTimeout() == sendCallTimeout) return;
    m_core.setSendCallTimeout(sendCallTimeout);
    Q_EMIT sendCallTimeoutChanged();
    Q_EMIT coreChanged();
}

qint32 AccountSentChangePhoneCodeObject::sendCallTimeout() const {
    return m_core.sendCallTimeout();
}

AccountSentChangePhoneCodeObject &AccountSentChangePhoneCodeObject::operator =(const AccountSentChangePhoneCode &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT phoneCodeHashChanged();
    Q_EMIT sendCallTimeoutChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool AccountSentChangePhoneCodeObject::operator ==(const AccountSentChangePhoneCode &b) const {
    return m_core == b;
}

void AccountSentChangePhoneCodeObject::setClassType(quint32 classType) {
    AccountSentChangePhoneCode::AccountSentChangePhoneCodeType result;
    switch(classType) {
    case TypeAccountSentChangePhoneCode:
        result = AccountSentChangePhoneCode::typeAccountSentChangePhoneCode;
        break;
    default:
        result = AccountSentChangePhoneCode::typeAccountSentChangePhoneCode;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AccountSentChangePhoneCodeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AccountSentChangePhoneCode::typeAccountSentChangePhoneCode:
        result = TypeAccountSentChangePhoneCode;
        break;
    default:
        result = TypeAccountSentChangePhoneCode;
        break;
    }

    return result;
}

void AccountSentChangePhoneCodeObject::setCore(const AccountSentChangePhoneCode &core) {
    operator =(core);
}

AccountSentChangePhoneCode AccountSentChangePhoneCodeObject::core() const {
    return m_core;
}

