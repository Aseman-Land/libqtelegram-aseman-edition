// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "dialogobject.h"

DialogObject::DialogObject(const Dialog &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_notifySettings(0),
    m_peer(0),
    m_core(core)
{
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &DialogObject::coreNotifySettingsChanged);
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &DialogObject::corePeerChanged);
}

DialogObject::DialogObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_notifySettings(0),
    m_peer(0),
    m_core()
{
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &DialogObject::coreNotifySettingsChanged);
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &DialogObject::corePeerChanged);
}

DialogObject::~DialogObject() {
}

void DialogObject::setNotifySettings(PeerNotifySettingsObject* notifySettings) {
    if(m_notifySettings == notifySettings) return;
    if(m_notifySettings) delete m_notifySettings;
    m_notifySettings = notifySettings;
    if(m_notifySettings) {
        m_notifySettings->setParent(this);
        m_core.setNotifySettings(m_notifySettings->core());
        connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &DialogObject::coreNotifySettingsChanged);
    }
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

PeerNotifySettingsObject*  DialogObject::notifySettings() const {
    return m_notifySettings;
}

void DialogObject::setPeer(PeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), &PeerObject::coreChanged, this, &DialogObject::corePeerChanged);
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

PeerObject*  DialogObject::peer() const {
    return m_peer;
}

void DialogObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

qint32 DialogObject::pts() const {
    return m_core.pts();
}

void DialogObject::setReadInboxMaxId(qint32 readInboxMaxId) {
    if(m_core.readInboxMaxId() == readInboxMaxId) return;
    m_core.setReadInboxMaxId(readInboxMaxId);
    Q_EMIT readInboxMaxIdChanged();
    Q_EMIT coreChanged();
}

qint32 DialogObject::readInboxMaxId() const {
    return m_core.readInboxMaxId();
}

void DialogObject::setTopImportantMessage(qint32 topImportantMessage) {
    if(m_core.topImportantMessage() == topImportantMessage) return;
    m_core.setTopImportantMessage(topImportantMessage);
    Q_EMIT topImportantMessageChanged();
    Q_EMIT coreChanged();
}

qint32 DialogObject::topImportantMessage() const {
    return m_core.topImportantMessage();
}

void DialogObject::setTopMessage(qint32 topMessage) {
    if(m_core.topMessage() == topMessage) return;
    m_core.setTopMessage(topMessage);
    Q_EMIT topMessageChanged();
    Q_EMIT coreChanged();
}

qint32 DialogObject::topMessage() const {
    return m_core.topMessage();
}

void DialogObject::setUnreadCount(qint32 unreadCount) {
    if(m_core.unreadCount() == unreadCount) return;
    m_core.setUnreadCount(unreadCount);
    Q_EMIT unreadCountChanged();
    Q_EMIT coreChanged();
}

qint32 DialogObject::unreadCount() const {
    return m_core.unreadCount();
}

void DialogObject::setUnreadImportantCount(qint32 unreadImportantCount) {
    if(m_core.unreadImportantCount() == unreadImportantCount) return;
    m_core.setUnreadImportantCount(unreadImportantCount);
    Q_EMIT unreadImportantCountChanged();
    Q_EMIT coreChanged();
}

qint32 DialogObject::unreadImportantCount() const {
    return m_core.unreadImportantCount();
}

DialogObject &DialogObject::operator =(const Dialog &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_notifySettings->setCore(b.notifySettings());
    m_peer->setCore(b.peer());

    Q_EMIT notifySettingsChanged();
    Q_EMIT peerChanged();
    Q_EMIT ptsChanged();
    Q_EMIT readInboxMaxIdChanged();
    Q_EMIT topImportantMessageChanged();
    Q_EMIT topMessageChanged();
    Q_EMIT unreadCountChanged();
    Q_EMIT unreadImportantCountChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool DialogObject::operator ==(const Dialog &b) const {
    return m_core == b;
}

void DialogObject::setClassType(quint32 classType) {
    Dialog::DialogClassType result;
    switch(classType) {
    case TypeDialog:
        result = Dialog::typeDialog;
        break;
    case TypeDialogChannel:
        result = Dialog::typeDialogChannel;
        break;
    default:
        result = Dialog::typeDialog;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 DialogObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Dialog::typeDialog:
        result = TypeDialog;
        break;
    case Dialog::typeDialogChannel:
        result = TypeDialogChannel;
        break;
    default:
        result = TypeDialog;
        break;
    }

    return result;
}

void DialogObject::setCore(const Dialog &core) {
    operator =(core);
}

Dialog DialogObject::core() const {
    return m_core;
}

void DialogObject::coreNotifySettingsChanged() {
    if(m_core.notifySettings() == m_notifySettings->core()) return;
    m_core.setNotifySettings(m_notifySettings->core());
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

void DialogObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

