// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "dcoptionobject.h"

DcOptionObject::DcOptionObject(const DcOption &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

DcOptionObject::DcOptionObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

DcOptionObject::~DcOptionObject() {
}

void DcOptionObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 DcOptionObject::flags() const {
    return m_core.flags();
}

void DcOptionObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint32 DcOptionObject::id() const {
    return m_core.id();
}

void DcOptionObject::setIpAddress(const QString &ipAddress) {
    if(m_core.ipAddress() == ipAddress) return;
    m_core.setIpAddress(ipAddress);
    Q_EMIT ipAddressChanged();
    Q_EMIT coreChanged();
}

QString DcOptionObject::ipAddress() const {
    return m_core.ipAddress();
}

void DcOptionObject::setIpv6(bool ipv6) {
    if(m_core.ipv6() == ipv6) return;
    m_core.setIpv6(ipv6);
    Q_EMIT ipv6Changed();
    Q_EMIT coreChanged();
}

bool DcOptionObject::ipv6() const {
    return m_core.ipv6();
}

void DcOptionObject::setMediaOnly(bool mediaOnly) {
    if(m_core.mediaOnly() == mediaOnly) return;
    m_core.setMediaOnly(mediaOnly);
    Q_EMIT mediaOnlyChanged();
    Q_EMIT coreChanged();
}

bool DcOptionObject::mediaOnly() const {
    return m_core.mediaOnly();
}

void DcOptionObject::setPort(qint32 port) {
    if(m_core.port() == port) return;
    m_core.setPort(port);
    Q_EMIT portChanged();
    Q_EMIT coreChanged();
}

qint32 DcOptionObject::port() const {
    return m_core.port();
}

DcOptionObject &DcOptionObject::operator =(const DcOption &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT flagsChanged();
    Q_EMIT idChanged();
    Q_EMIT ipAddressChanged();
    Q_EMIT ipv6Changed();
    Q_EMIT mediaOnlyChanged();
    Q_EMIT portChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool DcOptionObject::operator ==(const DcOption &b) const {
    return m_core == b;
}

void DcOptionObject::setClassType(quint32 classType) {
    DcOption::DcOptionType result;
    switch(classType) {
    case TypeDcOption:
        result = DcOption::typeDcOption;
        break;
    default:
        result = DcOption::typeDcOption;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 DcOptionObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case DcOption::typeDcOption:
        result = TypeDcOption;
        break;
    default:
        result = TypeDcOption;
        break;
    }

    return result;
}

void DcOptionObject::setCore(const DcOption &core) {
    operator =(core);
}

DcOption DcOptionObject::core() const {
    return m_core;
}

