// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "filelocation.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

FileLocation::FileLocation(FileLocationType classType, InboundPkt *in) :
    m_dcId(0),
    m_localId(0),
    m_secret(0),
    m_volumeId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

FileLocation::FileLocation(InboundPkt *in) :
    m_dcId(0),
    m_localId(0),
    m_secret(0),
    m_volumeId(0),
    m_classType(typeFileLocationUnavailable)
{
    fetch(in);
}

FileLocation::FileLocation(const Null &null) :
    TelegramTypeObject(null),
    m_dcId(0),
    m_localId(0),
    m_secret(0),
    m_volumeId(0),
    m_classType(typeFileLocationUnavailable)
{
}

FileLocation::~FileLocation() {
}

void FileLocation::setDcId(qint32 dcId) {
    m_dcId = dcId;
}

qint32 FileLocation::dcId() const {
    return m_dcId;
}

void FileLocation::setLocalId(qint32 localId) {
    m_localId = localId;
}

qint32 FileLocation::localId() const {
    return m_localId;
}

void FileLocation::setSecret(qint64 secret) {
    m_secret = secret;
}

qint64 FileLocation::secret() const {
    return m_secret;
}

void FileLocation::setVolumeId(qint64 volumeId) {
    m_volumeId = volumeId;
}

qint64 FileLocation::volumeId() const {
    return m_volumeId;
}

bool FileLocation::operator ==(const FileLocation &b) const {
    return m_classType == b.m_classType &&
           m_dcId == b.m_dcId &&
           m_localId == b.m_localId &&
           m_secret == b.m_secret &&
           m_volumeId == b.m_volumeId;
}

void FileLocation::setClassType(FileLocation::FileLocationType classType) {
    m_classType = classType;
}

FileLocation::FileLocationType FileLocation::classType() const {
    return m_classType;
}

bool FileLocation::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeFileLocationUnavailable: {
        m_volumeId = in->fetchLong();
        m_localId = in->fetchInt();
        m_secret = in->fetchLong();
        m_classType = static_cast<FileLocationType>(x);
        return true;
    }
        break;
    
    case typeFileLocation: {
        m_dcId = in->fetchInt();
        m_volumeId = in->fetchLong();
        m_localId = in->fetchInt();
        m_secret = in->fetchLong();
        m_classType = static_cast<FileLocationType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool FileLocation::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeFileLocationUnavailable: {
        out->appendLong(m_volumeId);
        out->appendInt(m_localId);
        out->appendLong(m_secret);
        return true;
    }
        break;
    
    case typeFileLocation: {
        out->appendInt(m_dcId);
        out->appendLong(m_volumeId);
        out->appendInt(m_localId);
        out->appendLong(m_secret);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QDataStream &operator<<(QDataStream &stream, const FileLocation &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case FileLocation::typeFileLocationUnavailable:
        stream << item.volumeId();
        stream << item.localId();
        stream << item.secret();
        break;
    case FileLocation::typeFileLocation:
        stream << item.dcId();
        stream << item.volumeId();
        stream << item.localId();
        stream << item.secret();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, FileLocation &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<FileLocation::FileLocationType>(type));
    switch(type) {
    case FileLocation::typeFileLocationUnavailable: {
        qint64 m_volume_id;
        stream >> m_volume_id;
        item.setVolumeId(m_volume_id);
        qint32 m_local_id;
        stream >> m_local_id;
        item.setLocalId(m_local_id);
        qint64 m_secret;
        stream >> m_secret;
        item.setSecret(m_secret);
    }
        break;
    case FileLocation::typeFileLocation: {
        qint32 m_dc_id;
        stream >> m_dc_id;
        item.setDcId(m_dc_id);
        qint64 m_volume_id;
        stream >> m_volume_id;
        item.setVolumeId(m_volume_id);
        qint32 m_local_id;
        stream >> m_local_id;
        item.setLocalId(m_local_id);
        qint64 m_secret;
        stream >> m_secret;
        item.setSecret(m_secret);
    }
        break;
    }
    return stream;
}

