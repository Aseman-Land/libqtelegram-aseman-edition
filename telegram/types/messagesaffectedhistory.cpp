// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesaffectedhistory.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessagesAffectedHistory::MessagesAffectedHistory(MessagesAffectedHistoryClassType classType, InboundPkt *in) :
    m_offset(0),
    m_pts(0),
    m_ptsCount(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesAffectedHistory::MessagesAffectedHistory(InboundPkt *in) :
    m_offset(0),
    m_pts(0),
    m_ptsCount(0),
    m_classType(typeMessagesAffectedHistory)
{
    fetch(in);
}

MessagesAffectedHistory::MessagesAffectedHistory(const Null &null) :
    TelegramTypeObject(null),
    m_offset(0),
    m_pts(0),
    m_ptsCount(0),
    m_classType(typeMessagesAffectedHistory)
{
}

MessagesAffectedHistory::~MessagesAffectedHistory() {
}

void MessagesAffectedHistory::setOffset(qint32 offset) {
    m_offset = offset;
}

qint32 MessagesAffectedHistory::offset() const {
    return m_offset;
}

void MessagesAffectedHistory::setPts(qint32 pts) {
    m_pts = pts;
}

qint32 MessagesAffectedHistory::pts() const {
    return m_pts;
}

void MessagesAffectedHistory::setPtsCount(qint32 ptsCount) {
    m_ptsCount = ptsCount;
}

qint32 MessagesAffectedHistory::ptsCount() const {
    return m_ptsCount;
}

bool MessagesAffectedHistory::operator ==(const MessagesAffectedHistory &b) const {
    return m_classType == b.m_classType &&
           m_offset == b.m_offset &&
           m_pts == b.m_pts &&
           m_ptsCount == b.m_ptsCount;
}

void MessagesAffectedHistory::setClassType(MessagesAffectedHistory::MessagesAffectedHistoryClassType classType) {
    m_classType = classType;
}

MessagesAffectedHistory::MessagesAffectedHistoryClassType MessagesAffectedHistory::classType() const {
    return m_classType;
}

bool MessagesAffectedHistory::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesAffectedHistory: {
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_offset = in->fetchInt();
        m_classType = static_cast<MessagesAffectedHistoryClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesAffectedHistory::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesAffectedHistory: {
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_offset);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> MessagesAffectedHistory::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessagesAffectedHistory: {
        result["classType"] = "MessagesAffectedHistory::typeMessagesAffectedHistory";
        result["pts"] = QVariant::fromValue<qint32>(pts());
        result["ptsCount"] = QVariant::fromValue<qint32>(ptsCount());
        result["offset"] = QVariant::fromValue<qint32>(offset());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

MessagesAffectedHistory MessagesAffectedHistory::fromMap(const QMap<QString, QVariant> &map) {
    MessagesAffectedHistory result;
    if(map.value("classType").toString() == "MessagesAffectedHistory::typeMessagesAffectedHistory") {
        result.setClassType(typeMessagesAffectedHistory);
        result.setPts( map.value("pts").value<qint32>() );
        result.setPtsCount( map.value("ptsCount").value<qint32>() );
        result.setOffset( map.value("offset").value<qint32>() );
        return result;
    }
    return result;
}

QByteArray MessagesAffectedHistory::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessagesAffectedHistory &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesAffectedHistory::typeMessagesAffectedHistory:
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.offset();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessagesAffectedHistory &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesAffectedHistory::MessagesAffectedHistoryClassType>(type));
    switch(type) {
    case MessagesAffectedHistory::typeMessagesAffectedHistory: {
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_offset;
        stream >> m_offset;
        item.setOffset(m_offset);
    }
        break;
    }
    return stream;
}

