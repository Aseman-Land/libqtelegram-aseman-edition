// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelschannelparticipantsobject.h"

ChannelsChannelParticipantsObject::ChannelsChannelParticipantsObject(const ChannelsChannelParticipants &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ChannelsChannelParticipantsObject::ChannelsChannelParticipantsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ChannelsChannelParticipantsObject::~ChannelsChannelParticipantsObject() {
}

void ChannelsChannelParticipantsObject::setCount(qint32 count) {
    if(m_core.count() == count) return;
    m_core.setCount(count);
    Q_EMIT countChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelsChannelParticipantsObject::count() const {
    return m_core.count();
}

void ChannelsChannelParticipantsObject::setParticipants(const QList<ChannelParticipant> &participants) {
    if(m_core.participants() == participants) return;
    m_core.setParticipants(participants);
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

QList<ChannelParticipant> ChannelsChannelParticipantsObject::participants() const {
    return m_core.participants();
}

void ChannelsChannelParticipantsObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> ChannelsChannelParticipantsObject::users() const {
    return m_core.users();
}

ChannelsChannelParticipantsObject &ChannelsChannelParticipantsObject::operator =(const ChannelsChannelParticipants &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT countChanged();
    Q_EMIT participantsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ChannelsChannelParticipantsObject::operator ==(const ChannelsChannelParticipants &b) const {
    return m_core == b;
}

void ChannelsChannelParticipantsObject::setClassType(quint32 classType) {
    ChannelsChannelParticipants::ChannelsChannelParticipantsType result;
    switch(classType) {
    case TypeChannelsChannelParticipants:
        result = ChannelsChannelParticipants::typeChannelsChannelParticipants;
        break;
    default:
        result = ChannelsChannelParticipants::typeChannelsChannelParticipants;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ChannelsChannelParticipantsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelsChannelParticipants::typeChannelsChannelParticipants:
        result = TypeChannelsChannelParticipants;
        break;
    default:
        result = TypeChannelsChannelParticipants;
        break;
    }

    return result;
}

void ChannelsChannelParticipantsObject::setCore(const ChannelsChannelParticipants &core) {
    operator =(core);
}

ChannelsChannelParticipants ChannelsChannelParticipantsObject::core() const {
    return m_core;
}

