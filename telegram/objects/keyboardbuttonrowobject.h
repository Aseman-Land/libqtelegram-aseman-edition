// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_KEYBOARDBUTTONROW_OBJECT
#define LQTG_TYPE_KEYBOARDBUTTONROW_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/keyboardbuttonrow.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT KeyboardButtonRowObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(KeyboardButtonRowClassType)
    Q_PROPERTY(QList<KeyboardButton> buttons READ buttons WRITE setButtons NOTIFY buttonsChanged)
    Q_PROPERTY(KeyboardButtonRow core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum KeyboardButtonRowClassType {
        TypeKeyboardButtonRow
    };

    KeyboardButtonRowObject(const KeyboardButtonRow &core, QObject *parent = 0);
    KeyboardButtonRowObject(QObject *parent = 0);
    virtual ~KeyboardButtonRowObject();

    void setButtons(const QList<KeyboardButton> &buttons);
    QList<KeyboardButton> buttons() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const KeyboardButtonRow &core);
    KeyboardButtonRow core() const;

    KeyboardButtonRowObject &operator =(const KeyboardButtonRow &b);
    bool operator ==(const KeyboardButtonRow &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void buttonsChanged();

private Q_SLOTS:

private:
    KeyboardButtonRow m_core;
};

inline KeyboardButtonRowObject::KeyboardButtonRowObject(const KeyboardButtonRow &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline KeyboardButtonRowObject::KeyboardButtonRowObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline KeyboardButtonRowObject::~KeyboardButtonRowObject() {
}

inline void KeyboardButtonRowObject::setButtons(const QList<KeyboardButton> &buttons) {
    if(m_core.buttons() == buttons) return;
    m_core.setButtons(buttons);
    Q_EMIT buttonsChanged();
    Q_EMIT coreChanged();
}

inline QList<KeyboardButton> KeyboardButtonRowObject::buttons() const {
    return m_core.buttons();
}

inline KeyboardButtonRowObject &KeyboardButtonRowObject::operator =(const KeyboardButtonRow &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT buttonsChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool KeyboardButtonRowObject::operator ==(const KeyboardButtonRow &b) const {
    return m_core == b;
}

inline void KeyboardButtonRowObject::setClassType(quint32 classType) {
    KeyboardButtonRow::KeyboardButtonRowClassType result;
    switch(classType) {
    case TypeKeyboardButtonRow:
        result = KeyboardButtonRow::typeKeyboardButtonRow;
        break;
    default:
        result = KeyboardButtonRow::typeKeyboardButtonRow;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 KeyboardButtonRowObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case KeyboardButtonRow::typeKeyboardButtonRow:
        result = TypeKeyboardButtonRow;
        break;
    default:
        result = TypeKeyboardButtonRow;
        break;
    }

    return result;
}

inline void KeyboardButtonRowObject::setCore(const KeyboardButtonRow &core) {
    operator =(core);
}

inline KeyboardButtonRow KeyboardButtonRowObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_KEYBOARDBUTTONROW_OBJECT
