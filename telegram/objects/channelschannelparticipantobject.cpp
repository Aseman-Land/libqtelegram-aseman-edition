// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelschannelparticipantobject.h"

ChannelsChannelParticipantObject::ChannelsChannelParticipantObject(const ChannelsChannelParticipant &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_participant(0),
    m_core(core)
{
    m_participant = new ChannelParticipantObject(m_core.participant(), this);
    connect(m_participant.data(), &ChannelParticipantObject::coreChanged, this, &ChannelsChannelParticipantObject::coreParticipantChanged);
}

ChannelsChannelParticipantObject::ChannelsChannelParticipantObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_participant(0),
    m_core()
{
    m_participant = new ChannelParticipantObject(m_core.participant(), this);
    connect(m_participant.data(), &ChannelParticipantObject::coreChanged, this, &ChannelsChannelParticipantObject::coreParticipantChanged);
}

ChannelsChannelParticipantObject::~ChannelsChannelParticipantObject() {
}

void ChannelsChannelParticipantObject::setParticipant(ChannelParticipantObject* participant) {
    if(m_participant == participant) return;
    if(m_participant) delete m_participant;
    m_participant = participant;
    if(m_participant) {
        m_participant->setParent(this);
        m_core.setParticipant(m_participant->core());
        connect(m_participant.data(), &ChannelParticipantObject::coreChanged, this, &ChannelsChannelParticipantObject::coreParticipantChanged);
    }
    Q_EMIT participantChanged();
    Q_EMIT coreChanged();
}

ChannelParticipantObject*  ChannelsChannelParticipantObject::participant() const {
    return m_participant;
}

void ChannelsChannelParticipantObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> ChannelsChannelParticipantObject::users() const {
    return m_core.users();
}

ChannelsChannelParticipantObject &ChannelsChannelParticipantObject::operator =(const ChannelsChannelParticipant &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_participant->setCore(b.participant());

    Q_EMIT participantChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ChannelsChannelParticipantObject::operator ==(const ChannelsChannelParticipant &b) const {
    return m_core == b;
}

void ChannelsChannelParticipantObject::setClassType(quint32 classType) {
    ChannelsChannelParticipant::ChannelsChannelParticipantType result;
    switch(classType) {
    case TypeChannelsChannelParticipant:
        result = ChannelsChannelParticipant::typeChannelsChannelParticipant;
        break;
    default:
        result = ChannelsChannelParticipant::typeChannelsChannelParticipant;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ChannelsChannelParticipantObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelsChannelParticipant::typeChannelsChannelParticipant:
        result = TypeChannelsChannelParticipant;
        break;
    default:
        result = TypeChannelsChannelParticipant;
        break;
    }

    return result;
}

void ChannelsChannelParticipantObject::setCore(const ChannelsChannelParticipant &core) {
    operator =(core);
}

ChannelsChannelParticipant ChannelsChannelParticipantObject::core() const {
    return m_core;
}

void ChannelsChannelParticipantObject::coreParticipantChanged() {
    if(m_core.participant() == m_participant->core()) return;
    m_core.setParticipant(m_participant->core());
    Q_EMIT participantChanged();
    Q_EMIT coreChanged();
}

