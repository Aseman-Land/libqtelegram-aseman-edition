// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesdhconfigobject.h"

MessagesDhConfigObject::MessagesDhConfigObject(const MessagesDhConfig &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesDhConfigObject::MessagesDhConfigObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesDhConfigObject::~MessagesDhConfigObject() {
}

void MessagesDhConfigObject::setG(qint32 g) {
    if(m_core.g() == g) return;
    m_core.setG(g);
    Q_EMIT gChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesDhConfigObject::g() const {
    return m_core.g();
}

void MessagesDhConfigObject::setP(const QByteArray &p) {
    if(m_core.p() == p) return;
    m_core.setP(p);
    Q_EMIT pChanged();
    Q_EMIT coreChanged();
}

QByteArray MessagesDhConfigObject::p() const {
    return m_core.p();
}

void MessagesDhConfigObject::setRandom(const QByteArray &random) {
    if(m_core.random() == random) return;
    m_core.setRandom(random);
    Q_EMIT randomChanged();
    Q_EMIT coreChanged();
}

QByteArray MessagesDhConfigObject::random() const {
    return m_core.random();
}

void MessagesDhConfigObject::setVersion(qint32 version) {
    if(m_core.version() == version) return;
    m_core.setVersion(version);
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesDhConfigObject::version() const {
    return m_core.version();
}

MessagesDhConfigObject &MessagesDhConfigObject::operator =(const MessagesDhConfig &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT gChanged();
    Q_EMIT pChanged();
    Q_EMIT randomChanged();
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesDhConfigObject::operator ==(const MessagesDhConfig &b) const {
    return m_core == b;
}

void MessagesDhConfigObject::setClassType(quint32 classType) {
    MessagesDhConfig::MessagesDhConfigClassType result;
    switch(classType) {
    case TypeMessagesDhConfigNotModified:
        result = MessagesDhConfig::typeMessagesDhConfigNotModified;
        break;
    case TypeMessagesDhConfig:
        result = MessagesDhConfig::typeMessagesDhConfig;
        break;
    default:
        result = MessagesDhConfig::typeMessagesDhConfigNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesDhConfigObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesDhConfig::typeMessagesDhConfigNotModified:
        result = TypeMessagesDhConfigNotModified;
        break;
    case MessagesDhConfig::typeMessagesDhConfig:
        result = TypeMessagesDhConfig;
        break;
    default:
        result = TypeMessagesDhConfigNotModified;
        break;
    }

    return result;
}

void MessagesDhConfigObject::setCore(const MessagesDhConfig &core) {
    operator =(core);
}

MessagesDhConfig MessagesDhConfigObject::core() const {
    return m_core;
}

