// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESALLSTICKERS
#define LQTG_TYPE_MESSAGESALLSTICKERS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QtGlobal>
#include <QList>
#include "stickerset.h"

class LIBQTELEGRAMSHARED_EXPORT MessagesAllStickers : public TelegramTypeObject
{
public:
    enum MessagesAllStickersClassType {
        typeMessagesAllStickersNotModified = 0xe86602c3,
        typeMessagesAllStickers = 0xedfd405f
    };

    MessagesAllStickers(MessagesAllStickersClassType classType = typeMessagesAllStickersNotModified, InboundPkt *in = 0);
    MessagesAllStickers(InboundPkt *in);
    MessagesAllStickers(const Null&);
    virtual ~MessagesAllStickers();

    void setHash(qint32 hash);
    qint32 hash() const;

    void setSets(const QList<StickerSet> &sets);
    QList<StickerSet> sets() const;

    void setClassType(MessagesAllStickersClassType classType);
    MessagesAllStickersClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    bool operator ==(const MessagesAllStickers &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_hash;
    QList<StickerSet> m_sets;
    MessagesAllStickersClassType m_classType;
};

Q_DECLARE_METATYPE(MessagesAllStickers)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const MessagesAllStickers &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, MessagesAllStickers &item);

#endif // LQTG_TYPE_MESSAGESALLSTICKERS
