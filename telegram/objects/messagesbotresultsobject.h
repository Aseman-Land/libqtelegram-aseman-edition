// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESBOTRESULTS_OBJECT
#define LQTG_TYPE_MESSAGESBOTRESULTS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/messagesbotresults.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT MessagesBotResultsObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(MessagesBotResultsType)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(bool gallery READ gallery WRITE setGallery NOTIFY galleryChanged)
    Q_PROPERTY(QString nextOffset READ nextOffset WRITE setNextOffset NOTIFY nextOffsetChanged)
    Q_PROPERTY(qint64 queryId READ queryId WRITE setQueryId NOTIFY queryIdChanged)
    Q_PROPERTY(QList<BotInlineResult> results READ results WRITE setResults NOTIFY resultsChanged)
    Q_PROPERTY(MessagesBotResults core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum MessagesBotResultsType {
        TypeMessagesBotResults
    };

    MessagesBotResultsObject(const MessagesBotResults &core, QObject *parent = 0);
    MessagesBotResultsObject(QObject *parent = 0);
    virtual ~MessagesBotResultsObject();

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setGallery(bool gallery);
    bool gallery() const;

    void setNextOffset(const QString &nextOffset);
    QString nextOffset() const;

    void setQueryId(qint64 queryId);
    qint64 queryId() const;

    void setResults(const QList<BotInlineResult> &results);
    QList<BotInlineResult> results() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const MessagesBotResults &core);
    MessagesBotResults core() const;

    MessagesBotResultsObject &operator =(const MessagesBotResults &b);
    bool operator ==(const MessagesBotResults &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void flagsChanged();
    void galleryChanged();
    void nextOffsetChanged();
    void queryIdChanged();
    void resultsChanged();

private Q_SLOTS:

private:
    MessagesBotResults m_core;
};

#endif // LQTG_TYPE_MESSAGESBOTRESULTS_OBJECT
