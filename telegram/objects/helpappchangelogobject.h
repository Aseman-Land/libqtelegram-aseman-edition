// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_HELPAPPCHANGELOG_OBJECT
#define LQTG_TYPE_HELPAPPCHANGELOG_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/helpappchangelog.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT HelpAppChangelogObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(HelpAppChangelogClassType)
    Q_PROPERTY(QString text READ text WRITE setText NOTIFY textChanged)
    Q_PROPERTY(HelpAppChangelog core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum HelpAppChangelogClassType {
        TypeHelpAppChangelogEmpty,
        TypeHelpAppChangelog
    };

    HelpAppChangelogObject(const HelpAppChangelog &core, QObject *parent = 0);
    HelpAppChangelogObject(QObject *parent = 0);
    virtual ~HelpAppChangelogObject();

    void setText(const QString &text);
    QString text() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const HelpAppChangelog &core);
    HelpAppChangelog core() const;

    HelpAppChangelogObject &operator =(const HelpAppChangelog &b);
    bool operator ==(const HelpAppChangelog &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void textChanged();

private Q_SLOTS:

private:
    HelpAppChangelog m_core;
};

inline HelpAppChangelogObject::HelpAppChangelogObject(const HelpAppChangelog &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline HelpAppChangelogObject::HelpAppChangelogObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline HelpAppChangelogObject::~HelpAppChangelogObject() {
}

inline void HelpAppChangelogObject::setText(const QString &text) {
    if(m_core.text() == text) return;
    m_core.setText(text);
    Q_EMIT textChanged();
    Q_EMIT coreChanged();
}

inline QString HelpAppChangelogObject::text() const {
    return m_core.text();
}

inline HelpAppChangelogObject &HelpAppChangelogObject::operator =(const HelpAppChangelog &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT textChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool HelpAppChangelogObject::operator ==(const HelpAppChangelog &b) const {
    return m_core == b;
}

inline void HelpAppChangelogObject::setClassType(quint32 classType) {
    HelpAppChangelog::HelpAppChangelogClassType result;
    switch(classType) {
    case TypeHelpAppChangelogEmpty:
        result = HelpAppChangelog::typeHelpAppChangelogEmpty;
        break;
    case TypeHelpAppChangelog:
        result = HelpAppChangelog::typeHelpAppChangelog;
        break;
    default:
        result = HelpAppChangelog::typeHelpAppChangelogEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 HelpAppChangelogObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case HelpAppChangelog::typeHelpAppChangelogEmpty:
        result = TypeHelpAppChangelogEmpty;
        break;
    case HelpAppChangelog::typeHelpAppChangelog:
        result = TypeHelpAppChangelog;
        break;
    default:
        result = TypeHelpAppChangelogEmpty;
        break;
    }

    return result;
}

inline void HelpAppChangelogObject::setCore(const HelpAppChangelog &core) {
    operator =(core);
}

inline HelpAppChangelog HelpAppChangelogObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_HELPAPPCHANGELOG_OBJECT
