// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authsentcodetypeobject.h"

AuthSentCodeTypeObject::AuthSentCodeTypeObject(const AuthSentCodeType &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

AuthSentCodeTypeObject::AuthSentCodeTypeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

AuthSentCodeTypeObject::~AuthSentCodeTypeObject() {
}

void AuthSentCodeTypeObject::setLength(qint32 length) {
    if(m_core.length() == length) return;
    m_core.setLength(length);
    Q_EMIT lengthChanged();
    Q_EMIT coreChanged();
}

qint32 AuthSentCodeTypeObject::length() const {
    return m_core.length();
}

void AuthSentCodeTypeObject::setPattern(const QString &pattern) {
    if(m_core.pattern() == pattern) return;
    m_core.setPattern(pattern);
    Q_EMIT patternChanged();
    Q_EMIT coreChanged();
}

QString AuthSentCodeTypeObject::pattern() const {
    return m_core.pattern();
}

AuthSentCodeTypeObject &AuthSentCodeTypeObject::operator =(const AuthSentCodeType &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT lengthChanged();
    Q_EMIT patternChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool AuthSentCodeTypeObject::operator ==(const AuthSentCodeType &b) const {
    return m_core == b;
}

void AuthSentCodeTypeObject::setClassType(quint32 classType) {
    AuthSentCodeType::AuthSentCodeTypeClassType result;
    switch(classType) {
    case TypeAuthSentCodeTypeApp:
        result = AuthSentCodeType::typeAuthSentCodeTypeApp;
        break;
    case TypeAuthSentCodeTypeSms:
        result = AuthSentCodeType::typeAuthSentCodeTypeSms;
        break;
    case TypeAuthSentCodeTypeCall:
        result = AuthSentCodeType::typeAuthSentCodeTypeCall;
        break;
    case TypeAuthSentCodeTypeFlashCall:
        result = AuthSentCodeType::typeAuthSentCodeTypeFlashCall;
        break;
    default:
        result = AuthSentCodeType::typeAuthSentCodeTypeApp;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AuthSentCodeTypeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthSentCodeType::typeAuthSentCodeTypeApp:
        result = TypeAuthSentCodeTypeApp;
        break;
    case AuthSentCodeType::typeAuthSentCodeTypeSms:
        result = TypeAuthSentCodeTypeSms;
        break;
    case AuthSentCodeType::typeAuthSentCodeTypeCall:
        result = TypeAuthSentCodeTypeCall;
        break;
    case AuthSentCodeType::typeAuthSentCodeTypeFlashCall:
        result = TypeAuthSentCodeTypeFlashCall;
        break;
    default:
        result = TypeAuthSentCodeTypeApp;
        break;
    }

    return result;
}

void AuthSentCodeTypeObject::setCore(const AuthSentCodeType &core) {
    operator =(core);
}

AuthSentCodeType AuthSentCodeTypeObject::core() const {
    return m_core;
}

