// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputstickerset.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputStickerSet::InputStickerSet(InputStickerSetClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_id(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputStickerSet::InputStickerSet(InboundPkt *in) :
    m_accessHash(0),
    m_id(0),
    m_classType(typeInputStickerSetEmpty)
{
    fetch(in);
}

InputStickerSet::InputStickerSet(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_id(0),
    m_classType(typeInputStickerSetEmpty)
{
}

InputStickerSet::~InputStickerSet() {
}

void InputStickerSet::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 InputStickerSet::accessHash() const {
    return m_accessHash;
}

void InputStickerSet::setId(qint64 id) {
    m_id = id;
}

qint64 InputStickerSet::id() const {
    return m_id;
}

void InputStickerSet::setShortName(const QString &shortName) {
    m_shortName = shortName;
}

QString InputStickerSet::shortName() const {
    return m_shortName;
}

bool InputStickerSet::operator ==(const InputStickerSet &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_id == b.m_id &&
           m_shortName == b.m_shortName;
}

void InputStickerSet::setClassType(InputStickerSet::InputStickerSetClassType classType) {
    m_classType = classType;
}

InputStickerSet::InputStickerSetClassType InputStickerSet::classType() const {
    return m_classType;
}

bool InputStickerSet::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputStickerSetEmpty: {
        m_classType = static_cast<InputStickerSetClassType>(x);
        return true;
    }
        break;
    
    case typeInputStickerSetID: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_classType = static_cast<InputStickerSetClassType>(x);
        return true;
    }
        break;
    
    case typeInputStickerSetShortName: {
        m_shortName = in->fetchQString();
        m_classType = static_cast<InputStickerSetClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputStickerSet::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputStickerSetEmpty: {
        return true;
    }
        break;
    
    case typeInputStickerSetID: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        return true;
    }
        break;
    
    case typeInputStickerSetShortName: {
        out->appendQString(m_shortName);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> InputStickerSet::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputStickerSetEmpty: {
        result["classType"] = "InputStickerSet::typeInputStickerSetEmpty";
        return result;
    }
        break;
    
    case typeInputStickerSetID: {
        result["classType"] = "InputStickerSet::typeInputStickerSetID";
        result["id"] = QVariant::fromValue<qint64>(id());
        result["accessHash"] = QVariant::fromValue<qint64>(accessHash());
        return result;
    }
        break;
    
    case typeInputStickerSetShortName: {
        result["classType"] = "InputStickerSet::typeInputStickerSetShortName";
        result["shortName"] = QVariant::fromValue<QString>(shortName());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

InputStickerSet InputStickerSet::fromMap(const QMap<QString, QVariant> &map) {
    InputStickerSet result;
    if(map.value("classType").toString() == "InputStickerSet::typeInputStickerSetEmpty") {
        result.setClassType(typeInputStickerSetEmpty);
        return result;
    }
    if(map.value("classType").toString() == "InputStickerSet::typeInputStickerSetID") {
        result.setClassType(typeInputStickerSetID);
        result.setId( map.value("id").value<qint64>() );
        result.setAccessHash( map.value("accessHash").value<qint64>() );
        return result;
    }
    if(map.value("classType").toString() == "InputStickerSet::typeInputStickerSetShortName") {
        result.setClassType(typeInputStickerSetShortName);
        result.setShortName( map.value("shortName").value<QString>() );
        return result;
    }
    return result;
}

QByteArray InputStickerSet::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputStickerSet &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputStickerSet::typeInputStickerSetEmpty:
        
        break;
    case InputStickerSet::typeInputStickerSetID:
        stream << item.id();
        stream << item.accessHash();
        break;
    case InputStickerSet::typeInputStickerSetShortName:
        stream << item.shortName();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputStickerSet &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputStickerSet::InputStickerSetClassType>(type));
    switch(type) {
    case InputStickerSet::typeInputStickerSetEmpty: {
        
    }
        break;
    case InputStickerSet::typeInputStickerSetID: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
    }
        break;
    case InputStickerSet::typeInputStickerSetShortName: {
        QString m_short_name;
        stream >> m_short_name;
        item.setShortName(m_short_name);
    }
        break;
    }
    return stream;
}

