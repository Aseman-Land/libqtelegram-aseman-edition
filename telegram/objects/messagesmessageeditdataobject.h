// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESMESSAGEEDITDATA_OBJECT
#define LQTG_TYPE_MESSAGESMESSAGEEDITDATA_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/messagesmessageeditdata.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT MessagesMessageEditDataObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(MessagesMessageEditDataClassType)
    Q_PROPERTY(bool caption READ caption WRITE setCaption NOTIFY captionChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(MessagesMessageEditData core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum MessagesMessageEditDataClassType {
        TypeMessagesMessageEditData
    };

    MessagesMessageEditDataObject(const MessagesMessageEditData &core, QObject *parent = 0);
    MessagesMessageEditDataObject(QObject *parent = 0);
    virtual ~MessagesMessageEditDataObject();

    void setCaption(bool caption);
    bool caption() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const MessagesMessageEditData &core);
    MessagesMessageEditData core() const;

    MessagesMessageEditDataObject &operator =(const MessagesMessageEditData &b);
    bool operator ==(const MessagesMessageEditData &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void captionChanged();
    void flagsChanged();

private Q_SLOTS:

private:
    MessagesMessageEditData m_core;
};

inline MessagesMessageEditDataObject::MessagesMessageEditDataObject(const MessagesMessageEditData &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline MessagesMessageEditDataObject::MessagesMessageEditDataObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline MessagesMessageEditDataObject::~MessagesMessageEditDataObject() {
}

inline void MessagesMessageEditDataObject::setCaption(bool caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

inline bool MessagesMessageEditDataObject::caption() const {
    return m_core.caption();
}

inline void MessagesMessageEditDataObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessagesMessageEditDataObject::flags() const {
    return m_core.flags();
}

inline MessagesMessageEditDataObject &MessagesMessageEditDataObject::operator =(const MessagesMessageEditData &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT captionChanged();
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool MessagesMessageEditDataObject::operator ==(const MessagesMessageEditData &b) const {
    return m_core == b;
}

inline void MessagesMessageEditDataObject::setClassType(quint32 classType) {
    MessagesMessageEditData::MessagesMessageEditDataClassType result;
    switch(classType) {
    case TypeMessagesMessageEditData:
        result = MessagesMessageEditData::typeMessagesMessageEditData;
        break;
    default:
        result = MessagesMessageEditData::typeMessagesMessageEditData;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 MessagesMessageEditDataObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesMessageEditData::typeMessagesMessageEditData:
        result = TypeMessagesMessageEditData;
        break;
    default:
        result = TypeMessagesMessageEditData;
        break;
    }

    return result;
}

inline void MessagesMessageEditDataObject::setCore(const MessagesMessageEditData &core) {
    operator =(core);
}

inline MessagesMessageEditData MessagesMessageEditDataObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_MESSAGESMESSAGEEDITDATA_OBJECT
