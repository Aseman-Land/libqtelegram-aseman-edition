// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ACCOUNTPASSWORDSETTINGS
#define LQTG_TYPE_ACCOUNTPASSWORDSETTINGS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QString>

class LIBQTELEGRAMSHARED_EXPORT AccountPasswordSettings : public TelegramTypeObject
{
public:
    enum AccountPasswordSettingsClassType {
        typeAccountPasswordSettings = 0xb7b72ab3
    };

    AccountPasswordSettings(AccountPasswordSettingsClassType classType = typeAccountPasswordSettings, InboundPkt *in = 0);
    AccountPasswordSettings(InboundPkt *in);
    AccountPasswordSettings(const Null&);
    virtual ~AccountPasswordSettings();

    void setEmail(const QString &email);
    QString email() const;

    void setClassType(AccountPasswordSettingsClassType classType);
    AccountPasswordSettingsClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static AccountPasswordSettings fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const AccountPasswordSettings &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_email;
    AccountPasswordSettingsClassType m_classType;
};

Q_DECLARE_METATYPE(AccountPasswordSettings)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const AccountPasswordSettings &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, AccountPasswordSettings &item);

inline AccountPasswordSettings::AccountPasswordSettings(AccountPasswordSettingsClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

inline AccountPasswordSettings::AccountPasswordSettings(InboundPkt *in) :
    m_classType(typeAccountPasswordSettings)
{
    fetch(in);
}

inline AccountPasswordSettings::AccountPasswordSettings(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeAccountPasswordSettings)
{
}

inline AccountPasswordSettings::~AccountPasswordSettings() {
}

inline void AccountPasswordSettings::setEmail(const QString &email) {
    m_email = email;
}

inline QString AccountPasswordSettings::email() const {
    return m_email;
}

inline bool AccountPasswordSettings::operator ==(const AccountPasswordSettings &b) const {
    return m_classType == b.m_classType &&
           m_email == b.m_email;
}

inline void AccountPasswordSettings::setClassType(AccountPasswordSettings::AccountPasswordSettingsClassType classType) {
    m_classType = classType;
}

inline AccountPasswordSettings::AccountPasswordSettingsClassType AccountPasswordSettings::classType() const {
    return m_classType;
}

inline bool AccountPasswordSettings::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAccountPasswordSettings: {
        m_email = in->fetchQString();
        m_classType = static_cast<AccountPasswordSettingsClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool AccountPasswordSettings::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAccountPasswordSettings: {
        out->appendQString(m_email);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> AccountPasswordSettings::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeAccountPasswordSettings: {
        result["classType"] = "AccountPasswordSettings::typeAccountPasswordSettings";
        result["email"] = QVariant::fromValue<QString>(email());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline AccountPasswordSettings AccountPasswordSettings::fromMap(const QMap<QString, QVariant> &map) {
    AccountPasswordSettings result;
    if(map.value("classType").toString() == "AccountPasswordSettings::typeAccountPasswordSettings") {
        result.setClassType(typeAccountPasswordSettings);
        result.setEmail( map.value("email").value<QString>() );
        return result;
    }
    return result;
}

inline QByteArray AccountPasswordSettings::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const AccountPasswordSettings &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AccountPasswordSettings::typeAccountPasswordSettings:
        stream << item.email();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, AccountPasswordSettings &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AccountPasswordSettings::AccountPasswordSettingsClassType>(type));
    switch(type) {
    case AccountPasswordSettings::typeAccountPasswordSettings: {
        QString m_email;
        stream >> m_email;
        item.setEmail(m_email);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_ACCOUNTPASSWORDSETTINGS
