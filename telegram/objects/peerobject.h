// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_PEER_OBJECT
#define LQTG_TYPE_PEER_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/peer.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT PeerObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(PeerClassType)
    Q_PROPERTY(qint32 channelId READ channelId WRITE setChannelId NOTIFY channelIdChanged)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(Peer core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum PeerClassType {
        TypePeerUser,
        TypePeerChat,
        TypePeerChannel
    };

    PeerObject(const Peer &core, QObject *parent = 0);
    PeerObject(QObject *parent = 0);
    virtual ~PeerObject();

    void setChannelId(qint32 channelId);
    qint32 channelId() const;

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const Peer &core);
    Peer core() const;

    PeerObject &operator =(const Peer &b);
    bool operator ==(const Peer &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void channelIdChanged();
    void chatIdChanged();
    void userIdChanged();

private Q_SLOTS:

private:
    Peer m_core;
};

inline PeerObject::PeerObject(const Peer &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline PeerObject::PeerObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline PeerObject::~PeerObject() {
}

inline void PeerObject::setChannelId(qint32 channelId) {
    if(m_core.channelId() == channelId) return;
    m_core.setChannelId(channelId);
    Q_EMIT channelIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 PeerObject::channelId() const {
    return m_core.channelId();
}

inline void PeerObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 PeerObject::chatId() const {
    return m_core.chatId();
}

inline void PeerObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 PeerObject::userId() const {
    return m_core.userId();
}

inline PeerObject &PeerObject::operator =(const Peer &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT channelIdChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool PeerObject::operator ==(const Peer &b) const {
    return m_core == b;
}

inline void PeerObject::setClassType(quint32 classType) {
    Peer::PeerClassType result;
    switch(classType) {
    case TypePeerUser:
        result = Peer::typePeerUser;
        break;
    case TypePeerChat:
        result = Peer::typePeerChat;
        break;
    case TypePeerChannel:
        result = Peer::typePeerChannel;
        break;
    default:
        result = Peer::typePeerUser;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 PeerObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Peer::typePeerUser:
        result = TypePeerUser;
        break;
    case Peer::typePeerChat:
        result = TypePeerChat;
        break;
    case Peer::typePeerChannel:
        result = TypePeerChannel;
        break;
    default:
        result = TypePeerUser;
        break;
    }

    return result;
}

inline void PeerObject::setCore(const Peer &core) {
    operator =(core);
}

inline Peer PeerObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_PEER_OBJECT
