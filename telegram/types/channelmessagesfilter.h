// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHANNELMESSAGESFILTER
#define LQTG_TYPE_CHANNELMESSAGESFILTER

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QtGlobal>
#include <QList>
#include "messagerange.h"

class LIBQTELEGRAMSHARED_EXPORT ChannelMessagesFilter : public TelegramTypeObject
{
public:
    enum ChannelMessagesFilterType {
        typeChannelMessagesFilterEmpty = 0x94d42ee7,
        typeChannelMessagesFilter = 0xcd77d957,
        typeChannelMessagesFilterCollapsed = 0xfa01232e
    };

    ChannelMessagesFilter(ChannelMessagesFilterType classType = typeChannelMessagesFilterEmpty, InboundPkt *in = 0);
    ChannelMessagesFilter(InboundPkt *in);
    ChannelMessagesFilter(const Null&);
    virtual ~ChannelMessagesFilter();

    void setExcludeNewMessages(bool excludeNewMessages);
    bool excludeNewMessages() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setImportantOnly(bool importantOnly);
    bool importantOnly() const;

    void setRanges(const QList<MessageRange> &ranges);
    QList<MessageRange> ranges() const;

    void setClassType(ChannelMessagesFilterType classType);
    ChannelMessagesFilterType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    bool operator ==(const ChannelMessagesFilter &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

private:
    qint32 m_flags;
    QList<MessageRange> m_ranges;
    ChannelMessagesFilterType m_classType;
};

Q_DECLARE_METATYPE(ChannelMessagesFilter)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChannelMessagesFilter &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChannelMessagesFilter &item);

#endif // LQTG_TYPE_CHANNELMESSAGESFILTER
