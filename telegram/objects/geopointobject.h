// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_GEOPOINT_OBJECT
#define LQTG_TYPE_GEOPOINT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/geopoint.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT GeoPointObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(GeoPointClassType)
    Q_PROPERTY(qreal lat READ lat WRITE setLat NOTIFY latChanged)
    Q_PROPERTY(qreal longValue READ longValue WRITE setLongValue NOTIFY longValueChanged)
    Q_PROPERTY(GeoPoint core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum GeoPointClassType {
        TypeGeoPointEmpty,
        TypeGeoPoint
    };

    GeoPointObject(const GeoPoint &core, QObject *parent = 0);
    GeoPointObject(QObject *parent = 0);
    virtual ~GeoPointObject();

    void setLat(qreal lat);
    qreal lat() const;

    void setLongValue(qreal longValue);
    qreal longValue() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const GeoPoint &core);
    GeoPoint core() const;

    GeoPointObject &operator =(const GeoPoint &b);
    bool operator ==(const GeoPoint &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void latChanged();
    void longValueChanged();

private Q_SLOTS:

private:
    GeoPoint m_core;
};

inline GeoPointObject::GeoPointObject(const GeoPoint &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline GeoPointObject::GeoPointObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline GeoPointObject::~GeoPointObject() {
}

inline void GeoPointObject::setLat(qreal lat) {
    if(m_core.lat() == lat) return;
    m_core.setLat(lat);
    Q_EMIT latChanged();
    Q_EMIT coreChanged();
}

inline qreal GeoPointObject::lat() const {
    return m_core.lat();
}

inline void GeoPointObject::setLongValue(qreal longValue) {
    if(m_core.longValue() == longValue) return;
    m_core.setLongValue(longValue);
    Q_EMIT longValueChanged();
    Q_EMIT coreChanged();
}

inline qreal GeoPointObject::longValue() const {
    return m_core.longValue();
}

inline GeoPointObject &GeoPointObject::operator =(const GeoPoint &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT latChanged();
    Q_EMIT longValueChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool GeoPointObject::operator ==(const GeoPoint &b) const {
    return m_core == b;
}

inline void GeoPointObject::setClassType(quint32 classType) {
    GeoPoint::GeoPointClassType result;
    switch(classType) {
    case TypeGeoPointEmpty:
        result = GeoPoint::typeGeoPointEmpty;
        break;
    case TypeGeoPoint:
        result = GeoPoint::typeGeoPoint;
        break;
    default:
        result = GeoPoint::typeGeoPointEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 GeoPointObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case GeoPoint::typeGeoPointEmpty:
        result = TypeGeoPointEmpty;
        break;
    case GeoPoint::typeGeoPoint:
        result = TypeGeoPoint;
        break;
    default:
        result = TypeGeoPointEmpty;
        break;
    }

    return result;
}

inline void GeoPointObject::setCore(const GeoPoint &core) {
    operator =(core);
}

inline GeoPoint GeoPointObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_GEOPOINT_OBJECT
