// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesstickersobject.h"

MessagesStickersObject::MessagesStickersObject(const MessagesStickers &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesStickersObject::MessagesStickersObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesStickersObject::~MessagesStickersObject() {
}

void MessagesStickersObject::setHash(const QString &hash) {
    if(m_core.hash() == hash) return;
    m_core.setHash(hash);
    Q_EMIT hashChanged();
    Q_EMIT coreChanged();
}

QString MessagesStickersObject::hash() const {
    return m_core.hash();
}

void MessagesStickersObject::setStickers(const QList<Document> &stickers) {
    if(m_core.stickers() == stickers) return;
    m_core.setStickers(stickers);
    Q_EMIT stickersChanged();
    Q_EMIT coreChanged();
}

QList<Document> MessagesStickersObject::stickers() const {
    return m_core.stickers();
}

MessagesStickersObject &MessagesStickersObject::operator =(const MessagesStickers &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT hashChanged();
    Q_EMIT stickersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesStickersObject::operator ==(const MessagesStickers &b) const {
    return m_core == b;
}

void MessagesStickersObject::setClassType(quint32 classType) {
    MessagesStickers::MessagesStickersType result;
    switch(classType) {
    case TypeMessagesStickersNotModified:
        result = MessagesStickers::typeMessagesStickersNotModified;
        break;
    case TypeMessagesStickers:
        result = MessagesStickers::typeMessagesStickers;
        break;
    default:
        result = MessagesStickers::typeMessagesStickersNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesStickersObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesStickers::typeMessagesStickersNotModified:
        result = TypeMessagesStickersNotModified;
        break;
    case MessagesStickers::typeMessagesStickers:
        result = TypeMessagesStickers;
        break;
    default:
        result = TypeMessagesStickersNotModified;
        break;
    }

    return result;
}

void MessagesStickersObject::setCore(const MessagesStickers &core) {
    operator =(core);
}

MessagesStickers MessagesStickersObject::core() const {
    return m_core;
}

