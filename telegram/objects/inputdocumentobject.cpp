// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputdocumentobject.h"

InputDocumentObject::InputDocumentObject(const InputDocument &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputDocumentObject::InputDocumentObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputDocumentObject::~InputDocumentObject() {
}

void InputDocumentObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 InputDocumentObject::accessHash() const {
    return m_core.accessHash();
}

void InputDocumentObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 InputDocumentObject::id() const {
    return m_core.id();
}

InputDocumentObject &InputDocumentObject::operator =(const InputDocument &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputDocumentObject::operator ==(const InputDocument &b) const {
    return m_core == b;
}

void InputDocumentObject::setClassType(quint32 classType) {
    InputDocument::InputDocumentType result;
    switch(classType) {
    case TypeInputDocumentEmpty:
        result = InputDocument::typeInputDocumentEmpty;
        break;
    case TypeInputDocument:
        result = InputDocument::typeInputDocument;
        break;
    default:
        result = InputDocument::typeInputDocumentEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputDocumentObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputDocument::typeInputDocumentEmpty:
        result = TypeInputDocumentEmpty;
        break;
    case InputDocument::typeInputDocument:
        result = TypeInputDocument;
        break;
    default:
        result = TypeInputDocumentEmpty;
        break;
    }

    return result;
}

void InputDocumentObject::setCore(const InputDocument &core) {
    operator =(core);
}

InputDocument InputDocumentObject::core() const {
    return m_core;
}

