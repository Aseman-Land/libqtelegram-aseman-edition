// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSTOPPEERS_OBJECT
#define LQTG_TYPE_CONTACTSTOPPEERS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactstoppeers.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ContactsTopPeersObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactsTopPeersClassType)
    Q_PROPERTY(QList<TopPeerCategoryPeers> categories READ categories WRITE setCategories NOTIFY categoriesChanged)
    Q_PROPERTY(QList<Chat> chats READ chats WRITE setChats NOTIFY chatsChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(ContactsTopPeers core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactsTopPeersClassType {
        TypeContactsTopPeersNotModified,
        TypeContactsTopPeers
    };

    ContactsTopPeersObject(const ContactsTopPeers &core, QObject *parent = 0);
    ContactsTopPeersObject(QObject *parent = 0);
    virtual ~ContactsTopPeersObject();

    void setCategories(const QList<TopPeerCategoryPeers> &categories);
    QList<TopPeerCategoryPeers> categories() const;

    void setChats(const QList<Chat> &chats);
    QList<Chat> chats() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactsTopPeers &core);
    ContactsTopPeers core() const;

    ContactsTopPeersObject &operator =(const ContactsTopPeers &b);
    bool operator ==(const ContactsTopPeers &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void categoriesChanged();
    void chatsChanged();
    void usersChanged();

private Q_SLOTS:

private:
    ContactsTopPeers m_core;
};

inline ContactsTopPeersObject::ContactsTopPeersObject(const ContactsTopPeers &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ContactsTopPeersObject::ContactsTopPeersObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ContactsTopPeersObject::~ContactsTopPeersObject() {
}

inline void ContactsTopPeersObject::setCategories(const QList<TopPeerCategoryPeers> &categories) {
    if(m_core.categories() == categories) return;
    m_core.setCategories(categories);
    Q_EMIT categoriesChanged();
    Q_EMIT coreChanged();
}

inline QList<TopPeerCategoryPeers> ContactsTopPeersObject::categories() const {
    return m_core.categories();
}

inline void ContactsTopPeersObject::setChats(const QList<Chat> &chats) {
    if(m_core.chats() == chats) return;
    m_core.setChats(chats);
    Q_EMIT chatsChanged();
    Q_EMIT coreChanged();
}

inline QList<Chat> ContactsTopPeersObject::chats() const {
    return m_core.chats();
}

inline void ContactsTopPeersObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> ContactsTopPeersObject::users() const {
    return m_core.users();
}

inline ContactsTopPeersObject &ContactsTopPeersObject::operator =(const ContactsTopPeers &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT categoriesChanged();
    Q_EMIT chatsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactsTopPeersObject::operator ==(const ContactsTopPeers &b) const {
    return m_core == b;
}

inline void ContactsTopPeersObject::setClassType(quint32 classType) {
    ContactsTopPeers::ContactsTopPeersClassType result;
    switch(classType) {
    case TypeContactsTopPeersNotModified:
        result = ContactsTopPeers::typeContactsTopPeersNotModified;
        break;
    case TypeContactsTopPeers:
        result = ContactsTopPeers::typeContactsTopPeers;
        break;
    default:
        result = ContactsTopPeers::typeContactsTopPeersNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactsTopPeersObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsTopPeers::typeContactsTopPeersNotModified:
        result = TypeContactsTopPeersNotModified;
        break;
    case ContactsTopPeers::typeContactsTopPeers:
        result = TypeContactsTopPeers;
        break;
    default:
        result = TypeContactsTopPeersNotModified;
        break;
    }

    return result;
}

inline void ContactsTopPeersObject::setCore(const ContactsTopPeers &core) {
    operator =(core);
}

inline ContactsTopPeers ContactsTopPeersObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CONTACTSTOPPEERS_OBJECT
