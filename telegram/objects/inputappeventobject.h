// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTAPPEVENT_OBJECT
#define LQTG_TYPE_INPUTAPPEVENT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputappevent.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputAppEventObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputAppEventClassType)
    Q_PROPERTY(QString data READ data WRITE setData NOTIFY dataChanged)
    Q_PROPERTY(qint64 peer READ peer WRITE setPeer NOTIFY peerChanged)
    Q_PROPERTY(qreal time READ time WRITE setTime NOTIFY timeChanged)
    Q_PROPERTY(QString type READ type WRITE setType NOTIFY typeChanged)
    Q_PROPERTY(InputAppEvent core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputAppEventClassType {
        TypeInputAppEvent
    };

    InputAppEventObject(const InputAppEvent &core, QObject *parent = 0);
    InputAppEventObject(QObject *parent = 0);
    virtual ~InputAppEventObject();

    void setData(const QString &data);
    QString data() const;

    void setPeer(qint64 peer);
    qint64 peer() const;

    void setTime(qreal time);
    qreal time() const;

    void setType(const QString &type);
    QString type() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputAppEvent &core);
    InputAppEvent core() const;

    InputAppEventObject &operator =(const InputAppEvent &b);
    bool operator ==(const InputAppEvent &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void dataChanged();
    void peerChanged();
    void timeChanged();
    void typeChanged();

private Q_SLOTS:

private:
    InputAppEvent m_core;
};

inline InputAppEventObject::InputAppEventObject(const InputAppEvent &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputAppEventObject::InputAppEventObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputAppEventObject::~InputAppEventObject() {
}

inline void InputAppEventObject::setData(const QString &data) {
    if(m_core.data() == data) return;
    m_core.setData(data);
    Q_EMIT dataChanged();
    Q_EMIT coreChanged();
}

inline QString InputAppEventObject::data() const {
    return m_core.data();
}

inline void InputAppEventObject::setPeer(qint64 peer) {
    if(m_core.peer() == peer) return;
    m_core.setPeer(peer);
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputAppEventObject::peer() const {
    return m_core.peer();
}

inline void InputAppEventObject::setTime(qreal time) {
    if(m_core.time() == time) return;
    m_core.setTime(time);
    Q_EMIT timeChanged();
    Q_EMIT coreChanged();
}

inline qreal InputAppEventObject::time() const {
    return m_core.time();
}

inline void InputAppEventObject::setType(const QString &type) {
    if(m_core.type() == type) return;
    m_core.setType(type);
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

inline QString InputAppEventObject::type() const {
    return m_core.type();
}

inline InputAppEventObject &InputAppEventObject::operator =(const InputAppEvent &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT dataChanged();
    Q_EMIT peerChanged();
    Q_EMIT timeChanged();
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputAppEventObject::operator ==(const InputAppEvent &b) const {
    return m_core == b;
}

inline void InputAppEventObject::setClassType(quint32 classType) {
    InputAppEvent::InputAppEventClassType result;
    switch(classType) {
    case TypeInputAppEvent:
        result = InputAppEvent::typeInputAppEvent;
        break;
    default:
        result = InputAppEvent::typeInputAppEvent;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputAppEventObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputAppEvent::typeInputAppEvent:
        result = TypeInputAppEvent;
        break;
    default:
        result = TypeInputAppEvent;
        break;
    }

    return result;
}

inline void InputAppEventObject::setCore(const InputAppEvent &core) {
    operator =(core);
}

inline InputAppEvent InputAppEventObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTAPPEVENT_OBJECT
