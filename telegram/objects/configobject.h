// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONFIG_OBJECT
#define LQTG_TYPE_CONFIG_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/config.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ConfigObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ConfigClassType)
    Q_PROPERTY(qint32 chatBigSize READ chatBigSize WRITE setChatBigSize NOTIFY chatBigSizeChanged)
    Q_PROPERTY(qint32 chatSizeMax READ chatSizeMax WRITE setChatSizeMax NOTIFY chatSizeMaxChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(QList<DcOption> dcOptions READ dcOptions WRITE setDcOptions NOTIFY dcOptionsChanged)
    Q_PROPERTY(QList<DisabledFeature> disabledFeatures READ disabledFeatures WRITE setDisabledFeatures NOTIFY disabledFeaturesChanged)
    Q_PROPERTY(qint32 editTimeLimit READ editTimeLimit WRITE setEditTimeLimit NOTIFY editTimeLimitChanged)
    Q_PROPERTY(qint32 expires READ expires WRITE setExpires NOTIFY expiresChanged)
    Q_PROPERTY(qint32 forwardedCountMax READ forwardedCountMax WRITE setForwardedCountMax NOTIFY forwardedCountMaxChanged)
    Q_PROPERTY(qint32 megagroupSizeMax READ megagroupSizeMax WRITE setMegagroupSizeMax NOTIFY megagroupSizeMaxChanged)
    Q_PROPERTY(qint32 notifyCloudDelayMs READ notifyCloudDelayMs WRITE setNotifyCloudDelayMs NOTIFY notifyCloudDelayMsChanged)
    Q_PROPERTY(qint32 notifyDefaultDelayMs READ notifyDefaultDelayMs WRITE setNotifyDefaultDelayMs NOTIFY notifyDefaultDelayMsChanged)
    Q_PROPERTY(qint32 offlineBlurTimeoutMs READ offlineBlurTimeoutMs WRITE setOfflineBlurTimeoutMs NOTIFY offlineBlurTimeoutMsChanged)
    Q_PROPERTY(qint32 offlineIdleTimeoutMs READ offlineIdleTimeoutMs WRITE setOfflineIdleTimeoutMs NOTIFY offlineIdleTimeoutMsChanged)
    Q_PROPERTY(qint32 onlineCloudTimeoutMs READ onlineCloudTimeoutMs WRITE setOnlineCloudTimeoutMs NOTIFY onlineCloudTimeoutMsChanged)
    Q_PROPERTY(qint32 onlineUpdatePeriodMs READ onlineUpdatePeriodMs WRITE setOnlineUpdatePeriodMs NOTIFY onlineUpdatePeriodMsChanged)
    Q_PROPERTY(qint32 pushChatLimit READ pushChatLimit WRITE setPushChatLimit NOTIFY pushChatLimitChanged)
    Q_PROPERTY(qint32 pushChatPeriodMs READ pushChatPeriodMs WRITE setPushChatPeriodMs NOTIFY pushChatPeriodMsChanged)
    Q_PROPERTY(qint32 ratingEDecay READ ratingEDecay WRITE setRatingEDecay NOTIFY ratingEDecayChanged)
    Q_PROPERTY(qint32 savedGifsLimit READ savedGifsLimit WRITE setSavedGifsLimit NOTIFY savedGifsLimitChanged)
    Q_PROPERTY(bool testMode READ testMode WRITE setTestMode NOTIFY testModeChanged)
    Q_PROPERTY(qint32 thisDc READ thisDc WRITE setThisDc NOTIFY thisDcChanged)
    Q_PROPERTY(Config core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ConfigClassType {
        TypeConfig
    };

    ConfigObject(const Config &core, QObject *parent = 0);
    ConfigObject(QObject *parent = 0);
    virtual ~ConfigObject();

    void setChatBigSize(qint32 chatBigSize);
    qint32 chatBigSize() const;

    void setChatSizeMax(qint32 chatSizeMax);
    qint32 chatSizeMax() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setDcOptions(const QList<DcOption> &dcOptions);
    QList<DcOption> dcOptions() const;

    void setDisabledFeatures(const QList<DisabledFeature> &disabledFeatures);
    QList<DisabledFeature> disabledFeatures() const;

    void setEditTimeLimit(qint32 editTimeLimit);
    qint32 editTimeLimit() const;

    void setExpires(qint32 expires);
    qint32 expires() const;

    void setForwardedCountMax(qint32 forwardedCountMax);
    qint32 forwardedCountMax() const;

    void setMegagroupSizeMax(qint32 megagroupSizeMax);
    qint32 megagroupSizeMax() const;

    void setNotifyCloudDelayMs(qint32 notifyCloudDelayMs);
    qint32 notifyCloudDelayMs() const;

    void setNotifyDefaultDelayMs(qint32 notifyDefaultDelayMs);
    qint32 notifyDefaultDelayMs() const;

    void setOfflineBlurTimeoutMs(qint32 offlineBlurTimeoutMs);
    qint32 offlineBlurTimeoutMs() const;

    void setOfflineIdleTimeoutMs(qint32 offlineIdleTimeoutMs);
    qint32 offlineIdleTimeoutMs() const;

    void setOnlineCloudTimeoutMs(qint32 onlineCloudTimeoutMs);
    qint32 onlineCloudTimeoutMs() const;

    void setOnlineUpdatePeriodMs(qint32 onlineUpdatePeriodMs);
    qint32 onlineUpdatePeriodMs() const;

    void setPushChatLimit(qint32 pushChatLimit);
    qint32 pushChatLimit() const;

    void setPushChatPeriodMs(qint32 pushChatPeriodMs);
    qint32 pushChatPeriodMs() const;

    void setRatingEDecay(qint32 ratingEDecay);
    qint32 ratingEDecay() const;

    void setSavedGifsLimit(qint32 savedGifsLimit);
    qint32 savedGifsLimit() const;

    void setTestMode(bool testMode);
    bool testMode() const;

    void setThisDc(qint32 thisDc);
    qint32 thisDc() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const Config &core);
    Config core() const;

    ConfigObject &operator =(const Config &b);
    bool operator ==(const Config &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatBigSizeChanged();
    void chatSizeMaxChanged();
    void dateChanged();
    void dcOptionsChanged();
    void disabledFeaturesChanged();
    void editTimeLimitChanged();
    void expiresChanged();
    void forwardedCountMaxChanged();
    void megagroupSizeMaxChanged();
    void notifyCloudDelayMsChanged();
    void notifyDefaultDelayMsChanged();
    void offlineBlurTimeoutMsChanged();
    void offlineIdleTimeoutMsChanged();
    void onlineCloudTimeoutMsChanged();
    void onlineUpdatePeriodMsChanged();
    void pushChatLimitChanged();
    void pushChatPeriodMsChanged();
    void ratingEDecayChanged();
    void savedGifsLimitChanged();
    void testModeChanged();
    void thisDcChanged();

private Q_SLOTS:

private:
    Config m_core;
};

inline ConfigObject::ConfigObject(const Config &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ConfigObject::ConfigObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ConfigObject::~ConfigObject() {
}

inline void ConfigObject::setChatBigSize(qint32 chatBigSize) {
    if(m_core.chatBigSize() == chatBigSize) return;
    m_core.setChatBigSize(chatBigSize);
    Q_EMIT chatBigSizeChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::chatBigSize() const {
    return m_core.chatBigSize();
}

inline void ConfigObject::setChatSizeMax(qint32 chatSizeMax) {
    if(m_core.chatSizeMax() == chatSizeMax) return;
    m_core.setChatSizeMax(chatSizeMax);
    Q_EMIT chatSizeMaxChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::chatSizeMax() const {
    return m_core.chatSizeMax();
}

inline void ConfigObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::date() const {
    return m_core.date();
}

inline void ConfigObject::setDcOptions(const QList<DcOption> &dcOptions) {
    if(m_core.dcOptions() == dcOptions) return;
    m_core.setDcOptions(dcOptions);
    Q_EMIT dcOptionsChanged();
    Q_EMIT coreChanged();
}

inline QList<DcOption> ConfigObject::dcOptions() const {
    return m_core.dcOptions();
}

inline void ConfigObject::setDisabledFeatures(const QList<DisabledFeature> &disabledFeatures) {
    if(m_core.disabledFeatures() == disabledFeatures) return;
    m_core.setDisabledFeatures(disabledFeatures);
    Q_EMIT disabledFeaturesChanged();
    Q_EMIT coreChanged();
}

inline QList<DisabledFeature> ConfigObject::disabledFeatures() const {
    return m_core.disabledFeatures();
}

inline void ConfigObject::setEditTimeLimit(qint32 editTimeLimit) {
    if(m_core.editTimeLimit() == editTimeLimit) return;
    m_core.setEditTimeLimit(editTimeLimit);
    Q_EMIT editTimeLimitChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::editTimeLimit() const {
    return m_core.editTimeLimit();
}

inline void ConfigObject::setExpires(qint32 expires) {
    if(m_core.expires() == expires) return;
    m_core.setExpires(expires);
    Q_EMIT expiresChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::expires() const {
    return m_core.expires();
}

inline void ConfigObject::setForwardedCountMax(qint32 forwardedCountMax) {
    if(m_core.forwardedCountMax() == forwardedCountMax) return;
    m_core.setForwardedCountMax(forwardedCountMax);
    Q_EMIT forwardedCountMaxChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::forwardedCountMax() const {
    return m_core.forwardedCountMax();
}

inline void ConfigObject::setMegagroupSizeMax(qint32 megagroupSizeMax) {
    if(m_core.megagroupSizeMax() == megagroupSizeMax) return;
    m_core.setMegagroupSizeMax(megagroupSizeMax);
    Q_EMIT megagroupSizeMaxChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::megagroupSizeMax() const {
    return m_core.megagroupSizeMax();
}

inline void ConfigObject::setNotifyCloudDelayMs(qint32 notifyCloudDelayMs) {
    if(m_core.notifyCloudDelayMs() == notifyCloudDelayMs) return;
    m_core.setNotifyCloudDelayMs(notifyCloudDelayMs);
    Q_EMIT notifyCloudDelayMsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::notifyCloudDelayMs() const {
    return m_core.notifyCloudDelayMs();
}

inline void ConfigObject::setNotifyDefaultDelayMs(qint32 notifyDefaultDelayMs) {
    if(m_core.notifyDefaultDelayMs() == notifyDefaultDelayMs) return;
    m_core.setNotifyDefaultDelayMs(notifyDefaultDelayMs);
    Q_EMIT notifyDefaultDelayMsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::notifyDefaultDelayMs() const {
    return m_core.notifyDefaultDelayMs();
}

inline void ConfigObject::setOfflineBlurTimeoutMs(qint32 offlineBlurTimeoutMs) {
    if(m_core.offlineBlurTimeoutMs() == offlineBlurTimeoutMs) return;
    m_core.setOfflineBlurTimeoutMs(offlineBlurTimeoutMs);
    Q_EMIT offlineBlurTimeoutMsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::offlineBlurTimeoutMs() const {
    return m_core.offlineBlurTimeoutMs();
}

inline void ConfigObject::setOfflineIdleTimeoutMs(qint32 offlineIdleTimeoutMs) {
    if(m_core.offlineIdleTimeoutMs() == offlineIdleTimeoutMs) return;
    m_core.setOfflineIdleTimeoutMs(offlineIdleTimeoutMs);
    Q_EMIT offlineIdleTimeoutMsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::offlineIdleTimeoutMs() const {
    return m_core.offlineIdleTimeoutMs();
}

inline void ConfigObject::setOnlineCloudTimeoutMs(qint32 onlineCloudTimeoutMs) {
    if(m_core.onlineCloudTimeoutMs() == onlineCloudTimeoutMs) return;
    m_core.setOnlineCloudTimeoutMs(onlineCloudTimeoutMs);
    Q_EMIT onlineCloudTimeoutMsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::onlineCloudTimeoutMs() const {
    return m_core.onlineCloudTimeoutMs();
}

inline void ConfigObject::setOnlineUpdatePeriodMs(qint32 onlineUpdatePeriodMs) {
    if(m_core.onlineUpdatePeriodMs() == onlineUpdatePeriodMs) return;
    m_core.setOnlineUpdatePeriodMs(onlineUpdatePeriodMs);
    Q_EMIT onlineUpdatePeriodMsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::onlineUpdatePeriodMs() const {
    return m_core.onlineUpdatePeriodMs();
}

inline void ConfigObject::setPushChatLimit(qint32 pushChatLimit) {
    if(m_core.pushChatLimit() == pushChatLimit) return;
    m_core.setPushChatLimit(pushChatLimit);
    Q_EMIT pushChatLimitChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::pushChatLimit() const {
    return m_core.pushChatLimit();
}

inline void ConfigObject::setPushChatPeriodMs(qint32 pushChatPeriodMs) {
    if(m_core.pushChatPeriodMs() == pushChatPeriodMs) return;
    m_core.setPushChatPeriodMs(pushChatPeriodMs);
    Q_EMIT pushChatPeriodMsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::pushChatPeriodMs() const {
    return m_core.pushChatPeriodMs();
}

inline void ConfigObject::setRatingEDecay(qint32 ratingEDecay) {
    if(m_core.ratingEDecay() == ratingEDecay) return;
    m_core.setRatingEDecay(ratingEDecay);
    Q_EMIT ratingEDecayChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::ratingEDecay() const {
    return m_core.ratingEDecay();
}

inline void ConfigObject::setSavedGifsLimit(qint32 savedGifsLimit) {
    if(m_core.savedGifsLimit() == savedGifsLimit) return;
    m_core.setSavedGifsLimit(savedGifsLimit);
    Q_EMIT savedGifsLimitChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::savedGifsLimit() const {
    return m_core.savedGifsLimit();
}

inline void ConfigObject::setTestMode(bool testMode) {
    if(m_core.testMode() == testMode) return;
    m_core.setTestMode(testMode);
    Q_EMIT testModeChanged();
    Q_EMIT coreChanged();
}

inline bool ConfigObject::testMode() const {
    return m_core.testMode();
}

inline void ConfigObject::setThisDc(qint32 thisDc) {
    if(m_core.thisDc() == thisDc) return;
    m_core.setThisDc(thisDc);
    Q_EMIT thisDcChanged();
    Q_EMIT coreChanged();
}

inline qint32 ConfigObject::thisDc() const {
    return m_core.thisDc();
}

inline ConfigObject &ConfigObject::operator =(const Config &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT chatBigSizeChanged();
    Q_EMIT chatSizeMaxChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcOptionsChanged();
    Q_EMIT disabledFeaturesChanged();
    Q_EMIT editTimeLimitChanged();
    Q_EMIT expiresChanged();
    Q_EMIT forwardedCountMaxChanged();
    Q_EMIT megagroupSizeMaxChanged();
    Q_EMIT notifyCloudDelayMsChanged();
    Q_EMIT notifyDefaultDelayMsChanged();
    Q_EMIT offlineBlurTimeoutMsChanged();
    Q_EMIT offlineIdleTimeoutMsChanged();
    Q_EMIT onlineCloudTimeoutMsChanged();
    Q_EMIT onlineUpdatePeriodMsChanged();
    Q_EMIT pushChatLimitChanged();
    Q_EMIT pushChatPeriodMsChanged();
    Q_EMIT ratingEDecayChanged();
    Q_EMIT savedGifsLimitChanged();
    Q_EMIT testModeChanged();
    Q_EMIT thisDcChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ConfigObject::operator ==(const Config &b) const {
    return m_core == b;
}

inline void ConfigObject::setClassType(quint32 classType) {
    Config::ConfigClassType result;
    switch(classType) {
    case TypeConfig:
        result = Config::typeConfig;
        break;
    default:
        result = Config::typeConfig;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ConfigObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Config::typeConfig:
        result = TypeConfig;
        break;
    default:
        result = TypeConfig;
        break;
    }

    return result;
}

inline void ConfigObject::setCore(const Config &core) {
    operator =(core);
}

inline Config ConfigObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CONFIG_OBJECT
