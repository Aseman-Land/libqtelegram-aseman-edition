// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ENCRYPTEDCHAT_OBJECT
#define LQTG_TYPE_ENCRYPTEDCHAT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/encryptedchat.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT EncryptedChatObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(EncryptedChatClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 adminId READ adminId WRITE setAdminId NOTIFY adminIdChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(QByteArray gA READ gA WRITE setGA NOTIFY gAChanged)
    Q_PROPERTY(QByteArray gAOrB READ gAOrB WRITE setGAOrB NOTIFY gAOrBChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(qint64 keyFingerprint READ keyFingerprint WRITE setKeyFingerprint NOTIFY keyFingerprintChanged)
    Q_PROPERTY(qint32 participantId READ participantId WRITE setParticipantId NOTIFY participantIdChanged)
    Q_PROPERTY(EncryptedChat core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum EncryptedChatClassType {
        TypeEncryptedChatEmpty,
        TypeEncryptedChatWaiting,
        TypeEncryptedChatRequested,
        TypeEncryptedChat,
        TypeEncryptedChatDiscarded
    };

    EncryptedChatObject(const EncryptedChat &core, QObject *parent = 0);
    EncryptedChatObject(QObject *parent = 0);
    virtual ~EncryptedChatObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setAdminId(qint32 adminId);
    qint32 adminId() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setGA(const QByteArray &gA);
    QByteArray gA() const;

    void setGAOrB(const QByteArray &gAOrB);
    QByteArray gAOrB() const;

    void setId(qint32 id);
    qint32 id() const;

    void setKeyFingerprint(qint64 keyFingerprint);
    qint64 keyFingerprint() const;

    void setParticipantId(qint32 participantId);
    qint32 participantId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const EncryptedChat &core);
    EncryptedChat core() const;

    EncryptedChatObject &operator =(const EncryptedChat &b);
    bool operator ==(const EncryptedChat &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void adminIdChanged();
    void dateChanged();
    void gAChanged();
    void gAOrBChanged();
    void idChanged();
    void keyFingerprintChanged();
    void participantIdChanged();

private Q_SLOTS:

private:
    EncryptedChat m_core;
};

inline EncryptedChatObject::EncryptedChatObject(const EncryptedChat &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline EncryptedChatObject::EncryptedChatObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline EncryptedChatObject::~EncryptedChatObject() {
}

inline void EncryptedChatObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 EncryptedChatObject::accessHash() const {
    return m_core.accessHash();
}

inline void EncryptedChatObject::setAdminId(qint32 adminId) {
    if(m_core.adminId() == adminId) return;
    m_core.setAdminId(adminId);
    Q_EMIT adminIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 EncryptedChatObject::adminId() const {
    return m_core.adminId();
}

inline void EncryptedChatObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 EncryptedChatObject::date() const {
    return m_core.date();
}

inline void EncryptedChatObject::setGA(const QByteArray &gA) {
    if(m_core.gA() == gA) return;
    m_core.setGA(gA);
    Q_EMIT gAChanged();
    Q_EMIT coreChanged();
}

inline QByteArray EncryptedChatObject::gA() const {
    return m_core.gA();
}

inline void EncryptedChatObject::setGAOrB(const QByteArray &gAOrB) {
    if(m_core.gAOrB() == gAOrB) return;
    m_core.setGAOrB(gAOrB);
    Q_EMIT gAOrBChanged();
    Q_EMIT coreChanged();
}

inline QByteArray EncryptedChatObject::gAOrB() const {
    return m_core.gAOrB();
}

inline void EncryptedChatObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 EncryptedChatObject::id() const {
    return m_core.id();
}

inline void EncryptedChatObject::setKeyFingerprint(qint64 keyFingerprint) {
    if(m_core.keyFingerprint() == keyFingerprint) return;
    m_core.setKeyFingerprint(keyFingerprint);
    Q_EMIT keyFingerprintChanged();
    Q_EMIT coreChanged();
}

inline qint64 EncryptedChatObject::keyFingerprint() const {
    return m_core.keyFingerprint();
}

inline void EncryptedChatObject::setParticipantId(qint32 participantId) {
    if(m_core.participantId() == participantId) return;
    m_core.setParticipantId(participantId);
    Q_EMIT participantIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 EncryptedChatObject::participantId() const {
    return m_core.participantId();
}

inline EncryptedChatObject &EncryptedChatObject::operator =(const EncryptedChat &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT adminIdChanged();
    Q_EMIT dateChanged();
    Q_EMIT gAChanged();
    Q_EMIT gAOrBChanged();
    Q_EMIT idChanged();
    Q_EMIT keyFingerprintChanged();
    Q_EMIT participantIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool EncryptedChatObject::operator ==(const EncryptedChat &b) const {
    return m_core == b;
}

inline void EncryptedChatObject::setClassType(quint32 classType) {
    EncryptedChat::EncryptedChatClassType result;
    switch(classType) {
    case TypeEncryptedChatEmpty:
        result = EncryptedChat::typeEncryptedChatEmpty;
        break;
    case TypeEncryptedChatWaiting:
        result = EncryptedChat::typeEncryptedChatWaiting;
        break;
    case TypeEncryptedChatRequested:
        result = EncryptedChat::typeEncryptedChatRequested;
        break;
    case TypeEncryptedChat:
        result = EncryptedChat::typeEncryptedChat;
        break;
    case TypeEncryptedChatDiscarded:
        result = EncryptedChat::typeEncryptedChatDiscarded;
        break;
    default:
        result = EncryptedChat::typeEncryptedChatEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 EncryptedChatObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case EncryptedChat::typeEncryptedChatEmpty:
        result = TypeEncryptedChatEmpty;
        break;
    case EncryptedChat::typeEncryptedChatWaiting:
        result = TypeEncryptedChatWaiting;
        break;
    case EncryptedChat::typeEncryptedChatRequested:
        result = TypeEncryptedChatRequested;
        break;
    case EncryptedChat::typeEncryptedChat:
        result = TypeEncryptedChat;
        break;
    case EncryptedChat::typeEncryptedChatDiscarded:
        result = TypeEncryptedChatDiscarded;
        break;
    default:
        result = TypeEncryptedChatEmpty;
        break;
    }

    return result;
}

inline void EncryptedChatObject::setCore(const EncryptedChat &core) {
    operator =(core);
}

inline EncryptedChat EncryptedChatObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_ENCRYPTEDCHAT_OBJECT
