// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_FNC_PHOTOS
#define LQTG_FNC_PHOTOS

#include "telegramfunctionobject.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include "telegram/types/userprofilephoto.h"
#include "telegram/types/inputphoto.h"
#include "telegram/types/inputphotocrop.h"
#include "telegram/types/photosphoto.h"
#include "telegram/types/inputfile.h"
#include <QString>
#include "telegram/types/inputgeopoint.h"
#include <QList>
#include <QtGlobal>
#include "telegram/types/photosphotos.h"
#include "telegram/types/inputuser.h"

namespace Tg {
namespace Functions {

class LIBQTELEGRAMSHARED_EXPORT Photos : public TelegramFunctionObject
{
public:
    enum PhotosFunction {
        fncPhotosUpdateProfilePhoto = 0xeef579a0,
        fncPhotosUploadProfilePhoto = 0xd50f9c88,
        fncPhotosDeletePhotos = 0x87cf7f2f,
        fncPhotosGetUserPhotos = 0x91cd32a8
    };

    Photos();
    virtual ~Photos();

    static bool updateProfilePhoto(OutboundPkt *out, const InputPhoto &id, const InputPhotoCrop &crop);
    static UserProfilePhoto updateProfilePhotoResult(InboundPkt *in);

    static bool uploadProfilePhoto(OutboundPkt *out, const InputFile &file, const QString &caption, const InputGeoPoint &geoPoint, const InputPhotoCrop &crop);
    static PhotosPhoto uploadProfilePhotoResult(InboundPkt *in);

    static bool deletePhotos(OutboundPkt *out, const QList<InputPhoto> &id);
    static QList<qint64> deletePhotosResult(InboundPkt *in);

    static bool getUserPhotos(OutboundPkt *out, const InputUser &userId, qint32 offset, qint64 maxId, qint32 limit);
    static PhotosPhotos getUserPhotosResult(InboundPkt *in);

};

}
inline Functions::Photos::Photos() {
}

inline Functions::Photos::~Photos() {
}

inline bool Functions::Photos::updateProfilePhoto(OutboundPkt *out, const InputPhoto &id, const InputPhotoCrop &crop) {
    out->appendInt(fncPhotosUpdateProfilePhoto);
    if(!id.push(out)) return false;
    if(!crop.push(out)) return false;
    return true;
}

inline UserProfilePhoto Functions::Photos::updateProfilePhotoResult(InboundPkt *in) {
    UserProfilePhoto result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Photos::uploadProfilePhoto(OutboundPkt *out, const InputFile &file, const QString &caption, const InputGeoPoint &geoPoint, const InputPhotoCrop &crop) {
    out->appendInt(fncPhotosUploadProfilePhoto);
    if(!file.push(out)) return false;
    out->appendQString(caption);
    if(!geoPoint.push(out)) return false;
    if(!crop.push(out)) return false;
    return true;
}

inline PhotosPhoto Functions::Photos::uploadProfilePhotoResult(InboundPkt *in) {
    PhotosPhoto result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Photos::deletePhotos(OutboundPkt *out, const QList<InputPhoto> &id) {
    out->appendInt(fncPhotosDeletePhotos);
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(id.count());
    for (qint32 i = 0; i < id.count(); i++) {
        if(!id[i].push(out)) return false;
    }
    return true;
}

inline QList<qint64> Functions::Photos::deletePhotosResult(InboundPkt *in) {
    QList<qint64> result;
    if(in->fetchInt() != (qint32)CoreTypes::typeVector) return result;
    qint32 result_length = in->fetchInt();
    result.clear();
    for (qint32 i = 0; i < result_length; i++) {
        qint64 type;
        type = in->fetchLong();
        result.append(type);
    }
    return result;
}

inline bool Functions::Photos::getUserPhotos(OutboundPkt *out, const InputUser &userId, qint32 offset, qint64 maxId, qint32 limit) {
    out->appendInt(fncPhotosGetUserPhotos);
    if(!userId.push(out)) return false;
    out->appendInt(offset);
    out->appendLong(maxId);
    out->appendInt(limit);
    return true;
}

inline PhotosPhotos Functions::Photos::getUserPhotosResult(InboundPkt *in) {
    PhotosPhotos result;
    if(!result.fetch(in)) return result;
    return result;
}


}

#endif // LQTG_FNC_PHOTOS
