// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "replymarkup.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ReplyMarkup::ReplyMarkup(ReplyMarkupType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ReplyMarkup::ReplyMarkup(InboundPkt *in) :
    m_flags(0),
    m_classType(typeReplyKeyboardHide)
{
    fetch(in);
}

ReplyMarkup::ReplyMarkup(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeReplyKeyboardHide)
{
}

ReplyMarkup::~ReplyMarkup() {
}

void ReplyMarkup::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 ReplyMarkup::flags() const {
    return m_flags;
}

void ReplyMarkup::setResize(bool resize) {
    if(resize) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool ReplyMarkup::resize() const {
    return (m_flags & 1<<0);
}

void ReplyMarkup::setRows(const QList<KeyboardButtonRow> &rows) {
    m_rows = rows;
}

QList<KeyboardButtonRow> ReplyMarkup::rows() const {
    return m_rows;
}

void ReplyMarkup::setSelective(bool selective) {
    if(selective) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool ReplyMarkup::selective() const {
    return (m_flags & 1<<2);
}

void ReplyMarkup::setSingleUse(bool singleUse) {
    if(singleUse) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool ReplyMarkup::singleUse() const {
    return (m_flags & 1<<1);
}

bool ReplyMarkup::operator ==(const ReplyMarkup &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_rows == b.m_rows;
}

void ReplyMarkup::setClassType(ReplyMarkup::ReplyMarkupType classType) {
    m_classType = classType;
}

ReplyMarkup::ReplyMarkupType ReplyMarkup::classType() const {
    return m_classType;
}

bool ReplyMarkup::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeReplyKeyboardHide: {
        m_flags = in->fetchInt();
        m_classType = static_cast<ReplyMarkupType>(x);
        return true;
    }
        break;
    
    case typeReplyKeyboardForceReply: {
        m_flags = in->fetchInt();
        m_classType = static_cast<ReplyMarkupType>(x);
        return true;
    }
        break;
    
    case typeReplyKeyboardMarkup: {
        m_flags = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_rows_length = in->fetchInt();
        m_rows.clear();
        for (qint32 i = 0; i < m_rows_length; i++) {
            KeyboardButtonRow type;
            type.fetch(in);
            m_rows.append(type);
        }
        m_classType = static_cast<ReplyMarkupType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ReplyMarkup::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeReplyKeyboardHide: {
        out->appendInt(m_flags);
        return true;
    }
        break;
    
    case typeReplyKeyboardForceReply: {
        out->appendInt(m_flags);
        return true;
    }
        break;
    
    case typeReplyKeyboardMarkup: {
        out->appendInt(m_flags);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_rows.count());
        for (qint32 i = 0; i < m_rows.count(); i++) {
            m_rows[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QDataStream &operator<<(QDataStream &stream, const ReplyMarkup &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ReplyMarkup::typeReplyKeyboardHide:
        stream << item.flags();
        break;
    case ReplyMarkup::typeReplyKeyboardForceReply:
        stream << item.flags();
        break;
    case ReplyMarkup::typeReplyKeyboardMarkup:
        stream << item.flags();
        stream << item.rows();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ReplyMarkup &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ReplyMarkup::ReplyMarkupType>(type));
    switch(type) {
    case ReplyMarkup::typeReplyKeyboardHide: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
    }
        break;
    case ReplyMarkup::typeReplyKeyboardForceReply: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
    }
        break;
    case ReplyMarkup::typeReplyKeyboardMarkup: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QList<KeyboardButtonRow> m_rows;
        stream >> m_rows;
        item.setRows(m_rows);
    }
        break;
    }
    return stream;
}

