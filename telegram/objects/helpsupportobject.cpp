// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "helpsupportobject.h"

HelpSupportObject::HelpSupportObject(const HelpSupport &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_user(0),
    m_core(core)
{
    m_user = new UserObject(m_core.user(), this);
    connect(m_user.data(), &UserObject::coreChanged, this, &HelpSupportObject::coreUserChanged);
}

HelpSupportObject::HelpSupportObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_user(0),
    m_core()
{
    m_user = new UserObject(m_core.user(), this);
    connect(m_user.data(), &UserObject::coreChanged, this, &HelpSupportObject::coreUserChanged);
}

HelpSupportObject::~HelpSupportObject() {
}

void HelpSupportObject::setPhoneNumber(const QString &phoneNumber) {
    if(m_core.phoneNumber() == phoneNumber) return;
    m_core.setPhoneNumber(phoneNumber);
    Q_EMIT phoneNumberChanged();
    Q_EMIT coreChanged();
}

QString HelpSupportObject::phoneNumber() const {
    return m_core.phoneNumber();
}

void HelpSupportObject::setUser(UserObject* user) {
    if(m_user == user) return;
    if(m_user) delete m_user;
    m_user = user;
    if(m_user) {
        m_user->setParent(this);
        m_core.setUser(m_user->core());
        connect(m_user.data(), &UserObject::coreChanged, this, &HelpSupportObject::coreUserChanged);
    }
    Q_EMIT userChanged();
    Q_EMIT coreChanged();
}

UserObject*  HelpSupportObject::user() const {
    return m_user;
}

HelpSupportObject &HelpSupportObject::operator =(const HelpSupport &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_user->setCore(b.user());

    Q_EMIT phoneNumberChanged();
    Q_EMIT userChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool HelpSupportObject::operator ==(const HelpSupport &b) const {
    return m_core == b;
}

void HelpSupportObject::setClassType(quint32 classType) {
    HelpSupport::HelpSupportType result;
    switch(classType) {
    case TypeHelpSupport:
        result = HelpSupport::typeHelpSupport;
        break;
    default:
        result = HelpSupport::typeHelpSupport;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 HelpSupportObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case HelpSupport::typeHelpSupport:
        result = TypeHelpSupport;
        break;
    default:
        result = TypeHelpSupport;
        break;
    }

    return result;
}

void HelpSupportObject::setCore(const HelpSupport &core) {
    operator =(core);
}

HelpSupport HelpSupportObject::core() const {
    return m_core;
}

void HelpSupportObject::coreUserChanged() {
    if(m_core.user() == m_user->core()) return;
    m_core.setUser(m_user->core());
    Q_EMIT userChanged();
    Q_EMIT coreChanged();
}

