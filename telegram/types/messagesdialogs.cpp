// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesdialogs.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessagesDialogs::MessagesDialogs(MessagesDialogsType classType, InboundPkt *in) :
    m_count(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesDialogs::MessagesDialogs(InboundPkt *in) :
    m_count(0),
    m_classType(typeMessagesDialogs)
{
    fetch(in);
}

MessagesDialogs::MessagesDialogs(const Null &null) :
    TelegramTypeObject(null),
    m_count(0),
    m_classType(typeMessagesDialogs)
{
}

MessagesDialogs::~MessagesDialogs() {
}

void MessagesDialogs::setChats(const QList<Chat> &chats) {
    m_chats = chats;
}

QList<Chat> MessagesDialogs::chats() const {
    return m_chats;
}

void MessagesDialogs::setCount(qint32 count) {
    m_count = count;
}

qint32 MessagesDialogs::count() const {
    return m_count;
}

void MessagesDialogs::setDialogs(const QList<Dialog> &dialogs) {
    m_dialogs = dialogs;
}

QList<Dialog> MessagesDialogs::dialogs() const {
    return m_dialogs;
}

void MessagesDialogs::setMessages(const QList<Message> &messages) {
    m_messages = messages;
}

QList<Message> MessagesDialogs::messages() const {
    return m_messages;
}

void MessagesDialogs::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> MessagesDialogs::users() const {
    return m_users;
}

bool MessagesDialogs::operator ==(const MessagesDialogs &b) const {
    return m_classType == b.m_classType &&
           m_chats == b.m_chats &&
           m_count == b.m_count &&
           m_dialogs == b.m_dialogs &&
           m_messages == b.m_messages &&
           m_users == b.m_users;
}

void MessagesDialogs::setClassType(MessagesDialogs::MessagesDialogsType classType) {
    m_classType = classType;
}

MessagesDialogs::MessagesDialogsType MessagesDialogs::classType() const {
    return m_classType;
}

bool MessagesDialogs::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesDialogs: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_dialogs_length = in->fetchInt();
        m_dialogs.clear();
        for (qint32 i = 0; i < m_dialogs_length; i++) {
            Dialog type;
            type.fetch(in);
            m_dialogs.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            Message type;
            type.fetch(in);
            m_messages.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<MessagesDialogsType>(x);
        return true;
    }
        break;
    
    case typeMessagesDialogsSlice: {
        m_count = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_dialogs_length = in->fetchInt();
        m_dialogs.clear();
        for (qint32 i = 0; i < m_dialogs_length; i++) {
            Dialog type;
            type.fetch(in);
            m_dialogs.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            Message type;
            type.fetch(in);
            m_messages.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<MessagesDialogsType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesDialogs::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesDialogs: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_dialogs.count());
        for (qint32 i = 0; i < m_dialogs.count(); i++) {
            m_dialogs[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            m_messages[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;
    
    case typeMessagesDialogsSlice: {
        out->appendInt(m_count);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_dialogs.count());
        for (qint32 i = 0; i < m_dialogs.count(); i++) {
            m_dialogs[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            m_messages[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QDataStream &operator<<(QDataStream &stream, const MessagesDialogs &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesDialogs::typeMessagesDialogs:
        stream << item.dialogs();
        stream << item.messages();
        stream << item.chats();
        stream << item.users();
        break;
    case MessagesDialogs::typeMessagesDialogsSlice:
        stream << item.count();
        stream << item.dialogs();
        stream << item.messages();
        stream << item.chats();
        stream << item.users();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessagesDialogs &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesDialogs::MessagesDialogsType>(type));
    switch(type) {
    case MessagesDialogs::typeMessagesDialogs: {
        QList<Dialog> m_dialogs;
        stream >> m_dialogs;
        item.setDialogs(m_dialogs);
        QList<Message> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    case MessagesDialogs::typeMessagesDialogsSlice: {
        qint32 m_count;
        stream >> m_count;
        item.setCount(m_count);
        QList<Dialog> m_dialogs;
        stream >> m_dialogs;
        item.setDialogs(m_dialogs);
        QList<Message> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    }
    return stream;
}

