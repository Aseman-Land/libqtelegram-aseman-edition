// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESALLSTICKERS
#define LQTG_TYPE_MESSAGESALLSTICKERS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QList>
#include "stickerset.h"

class LIBQTELEGRAMSHARED_EXPORT MessagesAllStickers : public TelegramTypeObject
{
public:
    enum MessagesAllStickersClassType {
        typeMessagesAllStickersNotModified = 0xe86602c3,
        typeMessagesAllStickers = 0xedfd405f
    };

    MessagesAllStickers(MessagesAllStickersClassType classType = typeMessagesAllStickersNotModified, InboundPkt *in = 0);
    MessagesAllStickers(InboundPkt *in);
    MessagesAllStickers(const Null&);
    virtual ~MessagesAllStickers();

    void setHash(qint32 hash);
    qint32 hash() const;

    void setSets(const QList<StickerSet> &sets);
    QList<StickerSet> sets() const;

    void setClassType(MessagesAllStickersClassType classType);
    MessagesAllStickersClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static MessagesAllStickers fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const MessagesAllStickers &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_hash;
    QList<StickerSet> m_sets;
    MessagesAllStickersClassType m_classType;
};

Q_DECLARE_METATYPE(MessagesAllStickers)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const MessagesAllStickers &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, MessagesAllStickers &item);

inline MessagesAllStickers::MessagesAllStickers(MessagesAllStickersClassType classType, InboundPkt *in) :
    m_hash(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline MessagesAllStickers::MessagesAllStickers(InboundPkt *in) :
    m_hash(0),
    m_classType(typeMessagesAllStickersNotModified)
{
    fetch(in);
}

inline MessagesAllStickers::MessagesAllStickers(const Null &null) :
    TelegramTypeObject(null),
    m_hash(0),
    m_classType(typeMessagesAllStickersNotModified)
{
}

inline MessagesAllStickers::~MessagesAllStickers() {
}

inline void MessagesAllStickers::setHash(qint32 hash) {
    m_hash = hash;
}

inline qint32 MessagesAllStickers::hash() const {
    return m_hash;
}

inline void MessagesAllStickers::setSets(const QList<StickerSet> &sets) {
    m_sets = sets;
}

inline QList<StickerSet> MessagesAllStickers::sets() const {
    return m_sets;
}

inline bool MessagesAllStickers::operator ==(const MessagesAllStickers &b) const {
    return m_classType == b.m_classType &&
           m_hash == b.m_hash &&
           m_sets == b.m_sets;
}

inline void MessagesAllStickers::setClassType(MessagesAllStickers::MessagesAllStickersClassType classType) {
    m_classType = classType;
}

inline MessagesAllStickers::MessagesAllStickersClassType MessagesAllStickers::classType() const {
    return m_classType;
}

inline bool MessagesAllStickers::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesAllStickersNotModified: {
        m_classType = static_cast<MessagesAllStickersClassType>(x);
        return true;
    }
        break;
    
    case typeMessagesAllStickers: {
        m_hash = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_sets_length = in->fetchInt();
        m_sets.clear();
        for (qint32 i = 0; i < m_sets_length; i++) {
            StickerSet type;
            type.fetch(in);
            m_sets.append(type);
        }
        m_classType = static_cast<MessagesAllStickersClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool MessagesAllStickers::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesAllStickersNotModified: {
        return true;
    }
        break;
    
    case typeMessagesAllStickers: {
        out->appendInt(m_hash);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_sets.count());
        for (qint32 i = 0; i < m_sets.count(); i++) {
            m_sets[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> MessagesAllStickers::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessagesAllStickersNotModified: {
        result["classType"] = "MessagesAllStickers::typeMessagesAllStickersNotModified";
        return result;
    }
        break;
    
    case typeMessagesAllStickers: {
        result["classType"] = "MessagesAllStickers::typeMessagesAllStickers";
        result["hash"] = QVariant::fromValue<qint32>(hash());
        QList<QVariant> _sets;
        Q_FOREACH(const StickerSet &m__type, m_sets)
            _sets << m__type.toMap();
        result["sets"] = _sets;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline MessagesAllStickers MessagesAllStickers::fromMap(const QMap<QString, QVariant> &map) {
    MessagesAllStickers result;
    if(map.value("classType").toString() == "MessagesAllStickers::typeMessagesAllStickersNotModified") {
        result.setClassType(typeMessagesAllStickersNotModified);
        return result;
    }
    if(map.value("classType").toString() == "MessagesAllStickers::typeMessagesAllStickers") {
        result.setClassType(typeMessagesAllStickers);
        result.setHash( map.value("hash").value<qint32>() );
        QList<QVariant> map_sets = map["sets"].toList();
        QList<StickerSet> _sets;
        Q_FOREACH(const QVariant &var, map_sets)
            _sets << StickerSet::fromMap(var.toMap());
        result.setSets(_sets);
        return result;
    }
    return result;
}

inline QByteArray MessagesAllStickers::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const MessagesAllStickers &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesAllStickers::typeMessagesAllStickersNotModified:
        
        break;
    case MessagesAllStickers::typeMessagesAllStickers:
        stream << item.hash();
        stream << item.sets();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, MessagesAllStickers &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesAllStickers::MessagesAllStickersClassType>(type));
    switch(type) {
    case MessagesAllStickers::typeMessagesAllStickersNotModified: {
        
    }
        break;
    case MessagesAllStickers::typeMessagesAllStickers: {
        qint32 m_hash;
        stream >> m_hash;
        item.setHash(m_hash);
        QList<StickerSet> m_sets;
        stream >> m_sets;
        item.setSets(m_sets);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_MESSAGESALLSTICKERS
