// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelparticipantroleobject.h"

ChannelParticipantRoleObject::ChannelParticipantRoleObject(const ChannelParticipantRole &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ChannelParticipantRoleObject::ChannelParticipantRoleObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ChannelParticipantRoleObject::~ChannelParticipantRoleObject() {
}

ChannelParticipantRoleObject &ChannelParticipantRoleObject::operator =(const ChannelParticipantRole &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

bool ChannelParticipantRoleObject::operator ==(const ChannelParticipantRole &b) const {
    return m_core == b;
}

void ChannelParticipantRoleObject::setClassType(quint32 classType) {
    ChannelParticipantRole::ChannelParticipantRoleClassType result;
    switch(classType) {
    case TypeChannelRoleEmpty:
        result = ChannelParticipantRole::typeChannelRoleEmpty;
        break;
    case TypeChannelRoleModerator:
        result = ChannelParticipantRole::typeChannelRoleModerator;
        break;
    case TypeChannelRoleEditor:
        result = ChannelParticipantRole::typeChannelRoleEditor;
        break;
    default:
        result = ChannelParticipantRole::typeChannelRoleEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ChannelParticipantRoleObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelParticipantRole::typeChannelRoleEmpty:
        result = TypeChannelRoleEmpty;
        break;
    case ChannelParticipantRole::typeChannelRoleModerator:
        result = TypeChannelRoleModerator;
        break;
    case ChannelParticipantRole::typeChannelRoleEditor:
        result = TypeChannelRoleEditor;
        break;
    default:
        result = TypeChannelRoleEmpty;
        break;
    }

    return result;
}

void ChannelParticipantRoleObject::setCore(const ChannelParticipantRole &core) {
    operator =(core);
}

ChannelParticipantRole ChannelParticipantRoleObject::core() const {
    return m_core;
}

