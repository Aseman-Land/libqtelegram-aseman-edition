// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_DOCUMENTATTRIBUTE_OBJECT
#define LQTG_TYPE_DOCUMENTATTRIBUTE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/documentattribute.h"

#include <QPointer>
#include "inputstickersetobject.h"

class LIBQTELEGRAMSHARED_EXPORT DocumentAttributeObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(DocumentAttributeClassType)
    Q_PROPERTY(QString alt READ alt WRITE setAlt NOTIFY altChanged)
    Q_PROPERTY(qint32 duration READ duration WRITE setDuration NOTIFY durationChanged)
    Q_PROPERTY(QString fileName READ fileName WRITE setFileName NOTIFY fileNameChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(qint32 h READ h WRITE setH NOTIFY hChanged)
    Q_PROPERTY(QString performer READ performer WRITE setPerformer NOTIFY performerChanged)
    Q_PROPERTY(InputStickerSetObject* stickerset READ stickerset WRITE setStickerset NOTIFY stickersetChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(bool voice READ voice WRITE setVoice NOTIFY voiceChanged)
    Q_PROPERTY(qint32 w READ w WRITE setW NOTIFY wChanged)
    Q_PROPERTY(QByteArray waveform READ waveform WRITE setWaveform NOTIFY waveformChanged)
    Q_PROPERTY(DocumentAttribute core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum DocumentAttributeClassType {
        TypeDocumentAttributeImageSize,
        TypeDocumentAttributeAnimated,
        TypeDocumentAttributeSticker,
        TypeDocumentAttributeVideo,
        TypeDocumentAttributeAudio,
        TypeDocumentAttributeFilename
    };

    DocumentAttributeObject(const DocumentAttribute &core, QObject *parent = 0);
    DocumentAttributeObject(QObject *parent = 0);
    virtual ~DocumentAttributeObject();

    void setAlt(const QString &alt);
    QString alt() const;

    void setDuration(qint32 duration);
    qint32 duration() const;

    void setFileName(const QString &fileName);
    QString fileName() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setH(qint32 h);
    qint32 h() const;

    void setPerformer(const QString &performer);
    QString performer() const;

    void setStickerset(InputStickerSetObject* stickerset);
    InputStickerSetObject* stickerset() const;

    void setTitle(const QString &title);
    QString title() const;

    void setVoice(bool voice);
    bool voice() const;

    void setW(qint32 w);
    qint32 w() const;

    void setWaveform(const QByteArray &waveform);
    QByteArray waveform() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const DocumentAttribute &core);
    DocumentAttribute core() const;

    DocumentAttributeObject &operator =(const DocumentAttribute &b);
    bool operator ==(const DocumentAttribute &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void altChanged();
    void durationChanged();
    void fileNameChanged();
    void flagsChanged();
    void hChanged();
    void performerChanged();
    void stickersetChanged();
    void titleChanged();
    void voiceChanged();
    void wChanged();
    void waveformChanged();

private Q_SLOTS:
    void coreStickersetChanged();

private:
    QPointer<InputStickerSetObject> m_stickerset;
    DocumentAttribute m_core;
};

inline DocumentAttributeObject::DocumentAttributeObject(const DocumentAttribute &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_stickerset(0),
    m_core(core)
{
    m_stickerset = new InputStickerSetObject(m_core.stickerset(), this);
    connect(m_stickerset.data(), &InputStickerSetObject::coreChanged, this, &DocumentAttributeObject::coreStickersetChanged);
}

inline DocumentAttributeObject::DocumentAttributeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_stickerset(0),
    m_core()
{
    m_stickerset = new InputStickerSetObject(m_core.stickerset(), this);
    connect(m_stickerset.data(), &InputStickerSetObject::coreChanged, this, &DocumentAttributeObject::coreStickersetChanged);
}

inline DocumentAttributeObject::~DocumentAttributeObject() {
}

inline void DocumentAttributeObject::setAlt(const QString &alt) {
    if(m_core.alt() == alt) return;
    m_core.setAlt(alt);
    Q_EMIT altChanged();
    Q_EMIT coreChanged();
}

inline QString DocumentAttributeObject::alt() const {
    return m_core.alt();
}

inline void DocumentAttributeObject::setDuration(qint32 duration) {
    if(m_core.duration() == duration) return;
    m_core.setDuration(duration);
    Q_EMIT durationChanged();
    Q_EMIT coreChanged();
}

inline qint32 DocumentAttributeObject::duration() const {
    return m_core.duration();
}

inline void DocumentAttributeObject::setFileName(const QString &fileName) {
    if(m_core.fileName() == fileName) return;
    m_core.setFileName(fileName);
    Q_EMIT fileNameChanged();
    Q_EMIT coreChanged();
}

inline QString DocumentAttributeObject::fileName() const {
    return m_core.fileName();
}

inline void DocumentAttributeObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 DocumentAttributeObject::flags() const {
    return m_core.flags();
}

inline void DocumentAttributeObject::setH(qint32 h) {
    if(m_core.h() == h) return;
    m_core.setH(h);
    Q_EMIT hChanged();
    Q_EMIT coreChanged();
}

inline qint32 DocumentAttributeObject::h() const {
    return m_core.h();
}

inline void DocumentAttributeObject::setPerformer(const QString &performer) {
    if(m_core.performer() == performer) return;
    m_core.setPerformer(performer);
    Q_EMIT performerChanged();
    Q_EMIT coreChanged();
}

inline QString DocumentAttributeObject::performer() const {
    return m_core.performer();
}

inline void DocumentAttributeObject::setStickerset(InputStickerSetObject* stickerset) {
    if(m_stickerset == stickerset) return;
    if(m_stickerset) delete m_stickerset;
    m_stickerset = stickerset;
    if(m_stickerset) {
        m_stickerset->setParent(this);
        m_core.setStickerset(m_stickerset->core());
        connect(m_stickerset.data(), &InputStickerSetObject::coreChanged, this, &DocumentAttributeObject::coreStickersetChanged);
    }
    Q_EMIT stickersetChanged();
    Q_EMIT coreChanged();
}

inline InputStickerSetObject*  DocumentAttributeObject::stickerset() const {
    return m_stickerset;
}

inline void DocumentAttributeObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

inline QString DocumentAttributeObject::title() const {
    return m_core.title();
}

inline void DocumentAttributeObject::setVoice(bool voice) {
    if(m_core.voice() == voice) return;
    m_core.setVoice(voice);
    Q_EMIT voiceChanged();
    Q_EMIT coreChanged();
}

inline bool DocumentAttributeObject::voice() const {
    return m_core.voice();
}

inline void DocumentAttributeObject::setW(qint32 w) {
    if(m_core.w() == w) return;
    m_core.setW(w);
    Q_EMIT wChanged();
    Q_EMIT coreChanged();
}

inline qint32 DocumentAttributeObject::w() const {
    return m_core.w();
}

inline void DocumentAttributeObject::setWaveform(const QByteArray &waveform) {
    if(m_core.waveform() == waveform) return;
    m_core.setWaveform(waveform);
    Q_EMIT waveformChanged();
    Q_EMIT coreChanged();
}

inline QByteArray DocumentAttributeObject::waveform() const {
    return m_core.waveform();
}

inline DocumentAttributeObject &DocumentAttributeObject::operator =(const DocumentAttribute &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_stickerset->setCore(b.stickerset());

    Q_EMIT altChanged();
    Q_EMIT durationChanged();
    Q_EMIT fileNameChanged();
    Q_EMIT flagsChanged();
    Q_EMIT hChanged();
    Q_EMIT performerChanged();
    Q_EMIT stickersetChanged();
    Q_EMIT titleChanged();
    Q_EMIT voiceChanged();
    Q_EMIT wChanged();
    Q_EMIT waveformChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool DocumentAttributeObject::operator ==(const DocumentAttribute &b) const {
    return m_core == b;
}

inline void DocumentAttributeObject::setClassType(quint32 classType) {
    DocumentAttribute::DocumentAttributeClassType result;
    switch(classType) {
    case TypeDocumentAttributeImageSize:
        result = DocumentAttribute::typeDocumentAttributeImageSize;
        break;
    case TypeDocumentAttributeAnimated:
        result = DocumentAttribute::typeDocumentAttributeAnimated;
        break;
    case TypeDocumentAttributeSticker:
        result = DocumentAttribute::typeDocumentAttributeSticker;
        break;
    case TypeDocumentAttributeVideo:
        result = DocumentAttribute::typeDocumentAttributeVideo;
        break;
    case TypeDocumentAttributeAudio:
        result = DocumentAttribute::typeDocumentAttributeAudio;
        break;
    case TypeDocumentAttributeFilename:
        result = DocumentAttribute::typeDocumentAttributeFilename;
        break;
    default:
        result = DocumentAttribute::typeDocumentAttributeImageSize;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 DocumentAttributeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case DocumentAttribute::typeDocumentAttributeImageSize:
        result = TypeDocumentAttributeImageSize;
        break;
    case DocumentAttribute::typeDocumentAttributeAnimated:
        result = TypeDocumentAttributeAnimated;
        break;
    case DocumentAttribute::typeDocumentAttributeSticker:
        result = TypeDocumentAttributeSticker;
        break;
    case DocumentAttribute::typeDocumentAttributeVideo:
        result = TypeDocumentAttributeVideo;
        break;
    case DocumentAttribute::typeDocumentAttributeAudio:
        result = TypeDocumentAttributeAudio;
        break;
    case DocumentAttribute::typeDocumentAttributeFilename:
        result = TypeDocumentAttributeFilename;
        break;
    default:
        result = TypeDocumentAttributeImageSize;
        break;
    }

    return result;
}

inline void DocumentAttributeObject::setCore(const DocumentAttribute &core) {
    operator =(core);
}

inline DocumentAttribute DocumentAttributeObject::core() const {
    return m_core;
}

inline void DocumentAttributeObject::coreStickersetChanged() {
    if(m_core.stickerset() == m_stickerset->core()) return;
    m_core.setStickerset(m_stickerset->core());
    Q_EMIT stickersetChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_DOCUMENTATTRIBUTE_OBJECT
