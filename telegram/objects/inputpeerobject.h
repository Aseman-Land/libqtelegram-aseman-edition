// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTPEER_OBJECT
#define LQTG_TYPE_INPUTPEER_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputpeer.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputPeerObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputPeerClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 channelId READ channelId WRITE setChannelId NOTIFY channelIdChanged)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(InputPeer core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputPeerClassType {
        TypeInputPeerEmpty,
        TypeInputPeerSelf,
        TypeInputPeerChat,
        TypeInputPeerUser,
        TypeInputPeerChannel
    };

    InputPeerObject(const InputPeer &core, QObject *parent = 0);
    InputPeerObject(QObject *parent = 0);
    virtual ~InputPeerObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setChannelId(qint32 channelId);
    qint32 channelId() const;

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputPeer &core);
    InputPeer core() const;

    InputPeerObject &operator =(const InputPeer &b);
    bool operator ==(const InputPeer &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void channelIdChanged();
    void chatIdChanged();
    void userIdChanged();

private Q_SLOTS:

private:
    InputPeer m_core;
};

inline InputPeerObject::InputPeerObject(const InputPeer &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputPeerObject::InputPeerObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputPeerObject::~InputPeerObject() {
}

inline void InputPeerObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputPeerObject::accessHash() const {
    return m_core.accessHash();
}

inline void InputPeerObject::setChannelId(qint32 channelId) {
    if(m_core.channelId() == channelId) return;
    m_core.setChannelId(channelId);
    Q_EMIT channelIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputPeerObject::channelId() const {
    return m_core.channelId();
}

inline void InputPeerObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputPeerObject::chatId() const {
    return m_core.chatId();
}

inline void InputPeerObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputPeerObject::userId() const {
    return m_core.userId();
}

inline InputPeerObject &InputPeerObject::operator =(const InputPeer &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT channelIdChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputPeerObject::operator ==(const InputPeer &b) const {
    return m_core == b;
}

inline void InputPeerObject::setClassType(quint32 classType) {
    InputPeer::InputPeerClassType result;
    switch(classType) {
    case TypeInputPeerEmpty:
        result = InputPeer::typeInputPeerEmpty;
        break;
    case TypeInputPeerSelf:
        result = InputPeer::typeInputPeerSelf;
        break;
    case TypeInputPeerChat:
        result = InputPeer::typeInputPeerChat;
        break;
    case TypeInputPeerUser:
        result = InputPeer::typeInputPeerUser;
        break;
    case TypeInputPeerChannel:
        result = InputPeer::typeInputPeerChannel;
        break;
    default:
        result = InputPeer::typeInputPeerEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputPeerObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputPeer::typeInputPeerEmpty:
        result = TypeInputPeerEmpty;
        break;
    case InputPeer::typeInputPeerSelf:
        result = TypeInputPeerSelf;
        break;
    case InputPeer::typeInputPeerChat:
        result = TypeInputPeerChat;
        break;
    case InputPeer::typeInputPeerUser:
        result = TypeInputPeerUser;
        break;
    case InputPeer::typeInputPeerChannel:
        result = TypeInputPeerChannel;
        break;
    default:
        result = TypeInputPeerEmpty;
        break;
    }

    return result;
}

inline void InputPeerObject::setCore(const InputPeer &core) {
    operator =(core);
}

inline InputPeer InputPeerObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTPEER_OBJECT
