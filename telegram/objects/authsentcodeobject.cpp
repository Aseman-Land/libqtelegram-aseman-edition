// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authsentcodeobject.h"

AuthSentCodeObject::AuthSentCodeObject(const AuthSentCode &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_nextType(0),
    m_type(0),
    m_core(core)
{
    m_nextType = new AuthCodeTypeObject(m_core.nextType(), this);
    connect(m_nextType.data(), &AuthCodeTypeObject::coreChanged, this, &AuthSentCodeObject::coreNextTypeChanged);
    m_type = new AuthSentCodeTypeObject(m_core.type(), this);
    connect(m_type.data(), &AuthSentCodeTypeObject::coreChanged, this, &AuthSentCodeObject::coreTypeChanged);
}

AuthSentCodeObject::AuthSentCodeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_nextType(0),
    m_type(0),
    m_core()
{
    m_nextType = new AuthCodeTypeObject(m_core.nextType(), this);
    connect(m_nextType.data(), &AuthCodeTypeObject::coreChanged, this, &AuthSentCodeObject::coreNextTypeChanged);
    m_type = new AuthSentCodeTypeObject(m_core.type(), this);
    connect(m_type.data(), &AuthSentCodeTypeObject::coreChanged, this, &AuthSentCodeObject::coreTypeChanged);
}

AuthSentCodeObject::~AuthSentCodeObject() {
}

void AuthSentCodeObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 AuthSentCodeObject::flags() const {
    return m_core.flags();
}

void AuthSentCodeObject::setNextType(AuthCodeTypeObject* nextType) {
    if(m_nextType == nextType) return;
    if(m_nextType) delete m_nextType;
    m_nextType = nextType;
    if(m_nextType) {
        m_nextType->setParent(this);
        m_core.setNextType(m_nextType->core());
        connect(m_nextType.data(), &AuthCodeTypeObject::coreChanged, this, &AuthSentCodeObject::coreNextTypeChanged);
    }
    Q_EMIT nextTypeChanged();
    Q_EMIT coreChanged();
}

AuthCodeTypeObject*  AuthSentCodeObject::nextType() const {
    return m_nextType;
}

void AuthSentCodeObject::setPhoneCodeHash(const QString &phoneCodeHash) {
    if(m_core.phoneCodeHash() == phoneCodeHash) return;
    m_core.setPhoneCodeHash(phoneCodeHash);
    Q_EMIT phoneCodeHashChanged();
    Q_EMIT coreChanged();
}

QString AuthSentCodeObject::phoneCodeHash() const {
    return m_core.phoneCodeHash();
}

void AuthSentCodeObject::setPhoneRegistered(bool phoneRegistered) {
    if(m_core.phoneRegistered() == phoneRegistered) return;
    m_core.setPhoneRegistered(phoneRegistered);
    Q_EMIT phoneRegisteredChanged();
    Q_EMIT coreChanged();
}

bool AuthSentCodeObject::phoneRegistered() const {
    return m_core.phoneRegistered();
}

void AuthSentCodeObject::setTimeout(qint32 timeout) {
    if(m_core.timeout() == timeout) return;
    m_core.setTimeout(timeout);
    Q_EMIT timeoutChanged();
    Q_EMIT coreChanged();
}

qint32 AuthSentCodeObject::timeout() const {
    return m_core.timeout();
}

void AuthSentCodeObject::setType(AuthSentCodeTypeObject* type) {
    if(m_type == type) return;
    if(m_type) delete m_type;
    m_type = type;
    if(m_type) {
        m_type->setParent(this);
        m_core.setType(m_type->core());
        connect(m_type.data(), &AuthSentCodeTypeObject::coreChanged, this, &AuthSentCodeObject::coreTypeChanged);
    }
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

AuthSentCodeTypeObject*  AuthSentCodeObject::type() const {
    return m_type;
}

AuthSentCodeObject &AuthSentCodeObject::operator =(const AuthSentCode &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_nextType->setCore(b.nextType());
    m_type->setCore(b.type());

    Q_EMIT flagsChanged();
    Q_EMIT nextTypeChanged();
    Q_EMIT phoneCodeHashChanged();
    Q_EMIT phoneRegisteredChanged();
    Q_EMIT timeoutChanged();
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool AuthSentCodeObject::operator ==(const AuthSentCode &b) const {
    return m_core == b;
}

void AuthSentCodeObject::setClassType(quint32 classType) {
    AuthSentCode::AuthSentCodeClassType result;
    switch(classType) {
    case TypeAuthSentCode:
        result = AuthSentCode::typeAuthSentCode;
        break;
    default:
        result = AuthSentCode::typeAuthSentCode;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AuthSentCodeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthSentCode::typeAuthSentCode:
        result = TypeAuthSentCode;
        break;
    default:
        result = TypeAuthSentCode;
        break;
    }

    return result;
}

void AuthSentCodeObject::setCore(const AuthSentCode &core) {
    operator =(core);
}

AuthSentCode AuthSentCodeObject::core() const {
    return m_core;
}

void AuthSentCodeObject::coreNextTypeChanged() {
    if(m_core.nextType() == m_nextType->core()) return;
    m_core.setNextType(m_nextType->core());
    Q_EMIT nextTypeChanged();
    Q_EMIT coreChanged();
}

void AuthSentCodeObject::coreTypeChanged() {
    if(m_core.type() == m_type->core()) return;
    m_core.setType(m_type->core());
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

