// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ENCRYPTEDCHAT
#define LQTG_TYPE_ENCRYPTEDCHAT

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QByteArray>

class LIBQTELEGRAMSHARED_EXPORT EncryptedChat : public TelegramTypeObject
{
public:
    enum EncryptedChatClassType {
        typeEncryptedChatEmpty = 0xab7ec0a0,
        typeEncryptedChatWaiting = 0x3bf703dc,
        typeEncryptedChatRequested = 0xc878527e,
        typeEncryptedChat = 0xfa56ce36,
        typeEncryptedChatDiscarded = 0x13d6dd27
    };

    EncryptedChat(EncryptedChatClassType classType = typeEncryptedChatEmpty, InboundPkt *in = 0);
    EncryptedChat(InboundPkt *in);
    EncryptedChat(const Null&);
    virtual ~EncryptedChat();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setAdminId(qint32 adminId);
    qint32 adminId() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setGA(const QByteArray &gA);
    QByteArray gA() const;

    void setGAOrB(const QByteArray &gAOrB);
    QByteArray gAOrB() const;

    void setId(qint32 id);
    qint32 id() const;

    void setKeyFingerprint(qint64 keyFingerprint);
    qint64 keyFingerprint() const;

    void setParticipantId(qint32 participantId);
    qint32 participantId() const;

    void setClassType(EncryptedChatClassType classType);
    EncryptedChatClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static EncryptedChat fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const EncryptedChat &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint64 m_accessHash;
    qint32 m_adminId;
    qint32 m_date;
    QByteArray m_gA;
    QByteArray m_gAOrB;
    qint32 m_id;
    qint64 m_keyFingerprint;
    qint32 m_participantId;
    EncryptedChatClassType m_classType;
};

Q_DECLARE_METATYPE(EncryptedChat)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const EncryptedChat &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, EncryptedChat &item);

inline EncryptedChat::EncryptedChat(EncryptedChatClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_adminId(0),
    m_date(0),
    m_id(0),
    m_keyFingerprint(0),
    m_participantId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline EncryptedChat::EncryptedChat(InboundPkt *in) :
    m_accessHash(0),
    m_adminId(0),
    m_date(0),
    m_id(0),
    m_keyFingerprint(0),
    m_participantId(0),
    m_classType(typeEncryptedChatEmpty)
{
    fetch(in);
}

inline EncryptedChat::EncryptedChat(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_adminId(0),
    m_date(0),
    m_id(0),
    m_keyFingerprint(0),
    m_participantId(0),
    m_classType(typeEncryptedChatEmpty)
{
}

inline EncryptedChat::~EncryptedChat() {
}

inline void EncryptedChat::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

inline qint64 EncryptedChat::accessHash() const {
    return m_accessHash;
}

inline void EncryptedChat::setAdminId(qint32 adminId) {
    m_adminId = adminId;
}

inline qint32 EncryptedChat::adminId() const {
    return m_adminId;
}

inline void EncryptedChat::setDate(qint32 date) {
    m_date = date;
}

inline qint32 EncryptedChat::date() const {
    return m_date;
}

inline void EncryptedChat::setGA(const QByteArray &gA) {
    m_gA = gA;
}

inline QByteArray EncryptedChat::gA() const {
    return m_gA;
}

inline void EncryptedChat::setGAOrB(const QByteArray &gAOrB) {
    m_gAOrB = gAOrB;
}

inline QByteArray EncryptedChat::gAOrB() const {
    return m_gAOrB;
}

inline void EncryptedChat::setId(qint32 id) {
    m_id = id;
}

inline qint32 EncryptedChat::id() const {
    return m_id;
}

inline void EncryptedChat::setKeyFingerprint(qint64 keyFingerprint) {
    m_keyFingerprint = keyFingerprint;
}

inline qint64 EncryptedChat::keyFingerprint() const {
    return m_keyFingerprint;
}

inline void EncryptedChat::setParticipantId(qint32 participantId) {
    m_participantId = participantId;
}

inline qint32 EncryptedChat::participantId() const {
    return m_participantId;
}

inline bool EncryptedChat::operator ==(const EncryptedChat &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_adminId == b.m_adminId &&
           m_date == b.m_date &&
           m_gA == b.m_gA &&
           m_gAOrB == b.m_gAOrB &&
           m_id == b.m_id &&
           m_keyFingerprint == b.m_keyFingerprint &&
           m_participantId == b.m_participantId;
}

inline void EncryptedChat::setClassType(EncryptedChat::EncryptedChatClassType classType) {
    m_classType = classType;
}

inline EncryptedChat::EncryptedChatClassType EncryptedChat::classType() const {
    return m_classType;
}

inline bool EncryptedChat::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeEncryptedChatEmpty: {
        m_id = in->fetchInt();
        m_classType = static_cast<EncryptedChatClassType>(x);
        return true;
    }
        break;
    
    case typeEncryptedChatWaiting: {
        m_id = in->fetchInt();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_adminId = in->fetchInt();
        m_participantId = in->fetchInt();
        m_classType = static_cast<EncryptedChatClassType>(x);
        return true;
    }
        break;
    
    case typeEncryptedChatRequested: {
        m_id = in->fetchInt();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_adminId = in->fetchInt();
        m_participantId = in->fetchInt();
        m_gA = in->fetchBytes();
        m_classType = static_cast<EncryptedChatClassType>(x);
        return true;
    }
        break;
    
    case typeEncryptedChat: {
        m_id = in->fetchInt();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_adminId = in->fetchInt();
        m_participantId = in->fetchInt();
        m_gAOrB = in->fetchBytes();
        m_keyFingerprint = in->fetchLong();
        m_classType = static_cast<EncryptedChatClassType>(x);
        return true;
    }
        break;
    
    case typeEncryptedChatDiscarded: {
        m_id = in->fetchInt();
        m_classType = static_cast<EncryptedChatClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool EncryptedChat::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeEncryptedChatEmpty: {
        out->appendInt(m_id);
        return true;
    }
        break;
    
    case typeEncryptedChatWaiting: {
        out->appendInt(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(m_adminId);
        out->appendInt(m_participantId);
        return true;
    }
        break;
    
    case typeEncryptedChatRequested: {
        out->appendInt(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(m_adminId);
        out->appendInt(m_participantId);
        out->appendBytes(m_gA);
        return true;
    }
        break;
    
    case typeEncryptedChat: {
        out->appendInt(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(m_adminId);
        out->appendInt(m_participantId);
        out->appendBytes(m_gAOrB);
        out->appendLong(m_keyFingerprint);
        return true;
    }
        break;
    
    case typeEncryptedChatDiscarded: {
        out->appendInt(m_id);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> EncryptedChat::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeEncryptedChatEmpty: {
        result["classType"] = "EncryptedChat::typeEncryptedChatEmpty";
        result["id"] = QVariant::fromValue<qint32>(id());
        return result;
    }
        break;
    
    case typeEncryptedChatWaiting: {
        result["classType"] = "EncryptedChat::typeEncryptedChatWaiting";
        result["id"] = QVariant::fromValue<qint32>(id());
        result["accessHash"] = QVariant::fromValue<qint64>(accessHash());
        result["date"] = QVariant::fromValue<qint32>(date());
        result["adminId"] = QVariant::fromValue<qint32>(adminId());
        result["participantId"] = QVariant::fromValue<qint32>(participantId());
        return result;
    }
        break;
    
    case typeEncryptedChatRequested: {
        result["classType"] = "EncryptedChat::typeEncryptedChatRequested";
        result["id"] = QVariant::fromValue<qint32>(id());
        result["accessHash"] = QVariant::fromValue<qint64>(accessHash());
        result["date"] = QVariant::fromValue<qint32>(date());
        result["adminId"] = QVariant::fromValue<qint32>(adminId());
        result["participantId"] = QVariant::fromValue<qint32>(participantId());
        result["gA"] = QVariant::fromValue<QByteArray>(gA());
        return result;
    }
        break;
    
    case typeEncryptedChat: {
        result["classType"] = "EncryptedChat::typeEncryptedChat";
        result["id"] = QVariant::fromValue<qint32>(id());
        result["accessHash"] = QVariant::fromValue<qint64>(accessHash());
        result["date"] = QVariant::fromValue<qint32>(date());
        result["adminId"] = QVariant::fromValue<qint32>(adminId());
        result["participantId"] = QVariant::fromValue<qint32>(participantId());
        result["gAOrB"] = QVariant::fromValue<QByteArray>(gAOrB());
        result["keyFingerprint"] = QVariant::fromValue<qint64>(keyFingerprint());
        return result;
    }
        break;
    
    case typeEncryptedChatDiscarded: {
        result["classType"] = "EncryptedChat::typeEncryptedChatDiscarded";
        result["id"] = QVariant::fromValue<qint32>(id());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline EncryptedChat EncryptedChat::fromMap(const QMap<QString, QVariant> &map) {
    EncryptedChat result;
    if(map.value("classType").toString() == "EncryptedChat::typeEncryptedChatEmpty") {
        result.setClassType(typeEncryptedChatEmpty);
        result.setId( map.value("id").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "EncryptedChat::typeEncryptedChatWaiting") {
        result.setClassType(typeEncryptedChatWaiting);
        result.setId( map.value("id").value<qint32>() );
        result.setAccessHash( map.value("accessHash").value<qint64>() );
        result.setDate( map.value("date").value<qint32>() );
        result.setAdminId( map.value("adminId").value<qint32>() );
        result.setParticipantId( map.value("participantId").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "EncryptedChat::typeEncryptedChatRequested") {
        result.setClassType(typeEncryptedChatRequested);
        result.setId( map.value("id").value<qint32>() );
        result.setAccessHash( map.value("accessHash").value<qint64>() );
        result.setDate( map.value("date").value<qint32>() );
        result.setAdminId( map.value("adminId").value<qint32>() );
        result.setParticipantId( map.value("participantId").value<qint32>() );
        result.setGA( map.value("gA").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "EncryptedChat::typeEncryptedChat") {
        result.setClassType(typeEncryptedChat);
        result.setId( map.value("id").value<qint32>() );
        result.setAccessHash( map.value("accessHash").value<qint64>() );
        result.setDate( map.value("date").value<qint32>() );
        result.setAdminId( map.value("adminId").value<qint32>() );
        result.setParticipantId( map.value("participantId").value<qint32>() );
        result.setGAOrB( map.value("gAOrB").value<QByteArray>() );
        result.setKeyFingerprint( map.value("keyFingerprint").value<qint64>() );
        return result;
    }
    if(map.value("classType").toString() == "EncryptedChat::typeEncryptedChatDiscarded") {
        result.setClassType(typeEncryptedChatDiscarded);
        result.setId( map.value("id").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray EncryptedChat::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const EncryptedChat &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case EncryptedChat::typeEncryptedChatEmpty:
        stream << item.id();
        break;
    case EncryptedChat::typeEncryptedChatWaiting:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.adminId();
        stream << item.participantId();
        break;
    case EncryptedChat::typeEncryptedChatRequested:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.adminId();
        stream << item.participantId();
        stream << item.gA();
        break;
    case EncryptedChat::typeEncryptedChat:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.adminId();
        stream << item.participantId();
        stream << item.gAOrB();
        stream << item.keyFingerprint();
        break;
    case EncryptedChat::typeEncryptedChatDiscarded:
        stream << item.id();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, EncryptedChat &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<EncryptedChat::EncryptedChatClassType>(type));
    switch(type) {
    case EncryptedChat::typeEncryptedChatEmpty: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
    }
        break;
    case EncryptedChat::typeEncryptedChatWaiting: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_admin_id;
        stream >> m_admin_id;
        item.setAdminId(m_admin_id);
        qint32 m_participant_id;
        stream >> m_participant_id;
        item.setParticipantId(m_participant_id);
    }
        break;
    case EncryptedChat::typeEncryptedChatRequested: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_admin_id;
        stream >> m_admin_id;
        item.setAdminId(m_admin_id);
        qint32 m_participant_id;
        stream >> m_participant_id;
        item.setParticipantId(m_participant_id);
        QByteArray m_g_a;
        stream >> m_g_a;
        item.setGA(m_g_a);
    }
        break;
    case EncryptedChat::typeEncryptedChat: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_admin_id;
        stream >> m_admin_id;
        item.setAdminId(m_admin_id);
        qint32 m_participant_id;
        stream >> m_participant_id;
        item.setParticipantId(m_participant_id);
        QByteArray m_g_a_or_b;
        stream >> m_g_a_or_b;
        item.setGAOrB(m_g_a_or_b);
        qint64 m_key_fingerprint;
        stream >> m_key_fingerprint;
        item.setKeyFingerprint(m_key_fingerprint);
    }
        break;
    case EncryptedChat::typeEncryptedChatDiscarded: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_ENCRYPTEDCHAT
