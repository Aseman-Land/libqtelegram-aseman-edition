// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesstickers.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessagesStickers::MessagesStickers(MessagesStickersClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesStickers::MessagesStickers(InboundPkt *in) :
    m_classType(typeMessagesStickersNotModified)
{
    fetch(in);
}

MessagesStickers::MessagesStickers(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeMessagesStickersNotModified)
{
}

MessagesStickers::~MessagesStickers() {
}

void MessagesStickers::setHash(const QString &hash) {
    m_hash = hash;
}

QString MessagesStickers::hash() const {
    return m_hash;
}

void MessagesStickers::setStickers(const QList<Document> &stickers) {
    m_stickers = stickers;
}

QList<Document> MessagesStickers::stickers() const {
    return m_stickers;
}

bool MessagesStickers::operator ==(const MessagesStickers &b) const {
    return m_classType == b.m_classType &&
           m_hash == b.m_hash &&
           m_stickers == b.m_stickers;
}

void MessagesStickers::setClassType(MessagesStickers::MessagesStickersClassType classType) {
    m_classType = classType;
}

MessagesStickers::MessagesStickersClassType MessagesStickers::classType() const {
    return m_classType;
}

bool MessagesStickers::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesStickersNotModified: {
        m_classType = static_cast<MessagesStickersClassType>(x);
        return true;
    }
        break;
    
    case typeMessagesStickers: {
        m_hash = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_stickers_length = in->fetchInt();
        m_stickers.clear();
        for (qint32 i = 0; i < m_stickers_length; i++) {
            Document type;
            type.fetch(in);
            m_stickers.append(type);
        }
        m_classType = static_cast<MessagesStickersClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesStickers::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesStickersNotModified: {
        return true;
    }
        break;
    
    case typeMessagesStickers: {
        out->appendQString(m_hash);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_stickers.count());
        for (qint32 i = 0; i < m_stickers.count(); i++) {
            m_stickers[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> MessagesStickers::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessagesStickersNotModified: {
        result["classType"] = "MessagesStickers::typeMessagesStickersNotModified";
        return result;
    }
        break;
    
    case typeMessagesStickers: {
        result["classType"] = "MessagesStickers::typeMessagesStickers";
        result["hash"] = QVariant::fromValue<QString>(hash());
        QList<QVariant> _stickers;
        Q_FOREACH(const Document &m__type, m_stickers)
            _stickers << m__type.toMap();
        result["stickers"] = _stickers;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

MessagesStickers MessagesStickers::fromMap(const QMap<QString, QVariant> &map) {
    MessagesStickers result;
    if(map.value("classType").toString() == "MessagesStickers::typeMessagesStickersNotModified") {
        result.setClassType(typeMessagesStickersNotModified);
        return result;
    }
    if(map.value("classType").toString() == "MessagesStickers::typeMessagesStickers") {
        result.setClassType(typeMessagesStickers);
        result.setHash( map.value("hash").value<QString>() );
        QList<QVariant> map_stickers = map["stickers"].toList();
        QList<Document> _stickers;
        Q_FOREACH(const QVariant &var, map_stickers)
            _stickers << Document::fromMap(var.toMap());
        result.setStickers(_stickers);
        return result;
    }
    return result;
}

QByteArray MessagesStickers::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessagesStickers &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesStickers::typeMessagesStickersNotModified:
        
        break;
    case MessagesStickers::typeMessagesStickers:
        stream << item.hash();
        stream << item.stickers();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessagesStickers &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesStickers::MessagesStickersClassType>(type));
    switch(type) {
    case MessagesStickers::typeMessagesStickersNotModified: {
        
    }
        break;
    case MessagesStickers::typeMessagesStickers: {
        QString m_hash;
        stream >> m_hash;
        item.setHash(m_hash);
        QList<Document> m_stickers;
        stream >> m_stickers;
        item.setStickers(m_stickers);
    }
        break;
    }
    return stream;
}

