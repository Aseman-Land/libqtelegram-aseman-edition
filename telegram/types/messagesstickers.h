// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESSTICKERS
#define LQTG_TYPE_MESSAGESSTICKERS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QString>
#include <QList>
#include "document.h"

class LIBQTELEGRAMSHARED_EXPORT MessagesStickers : public TelegramTypeObject
{
public:
    enum MessagesStickersClassType {
        typeMessagesStickersNotModified = 0xf1749a22,
        typeMessagesStickers = 0x8a8ecd32
    };

    MessagesStickers(MessagesStickersClassType classType = typeMessagesStickersNotModified, InboundPkt *in = 0);
    MessagesStickers(InboundPkt *in);
    MessagesStickers(const Null&);
    virtual ~MessagesStickers();

    void setHash(const QString &hash);
    QString hash() const;

    void setStickers(const QList<Document> &stickers);
    QList<Document> stickers() const;

    void setClassType(MessagesStickersClassType classType);
    MessagesStickersClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static MessagesStickers fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const MessagesStickers &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_hash;
    QList<Document> m_stickers;
    MessagesStickersClassType m_classType;
};

Q_DECLARE_METATYPE(MessagesStickers)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const MessagesStickers &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, MessagesStickers &item);

inline MessagesStickers::MessagesStickers(MessagesStickersClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

inline MessagesStickers::MessagesStickers(InboundPkt *in) :
    m_classType(typeMessagesStickersNotModified)
{
    fetch(in);
}

inline MessagesStickers::MessagesStickers(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeMessagesStickersNotModified)
{
}

inline MessagesStickers::~MessagesStickers() {
}

inline void MessagesStickers::setHash(const QString &hash) {
    m_hash = hash;
}

inline QString MessagesStickers::hash() const {
    return m_hash;
}

inline void MessagesStickers::setStickers(const QList<Document> &stickers) {
    m_stickers = stickers;
}

inline QList<Document> MessagesStickers::stickers() const {
    return m_stickers;
}

inline bool MessagesStickers::operator ==(const MessagesStickers &b) const {
    return m_classType == b.m_classType &&
           m_hash == b.m_hash &&
           m_stickers == b.m_stickers;
}

inline void MessagesStickers::setClassType(MessagesStickers::MessagesStickersClassType classType) {
    m_classType = classType;
}

inline MessagesStickers::MessagesStickersClassType MessagesStickers::classType() const {
    return m_classType;
}

inline bool MessagesStickers::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesStickersNotModified: {
        m_classType = static_cast<MessagesStickersClassType>(x);
        return true;
    }
        break;
    
    case typeMessagesStickers: {
        m_hash = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_stickers_length = in->fetchInt();
        m_stickers.clear();
        for (qint32 i = 0; i < m_stickers_length; i++) {
            Document type;
            type.fetch(in);
            m_stickers.append(type);
        }
        m_classType = static_cast<MessagesStickersClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool MessagesStickers::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesStickersNotModified: {
        return true;
    }
        break;
    
    case typeMessagesStickers: {
        out->appendQString(m_hash);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_stickers.count());
        for (qint32 i = 0; i < m_stickers.count(); i++) {
            m_stickers[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> MessagesStickers::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessagesStickersNotModified: {
        result["classType"] = "MessagesStickers::typeMessagesStickersNotModified";
        return result;
    }
        break;
    
    case typeMessagesStickers: {
        result["classType"] = "MessagesStickers::typeMessagesStickers";
        result["hash"] = QVariant::fromValue<QString>(hash());
        QList<QVariant> _stickers;
        Q_FOREACH(const Document &m__type, m_stickers)
            _stickers << m__type.toMap();
        result["stickers"] = _stickers;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline MessagesStickers MessagesStickers::fromMap(const QMap<QString, QVariant> &map) {
    MessagesStickers result;
    if(map.value("classType").toString() == "MessagesStickers::typeMessagesStickersNotModified") {
        result.setClassType(typeMessagesStickersNotModified);
        return result;
    }
    if(map.value("classType").toString() == "MessagesStickers::typeMessagesStickers") {
        result.setClassType(typeMessagesStickers);
        result.setHash( map.value("hash").value<QString>() );
        QList<QVariant> map_stickers = map["stickers"].toList();
        QList<Document> _stickers;
        Q_FOREACH(const QVariant &var, map_stickers)
            _stickers << Document::fromMap(var.toMap());
        result.setStickers(_stickers);
        return result;
    }
    return result;
}

inline QByteArray MessagesStickers::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const MessagesStickers &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesStickers::typeMessagesStickersNotModified:
        
        break;
    case MessagesStickers::typeMessagesStickers:
        stream << item.hash();
        stream << item.stickers();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, MessagesStickers &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesStickers::MessagesStickersClassType>(type));
    switch(type) {
    case MessagesStickers::typeMessagesStickersNotModified: {
        
    }
        break;
    case MessagesStickers::typeMessagesStickers: {
        QString m_hash;
        stream >> m_hash;
        item.setHash(m_hash);
        QList<Document> m_stickers;
        stream >> m_stickers;
        item.setStickers(m_stickers);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_MESSAGESSTICKERS
