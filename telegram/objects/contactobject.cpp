// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactobject.h"

ContactObject::ContactObject(const Contact &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ContactObject::ContactObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ContactObject::~ContactObject() {
}

void ContactObject::setMutual(bool mutual) {
    if(m_core.mutual() == mutual) return;
    m_core.setMutual(mutual);
    Q_EMIT mutualChanged();
    Q_EMIT coreChanged();
}

bool ContactObject::mutual() const {
    return m_core.mutual();
}

void ContactObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 ContactObject::userId() const {
    return m_core.userId();
}

ContactObject &ContactObject::operator =(const Contact &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT mutualChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ContactObject::operator ==(const Contact &b) const {
    return m_core == b;
}

void ContactObject::setClassType(quint32 classType) {
    Contact::ContactClassType result;
    switch(classType) {
    case TypeContact:
        result = Contact::typeContact;
        break;
    default:
        result = Contact::typeContact;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Contact::typeContact:
        result = TypeContact;
        break;
    default:
        result = TypeContact;
        break;
    }

    return result;
}

void ContactObject::setCore(const Contact &core) {
    operator =(core);
}

Contact ContactObject::core() const {
    return m_core;
}

