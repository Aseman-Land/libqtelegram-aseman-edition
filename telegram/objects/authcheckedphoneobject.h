// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_AUTHCHECKEDPHONE_OBJECT
#define LQTG_TYPE_AUTHCHECKEDPHONE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/authcheckedphone.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AuthCheckedPhoneObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AuthCheckedPhoneClassType)
    Q_PROPERTY(bool phoneRegistered READ phoneRegistered WRITE setPhoneRegistered NOTIFY phoneRegisteredChanged)
    Q_PROPERTY(AuthCheckedPhone core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AuthCheckedPhoneClassType {
        TypeAuthCheckedPhone
    };

    AuthCheckedPhoneObject(const AuthCheckedPhone &core, QObject *parent = 0);
    AuthCheckedPhoneObject(QObject *parent = 0);
    virtual ~AuthCheckedPhoneObject();

    void setPhoneRegistered(bool phoneRegistered);
    bool phoneRegistered() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AuthCheckedPhone &core);
    AuthCheckedPhone core() const;

    AuthCheckedPhoneObject &operator =(const AuthCheckedPhone &b);
    bool operator ==(const AuthCheckedPhone &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void phoneRegisteredChanged();

private Q_SLOTS:

private:
    AuthCheckedPhone m_core;
};

inline AuthCheckedPhoneObject::AuthCheckedPhoneObject(const AuthCheckedPhone &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AuthCheckedPhoneObject::AuthCheckedPhoneObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AuthCheckedPhoneObject::~AuthCheckedPhoneObject() {
}

inline void AuthCheckedPhoneObject::setPhoneRegistered(bool phoneRegistered) {
    if(m_core.phoneRegistered() == phoneRegistered) return;
    m_core.setPhoneRegistered(phoneRegistered);
    Q_EMIT phoneRegisteredChanged();
    Q_EMIT coreChanged();
}

inline bool AuthCheckedPhoneObject::phoneRegistered() const {
    return m_core.phoneRegistered();
}

inline AuthCheckedPhoneObject &AuthCheckedPhoneObject::operator =(const AuthCheckedPhone &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT phoneRegisteredChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AuthCheckedPhoneObject::operator ==(const AuthCheckedPhone &b) const {
    return m_core == b;
}

inline void AuthCheckedPhoneObject::setClassType(quint32 classType) {
    AuthCheckedPhone::AuthCheckedPhoneClassType result;
    switch(classType) {
    case TypeAuthCheckedPhone:
        result = AuthCheckedPhone::typeAuthCheckedPhone;
        break;
    default:
        result = AuthCheckedPhone::typeAuthCheckedPhone;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AuthCheckedPhoneObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthCheckedPhone::typeAuthCheckedPhone:
        result = TypeAuthCheckedPhone;
        break;
    default:
        result = TypeAuthCheckedPhone;
        break;
    }

    return result;
}

inline void AuthCheckedPhoneObject::setCore(const AuthCheckedPhone &core) {
    operator =(core);
}

inline AuthCheckedPhone AuthCheckedPhoneObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_AUTHCHECKEDPHONE_OBJECT
