// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesaffectedhistoryobject.h"

MessagesAffectedHistoryObject::MessagesAffectedHistoryObject(const MessagesAffectedHistory &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesAffectedHistoryObject::MessagesAffectedHistoryObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesAffectedHistoryObject::~MessagesAffectedHistoryObject() {
}

void MessagesAffectedHistoryObject::setOffset(qint32 offset) {
    if(m_core.offset() == offset) return;
    m_core.setOffset(offset);
    Q_EMIT offsetChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesAffectedHistoryObject::offset() const {
    return m_core.offset();
}

void MessagesAffectedHistoryObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesAffectedHistoryObject::pts() const {
    return m_core.pts();
}

void MessagesAffectedHistoryObject::setPtsCount(qint32 ptsCount) {
    if(m_core.ptsCount() == ptsCount) return;
    m_core.setPtsCount(ptsCount);
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesAffectedHistoryObject::ptsCount() const {
    return m_core.ptsCount();
}

MessagesAffectedHistoryObject &MessagesAffectedHistoryObject::operator =(const MessagesAffectedHistory &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT offsetChanged();
    Q_EMIT ptsChanged();
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesAffectedHistoryObject::operator ==(const MessagesAffectedHistory &b) const {
    return m_core == b;
}

void MessagesAffectedHistoryObject::setClassType(quint32 classType) {
    MessagesAffectedHistory::MessagesAffectedHistoryClassType result;
    switch(classType) {
    case TypeMessagesAffectedHistory:
        result = MessagesAffectedHistory::typeMessagesAffectedHistory;
        break;
    default:
        result = MessagesAffectedHistory::typeMessagesAffectedHistory;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesAffectedHistoryObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesAffectedHistory::typeMessagesAffectedHistory:
        result = TypeMessagesAffectedHistory;
        break;
    default:
        result = TypeMessagesAffectedHistory;
        break;
    }

    return result;
}

void MessagesAffectedHistoryObject::setCore(const MessagesAffectedHistory &core) {
    operator =(core);
}

MessagesAffectedHistory MessagesAffectedHistoryObject::core() const {
    return m_core;
}

