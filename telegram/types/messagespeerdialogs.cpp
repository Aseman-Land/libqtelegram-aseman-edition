// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagespeerdialogs.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessagesPeerDialogs::MessagesPeerDialogs(MessagesPeerDialogsClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesPeerDialogs::MessagesPeerDialogs(InboundPkt *in) :
    m_classType(typeMessagesPeerDialogs)
{
    fetch(in);
}

MessagesPeerDialogs::MessagesPeerDialogs(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeMessagesPeerDialogs)
{
}

MessagesPeerDialogs::~MessagesPeerDialogs() {
}

void MessagesPeerDialogs::setChats(const QList<Chat> &chats) {
    m_chats = chats;
}

QList<Chat> MessagesPeerDialogs::chats() const {
    return m_chats;
}

void MessagesPeerDialogs::setDialogs(const QList<Dialog> &dialogs) {
    m_dialogs = dialogs;
}

QList<Dialog> MessagesPeerDialogs::dialogs() const {
    return m_dialogs;
}

void MessagesPeerDialogs::setMessages(const QList<Message> &messages) {
    m_messages = messages;
}

QList<Message> MessagesPeerDialogs::messages() const {
    return m_messages;
}

void MessagesPeerDialogs::setState(const UpdatesState &state) {
    m_state = state;
}

UpdatesState MessagesPeerDialogs::state() const {
    return m_state;
}

void MessagesPeerDialogs::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> MessagesPeerDialogs::users() const {
    return m_users;
}

bool MessagesPeerDialogs::operator ==(const MessagesPeerDialogs &b) const {
    return m_classType == b.m_classType &&
           m_chats == b.m_chats &&
           m_dialogs == b.m_dialogs &&
           m_messages == b.m_messages &&
           m_state == b.m_state &&
           m_users == b.m_users;
}

void MessagesPeerDialogs::setClassType(MessagesPeerDialogs::MessagesPeerDialogsClassType classType) {
    m_classType = classType;
}

MessagesPeerDialogs::MessagesPeerDialogsClassType MessagesPeerDialogs::classType() const {
    return m_classType;
}

bool MessagesPeerDialogs::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesPeerDialogs: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_dialogs_length = in->fetchInt();
        m_dialogs.clear();
        for (qint32 i = 0; i < m_dialogs_length; i++) {
            Dialog type;
            type.fetch(in);
            m_dialogs.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_messages_length = in->fetchInt();
        m_messages.clear();
        for (qint32 i = 0; i < m_messages_length; i++) {
            Message type;
            type.fetch(in);
            m_messages.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_state.fetch(in);
        m_classType = static_cast<MessagesPeerDialogsClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesPeerDialogs::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesPeerDialogs: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_dialogs.count());
        for (qint32 i = 0; i < m_dialogs.count(); i++) {
            m_dialogs[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_messages.count());
        for (qint32 i = 0; i < m_messages.count(); i++) {
            m_messages[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        m_state.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> MessagesPeerDialogs::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessagesPeerDialogs: {
        result["classType"] = "MessagesPeerDialogs::typeMessagesPeerDialogs";
        QList<QVariant> _dialogs;
        Q_FOREACH(const Dialog &m__type, m_dialogs)
            _dialogs << m__type.toMap();
        result["dialogs"] = _dialogs;
        QList<QVariant> _messages;
        Q_FOREACH(const Message &m__type, m_messages)
            _messages << m__type.toMap();
        result["messages"] = _messages;
        QList<QVariant> _chats;
        Q_FOREACH(const Chat &m__type, m_chats)
            _chats << m__type.toMap();
        result["chats"] = _chats;
        QList<QVariant> _users;
        Q_FOREACH(const User &m__type, m_users)
            _users << m__type.toMap();
        result["users"] = _users;
        result["state"] = m_state.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

MessagesPeerDialogs MessagesPeerDialogs::fromMap(const QMap<QString, QVariant> &map) {
    MessagesPeerDialogs result;
    if(map.value("classType").toString() == "MessagesPeerDialogs::typeMessagesPeerDialogs") {
        result.setClassType(typeMessagesPeerDialogs);
        QList<QVariant> map_dialogs = map["dialogs"].toList();
        QList<Dialog> _dialogs;
        Q_FOREACH(const QVariant &var, map_dialogs)
            _dialogs << Dialog::fromMap(var.toMap());
        result.setDialogs(_dialogs);
        QList<QVariant> map_messages = map["messages"].toList();
        QList<Message> _messages;
        Q_FOREACH(const QVariant &var, map_messages)
            _messages << Message::fromMap(var.toMap());
        result.setMessages(_messages);
        QList<QVariant> map_chats = map["chats"].toList();
        QList<Chat> _chats;
        Q_FOREACH(const QVariant &var, map_chats)
            _chats << Chat::fromMap(var.toMap());
        result.setChats(_chats);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        Q_FOREACH(const QVariant &var, map_users)
            _users << User::fromMap(var.toMap());
        result.setUsers(_users);
        result.setState( UpdatesState::fromMap(map.value("state").toMap()) );
        return result;
    }
    return result;
}

QByteArray MessagesPeerDialogs::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessagesPeerDialogs &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesPeerDialogs::typeMessagesPeerDialogs:
        stream << item.dialogs();
        stream << item.messages();
        stream << item.chats();
        stream << item.users();
        stream << item.state();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessagesPeerDialogs &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesPeerDialogs::MessagesPeerDialogsClassType>(type));
    switch(type) {
    case MessagesPeerDialogs::typeMessagesPeerDialogs: {
        QList<Dialog> m_dialogs;
        stream >> m_dialogs;
        item.setDialogs(m_dialogs);
        QList<Message> m_messages;
        stream >> m_messages;
        item.setMessages(m_messages);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
        UpdatesState m_state;
        stream >> m_state;
        item.setState(m_state);
    }
        break;
    }
    return stream;
}

