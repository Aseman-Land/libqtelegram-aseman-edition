// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authsentcode.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

AuthSentCode::AuthSentCode(AuthSentCodeClassType classType, InboundPkt *in) :
    m_flags(0),
    m_timeout(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

AuthSentCode::AuthSentCode(InboundPkt *in) :
    m_flags(0),
    m_timeout(0),
    m_classType(typeAuthSentCode)
{
    fetch(in);
}

AuthSentCode::AuthSentCode(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_timeout(0),
    m_classType(typeAuthSentCode)
{
}

AuthSentCode::~AuthSentCode() {
}

void AuthSentCode::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 AuthSentCode::flags() const {
    return m_flags;
}

void AuthSentCode::setNextType(const AuthCodeType &nextType) {
    m_nextType = nextType;
}

AuthCodeType AuthSentCode::nextType() const {
    return m_nextType;
}

void AuthSentCode::setPhoneCodeHash(const QString &phoneCodeHash) {
    m_phoneCodeHash = phoneCodeHash;
}

QString AuthSentCode::phoneCodeHash() const {
    return m_phoneCodeHash;
}

void AuthSentCode::setPhoneRegistered(bool phoneRegistered) {
    if(phoneRegistered) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool AuthSentCode::phoneRegistered() const {
    return (m_flags & 1<<0);
}

void AuthSentCode::setTimeout(qint32 timeout) {
    m_timeout = timeout;
}

qint32 AuthSentCode::timeout() const {
    return m_timeout;
}

void AuthSentCode::setType(const AuthSentCodeType &type) {
    m_type = type;
}

AuthSentCodeType AuthSentCode::type() const {
    return m_type;
}

bool AuthSentCode::operator ==(const AuthSentCode &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_nextType == b.m_nextType &&
           m_phoneCodeHash == b.m_phoneCodeHash &&
           m_timeout == b.m_timeout &&
           m_type == b.m_type;
}

void AuthSentCode::setClassType(AuthSentCode::AuthSentCodeClassType classType) {
    m_classType = classType;
}

AuthSentCode::AuthSentCodeClassType AuthSentCode::classType() const {
    return m_classType;
}

bool AuthSentCode::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAuthSentCode: {
        m_flags = in->fetchInt();
        m_type.fetch(in);
        m_phoneCodeHash = in->fetchQString();
        if(m_flags & 1<<1) {
            m_nextType.fetch(in);
        }
        if(m_flags & 1<<2) {
            m_timeout = in->fetchInt();
        }
        m_classType = static_cast<AuthSentCodeClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool AuthSentCode::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAuthSentCode: {
        out->appendInt(m_flags);
        m_type.push(out);
        out->appendQString(m_phoneCodeHash);
        m_nextType.push(out);
        out->appendInt(m_timeout);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray AuthSentCode::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const AuthSentCode &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AuthSentCode::typeAuthSentCode:
        stream << item.flags();
        stream << item.type();
        stream << item.phoneCodeHash();
        stream << item.nextType();
        stream << item.timeout();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, AuthSentCode &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AuthSentCode::AuthSentCodeClassType>(type));
    switch(type) {
    case AuthSentCode::typeAuthSentCode: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        AuthSentCodeType m_type;
        stream >> m_type;
        item.setType(m_type);
        QString m_phone_code_hash;
        stream >> m_phone_code_hash;
        item.setPhoneCodeHash(m_phone_code_hash);
        AuthCodeType m_next_type;
        stream >> m_next_type;
        item.setNextType(m_next_type);
        qint32 m_timeout;
        stream >> m_timeout;
        item.setTimeout(m_timeout);
    }
        break;
    }
    return stream;
}

