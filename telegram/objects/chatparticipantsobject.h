// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHATPARTICIPANTS_OBJECT
#define LQTG_TYPE_CHATPARTICIPANTS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/chatparticipants.h"

#include <QPointer>
#include "chatparticipantobject.h"

class LIBQTELEGRAMSHARED_EXPORT ChatParticipantsObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ChatParticipantsType)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(QList<ChatParticipant> participants READ participants WRITE setParticipants NOTIFY participantsChanged)
    Q_PROPERTY(ChatParticipantObject* selfParticipant READ selfParticipant WRITE setSelfParticipant NOTIFY selfParticipantChanged)
    Q_PROPERTY(qint32 version READ version WRITE setVersion NOTIFY versionChanged)
    Q_PROPERTY(ChatParticipants core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ChatParticipantsType {
        TypeChatParticipantsForbidden,
        TypeChatParticipants
    };

    ChatParticipantsObject(const ChatParticipants &core, QObject *parent = 0);
    ChatParticipantsObject(QObject *parent = 0);
    virtual ~ChatParticipantsObject();

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setParticipants(const QList<ChatParticipant> &participants);
    QList<ChatParticipant> participants() const;

    void setSelfParticipant(ChatParticipantObject* selfParticipant);
    ChatParticipantObject* selfParticipant() const;

    void setVersion(qint32 version);
    qint32 version() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ChatParticipants &core);
    ChatParticipants core() const;

    ChatParticipantsObject &operator =(const ChatParticipants &b);
    bool operator ==(const ChatParticipants &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatIdChanged();
    void flagsChanged();
    void participantsChanged();
    void selfParticipantChanged();
    void versionChanged();

private Q_SLOTS:
    void coreSelfParticipantChanged();

private:
    QPointer<ChatParticipantObject> m_selfParticipant;
    ChatParticipants m_core;
};

#endif // LQTG_TYPE_CHATPARTICIPANTS_OBJECT
