// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "accountauthorizationsobject.h"

AccountAuthorizationsObject::AccountAuthorizationsObject(const AccountAuthorizations &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

AccountAuthorizationsObject::AccountAuthorizationsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

AccountAuthorizationsObject::~AccountAuthorizationsObject() {
}

void AccountAuthorizationsObject::setAuthorizations(const QList<Authorization> &authorizations) {
    if(m_core.authorizations() == authorizations) return;
    m_core.setAuthorizations(authorizations);
    Q_EMIT authorizationsChanged();
    Q_EMIT coreChanged();
}

QList<Authorization> AccountAuthorizationsObject::authorizations() const {
    return m_core.authorizations();
}

AccountAuthorizationsObject &AccountAuthorizationsObject::operator =(const AccountAuthorizations &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT authorizationsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool AccountAuthorizationsObject::operator ==(const AccountAuthorizations &b) const {
    return m_core == b;
}

void AccountAuthorizationsObject::setClassType(quint32 classType) {
    AccountAuthorizations::AccountAuthorizationsType result;
    switch(classType) {
    case TypeAccountAuthorizations:
        result = AccountAuthorizations::typeAccountAuthorizations;
        break;
    default:
        result = AccountAuthorizations::typeAccountAuthorizations;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AccountAuthorizationsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AccountAuthorizations::typeAccountAuthorizations:
        result = TypeAccountAuthorizations;
        break;
    default:
        result = TypeAccountAuthorizations;
        break;
    }

    return result;
}

void AccountAuthorizationsObject::setCore(const AccountAuthorizations &core) {
    operator =(core);
}

AccountAuthorizations AccountAuthorizationsObject::core() const {
    return m_core;
}

