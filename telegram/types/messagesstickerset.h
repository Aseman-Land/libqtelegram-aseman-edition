// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESSTICKERSET
#define LQTG_TYPE_MESSAGESSTICKERSET

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QList>
#include "document.h"
#include "stickerpack.h"
#include "stickerset.h"

class LIBQTELEGRAMSHARED_EXPORT MessagesStickerSet : public TelegramTypeObject
{
public:
    enum MessagesStickerSetClassType {
        typeMessagesStickerSet = 0xb60a24a6
    };

    MessagesStickerSet(MessagesStickerSetClassType classType = typeMessagesStickerSet, InboundPkt *in = 0);
    MessagesStickerSet(InboundPkt *in);
    MessagesStickerSet(const Null&);
    virtual ~MessagesStickerSet();

    void setDocuments(const QList<Document> &documents);
    QList<Document> documents() const;

    void setPacks(const QList<StickerPack> &packs);
    QList<StickerPack> packs() const;

    void setSet(const StickerSet &set);
    StickerSet set() const;

    void setClassType(MessagesStickerSetClassType classType);
    MessagesStickerSetClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    bool operator ==(const MessagesStickerSet &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QList<Document> m_documents;
    QList<StickerPack> m_packs;
    StickerSet m_set;
    MessagesStickerSetClassType m_classType;
};

Q_DECLARE_METATYPE(MessagesStickerSet)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const MessagesStickerSet &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, MessagesStickerSet &item);

#endif // LQTG_TYPE_MESSAGESSTICKERSET
