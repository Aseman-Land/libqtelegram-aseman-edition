// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_RECEIVEDNOTIFYMESSAGE_OBJECT
#define LQTG_TYPE_RECEIVEDNOTIFYMESSAGE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/receivednotifymessage.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ReceivedNotifyMessageObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ReceivedNotifyMessageClassType)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(ReceivedNotifyMessage core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ReceivedNotifyMessageClassType {
        TypeReceivedNotifyMessage
    };

    ReceivedNotifyMessageObject(const ReceivedNotifyMessage &core, QObject *parent = 0);
    ReceivedNotifyMessageObject(QObject *parent = 0);
    virtual ~ReceivedNotifyMessageObject();

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setId(qint32 id);
    qint32 id() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ReceivedNotifyMessage &core);
    ReceivedNotifyMessage core() const;

    ReceivedNotifyMessageObject &operator =(const ReceivedNotifyMessage &b);
    bool operator ==(const ReceivedNotifyMessage &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void flagsChanged();
    void idChanged();

private Q_SLOTS:

private:
    ReceivedNotifyMessage m_core;
};

inline ReceivedNotifyMessageObject::ReceivedNotifyMessageObject(const ReceivedNotifyMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ReceivedNotifyMessageObject::ReceivedNotifyMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ReceivedNotifyMessageObject::~ReceivedNotifyMessageObject() {
}

inline void ReceivedNotifyMessageObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ReceivedNotifyMessageObject::flags() const {
    return m_core.flags();
}

inline void ReceivedNotifyMessageObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 ReceivedNotifyMessageObject::id() const {
    return m_core.id();
}

inline ReceivedNotifyMessageObject &ReceivedNotifyMessageObject::operator =(const ReceivedNotifyMessage &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT flagsChanged();
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ReceivedNotifyMessageObject::operator ==(const ReceivedNotifyMessage &b) const {
    return m_core == b;
}

inline void ReceivedNotifyMessageObject::setClassType(quint32 classType) {
    ReceivedNotifyMessage::ReceivedNotifyMessageClassType result;
    switch(classType) {
    case TypeReceivedNotifyMessage:
        result = ReceivedNotifyMessage::typeReceivedNotifyMessage;
        break;
    default:
        result = ReceivedNotifyMessage::typeReceivedNotifyMessage;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ReceivedNotifyMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ReceivedNotifyMessage::typeReceivedNotifyMessage:
        result = TypeReceivedNotifyMessage;
        break;
    default:
        result = TypeReceivedNotifyMessage;
        break;
    }

    return result;
}

inline void ReceivedNotifyMessageObject::setCore(const ReceivedNotifyMessage &core) {
    operator =(core);
}

inline ReceivedNotifyMessage ReceivedNotifyMessageObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_RECEIVEDNOTIFYMESSAGE_OBJECT
