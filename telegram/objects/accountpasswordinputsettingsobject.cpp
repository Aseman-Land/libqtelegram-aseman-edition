// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "accountpasswordinputsettingsobject.h"

AccountPasswordInputSettingsObject::AccountPasswordInputSettingsObject(const AccountPasswordInputSettings &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

AccountPasswordInputSettingsObject::AccountPasswordInputSettingsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

AccountPasswordInputSettingsObject::~AccountPasswordInputSettingsObject() {
}

void AccountPasswordInputSettingsObject::setEmail(const QString &email) {
    if(m_core.email() == email) return;
    m_core.setEmail(email);
    Q_EMIT emailChanged();
    Q_EMIT coreChanged();
}

QString AccountPasswordInputSettingsObject::email() const {
    return m_core.email();
}

void AccountPasswordInputSettingsObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 AccountPasswordInputSettingsObject::flags() const {
    return m_core.flags();
}

void AccountPasswordInputSettingsObject::setHint(const QString &hint) {
    if(m_core.hint() == hint) return;
    m_core.setHint(hint);
    Q_EMIT hintChanged();
    Q_EMIT coreChanged();
}

QString AccountPasswordInputSettingsObject::hint() const {
    return m_core.hint();
}

void AccountPasswordInputSettingsObject::setNewPasswordHash(const QByteArray &newPasswordHash) {
    if(m_core.newPasswordHash() == newPasswordHash) return;
    m_core.setNewPasswordHash(newPasswordHash);
    Q_EMIT newPasswordHashChanged();
    Q_EMIT coreChanged();
}

QByteArray AccountPasswordInputSettingsObject::newPasswordHash() const {
    return m_core.newPasswordHash();
}

void AccountPasswordInputSettingsObject::setNewSalt(const QByteArray &newSalt) {
    if(m_core.newSalt() == newSalt) return;
    m_core.setNewSalt(newSalt);
    Q_EMIT newSaltChanged();
    Q_EMIT coreChanged();
}

QByteArray AccountPasswordInputSettingsObject::newSalt() const {
    return m_core.newSalt();
}

AccountPasswordInputSettingsObject &AccountPasswordInputSettingsObject::operator =(const AccountPasswordInputSettings &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT emailChanged();
    Q_EMIT flagsChanged();
    Q_EMIT hintChanged();
    Q_EMIT newPasswordHashChanged();
    Q_EMIT newSaltChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool AccountPasswordInputSettingsObject::operator ==(const AccountPasswordInputSettings &b) const {
    return m_core == b;
}

void AccountPasswordInputSettingsObject::setClassType(quint32 classType) {
    AccountPasswordInputSettings::AccountPasswordInputSettingsClassType result;
    switch(classType) {
    case TypeAccountPasswordInputSettings:
        result = AccountPasswordInputSettings::typeAccountPasswordInputSettings;
        break;
    default:
        result = AccountPasswordInputSettings::typeAccountPasswordInputSettings;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AccountPasswordInputSettingsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AccountPasswordInputSettings::typeAccountPasswordInputSettings:
        result = TypeAccountPasswordInputSettings;
        break;
    default:
        result = TypeAccountPasswordInputSettings;
        break;
    }

    return result;
}

void AccountPasswordInputSettingsObject::setCore(const AccountPasswordInputSettings &core) {
    operator =(core);
}

AccountPasswordInputSettings AccountPasswordInputSettingsObject::core() const {
    return m_core;
}

