// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSTOPPEERS
#define LQTG_TYPE_CONTACTSTOPPEERS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QList>
#include "toppeercategorypeers.h"
#include "chat.h"
#include "user.h"

class LIBQTELEGRAMSHARED_EXPORT ContactsTopPeers : public TelegramTypeObject
{
public:
    enum ContactsTopPeersClassType {
        typeContactsTopPeersNotModified = 0xde266ef5,
        typeContactsTopPeers = 0x70b772a8
    };

    ContactsTopPeers(ContactsTopPeersClassType classType = typeContactsTopPeersNotModified, InboundPkt *in = 0);
    ContactsTopPeers(InboundPkt *in);
    ContactsTopPeers(const Null&);
    virtual ~ContactsTopPeers();

    void setCategories(const QList<TopPeerCategoryPeers> &categories);
    QList<TopPeerCategoryPeers> categories() const;

    void setChats(const QList<Chat> &chats);
    QList<Chat> chats() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(ContactsTopPeersClassType classType);
    ContactsTopPeersClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ContactsTopPeers fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ContactsTopPeers &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QList<TopPeerCategoryPeers> m_categories;
    QList<Chat> m_chats;
    QList<User> m_users;
    ContactsTopPeersClassType m_classType;
};

Q_DECLARE_METATYPE(ContactsTopPeers)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ContactsTopPeers &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ContactsTopPeers &item);

inline ContactsTopPeers::ContactsTopPeers(ContactsTopPeersClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

inline ContactsTopPeers::ContactsTopPeers(InboundPkt *in) :
    m_classType(typeContactsTopPeersNotModified)
{
    fetch(in);
}

inline ContactsTopPeers::ContactsTopPeers(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeContactsTopPeersNotModified)
{
}

inline ContactsTopPeers::~ContactsTopPeers() {
}

inline void ContactsTopPeers::setCategories(const QList<TopPeerCategoryPeers> &categories) {
    m_categories = categories;
}

inline QList<TopPeerCategoryPeers> ContactsTopPeers::categories() const {
    return m_categories;
}

inline void ContactsTopPeers::setChats(const QList<Chat> &chats) {
    m_chats = chats;
}

inline QList<Chat> ContactsTopPeers::chats() const {
    return m_chats;
}

inline void ContactsTopPeers::setUsers(const QList<User> &users) {
    m_users = users;
}

inline QList<User> ContactsTopPeers::users() const {
    return m_users;
}

inline bool ContactsTopPeers::operator ==(const ContactsTopPeers &b) const {
    return m_classType == b.m_classType &&
           m_categories == b.m_categories &&
           m_chats == b.m_chats &&
           m_users == b.m_users;
}

inline void ContactsTopPeers::setClassType(ContactsTopPeers::ContactsTopPeersClassType classType) {
    m_classType = classType;
}

inline ContactsTopPeers::ContactsTopPeersClassType ContactsTopPeers::classType() const {
    return m_classType;
}

inline bool ContactsTopPeers::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeContactsTopPeersNotModified: {
        m_classType = static_cast<ContactsTopPeersClassType>(x);
        return true;
    }
        break;
    
    case typeContactsTopPeers: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_categories_length = in->fetchInt();
        m_categories.clear();
        for (qint32 i = 0; i < m_categories_length; i++) {
            TopPeerCategoryPeers type;
            type.fetch(in);
            m_categories.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<ContactsTopPeersClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool ContactsTopPeers::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeContactsTopPeersNotModified: {
        return true;
    }
        break;
    
    case typeContactsTopPeers: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_categories.count());
        for (qint32 i = 0; i < m_categories.count(); i++) {
            m_categories[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> ContactsTopPeers::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeContactsTopPeersNotModified: {
        result["classType"] = "ContactsTopPeers::typeContactsTopPeersNotModified";
        return result;
    }
        break;
    
    case typeContactsTopPeers: {
        result["classType"] = "ContactsTopPeers::typeContactsTopPeers";
        QList<QVariant> _categories;
        Q_FOREACH(const TopPeerCategoryPeers &m__type, m_categories)
            _categories << m__type.toMap();
        result["categories"] = _categories;
        QList<QVariant> _chats;
        Q_FOREACH(const Chat &m__type, m_chats)
            _chats << m__type.toMap();
        result["chats"] = _chats;
        QList<QVariant> _users;
        Q_FOREACH(const User &m__type, m_users)
            _users << m__type.toMap();
        result["users"] = _users;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline ContactsTopPeers ContactsTopPeers::fromMap(const QMap<QString, QVariant> &map) {
    ContactsTopPeers result;
    if(map.value("classType").toString() == "ContactsTopPeers::typeContactsTopPeersNotModified") {
        result.setClassType(typeContactsTopPeersNotModified);
        return result;
    }
    if(map.value("classType").toString() == "ContactsTopPeers::typeContactsTopPeers") {
        result.setClassType(typeContactsTopPeers);
        QList<QVariant> map_categories = map["categories"].toList();
        QList<TopPeerCategoryPeers> _categories;
        Q_FOREACH(const QVariant &var, map_categories)
            _categories << TopPeerCategoryPeers::fromMap(var.toMap());
        result.setCategories(_categories);
        QList<QVariant> map_chats = map["chats"].toList();
        QList<Chat> _chats;
        Q_FOREACH(const QVariant &var, map_chats)
            _chats << Chat::fromMap(var.toMap());
        result.setChats(_chats);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        Q_FOREACH(const QVariant &var, map_users)
            _users << User::fromMap(var.toMap());
        result.setUsers(_users);
        return result;
    }
    return result;
}

inline QByteArray ContactsTopPeers::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const ContactsTopPeers &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ContactsTopPeers::typeContactsTopPeersNotModified:
        
        break;
    case ContactsTopPeers::typeContactsTopPeers:
        stream << item.categories();
        stream << item.chats();
        stream << item.users();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, ContactsTopPeers &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ContactsTopPeers::ContactsTopPeersClassType>(type));
    switch(type) {
    case ContactsTopPeers::typeContactsTopPeersNotModified: {
        
    }
        break;
    case ContactsTopPeers::typeContactsTopPeers: {
        QList<TopPeerCategoryPeers> m_categories;
        stream >> m_categories;
        item.setCategories(m_categories);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_CONTACTSTOPPEERS
