// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactssuggestedobject.h"

ContactsSuggestedObject::ContactsSuggestedObject(const ContactsSuggested &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ContactsSuggestedObject::ContactsSuggestedObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ContactsSuggestedObject::~ContactsSuggestedObject() {
}

void ContactsSuggestedObject::setResults(const QList<ContactSuggested> &results) {
    if(m_core.results() == results) return;
    m_core.setResults(results);
    Q_EMIT resultsChanged();
    Q_EMIT coreChanged();
}

QList<ContactSuggested> ContactsSuggestedObject::results() const {
    return m_core.results();
}

void ContactsSuggestedObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> ContactsSuggestedObject::users() const {
    return m_core.users();
}

ContactsSuggestedObject &ContactsSuggestedObject::operator =(const ContactsSuggested &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT resultsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ContactsSuggestedObject::operator ==(const ContactsSuggested &b) const {
    return m_core == b;
}

void ContactsSuggestedObject::setClassType(quint32 classType) {
    ContactsSuggested::ContactsSuggestedType result;
    switch(classType) {
    case TypeContactsSuggested:
        result = ContactsSuggested::typeContactsSuggested;
        break;
    default:
        result = ContactsSuggested::typeContactsSuggested;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactsSuggestedObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsSuggested::typeContactsSuggested:
        result = TypeContactsSuggested;
        break;
    default:
        result = TypeContactsSuggested;
        break;
    }

    return result;
}

void ContactsSuggestedObject::setCore(const ContactsSuggested &core) {
    operator =(core);
}

ContactsSuggested ContactsSuggestedObject::core() const {
    return m_core;
}

