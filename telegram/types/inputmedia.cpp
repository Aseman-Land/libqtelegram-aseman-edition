// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputmedia.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputMedia::InputMedia(InputMediaClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

InputMedia::InputMedia(InboundPkt *in) :
    m_classType(typeInputMediaEmpty)
{
    fetch(in);
}

InputMedia::InputMedia(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeInputMediaEmpty)
{
}

InputMedia::~InputMedia() {
}

void InputMedia::setAddress(const QString &address) {
    m_address = address;
}

QString InputMedia::address() const {
    return m_address;
}

void InputMedia::setAttributes(const QList<DocumentAttribute> &attributes) {
    m_attributes = attributes;
}

QList<DocumentAttribute> InputMedia::attributes() const {
    return m_attributes;
}

void InputMedia::setCaption(const QString &caption) {
    m_caption = caption;
}

QString InputMedia::caption() const {
    return m_caption;
}

void InputMedia::setFile(const InputFile &file) {
    m_file = file;
}

InputFile InputMedia::file() const {
    return m_file;
}

void InputMedia::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString InputMedia::firstName() const {
    return m_firstName;
}

void InputMedia::setGeoPoint(const InputGeoPoint &geoPoint) {
    m_geoPoint = geoPoint;
}

InputGeoPoint InputMedia::geoPoint() const {
    return m_geoPoint;
}

void InputMedia::setIdInputDocument(const InputDocument &idInputDocument) {
    m_idInputDocument = idInputDocument;
}

InputDocument InputMedia::idInputDocument() const {
    return m_idInputDocument;
}

void InputMedia::setIdInputPhoto(const InputPhoto &idInputPhoto) {
    m_idInputPhoto = idInputPhoto;
}

InputPhoto InputMedia::idInputPhoto() const {
    return m_idInputPhoto;
}

void InputMedia::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString InputMedia::lastName() const {
    return m_lastName;
}

void InputMedia::setMimeType(const QString &mimeType) {
    m_mimeType = mimeType;
}

QString InputMedia::mimeType() const {
    return m_mimeType;
}

void InputMedia::setPhoneNumber(const QString &phoneNumber) {
    m_phoneNumber = phoneNumber;
}

QString InputMedia::phoneNumber() const {
    return m_phoneNumber;
}

void InputMedia::setProvider(const QString &provider) {
    m_provider = provider;
}

QString InputMedia::provider() const {
    return m_provider;
}

void InputMedia::setQ(const QString &q) {
    m_q = q;
}

QString InputMedia::q() const {
    return m_q;
}

void InputMedia::setThumb(const InputFile &thumb) {
    m_thumb = thumb;
}

InputFile InputMedia::thumb() const {
    return m_thumb;
}

void InputMedia::setTitle(const QString &title) {
    m_title = title;
}

QString InputMedia::title() const {
    return m_title;
}

void InputMedia::setUrl(const QString &url) {
    m_url = url;
}

QString InputMedia::url() const {
    return m_url;
}

void InputMedia::setVenueId(const QString &venueId) {
    m_venueId = venueId;
}

QString InputMedia::venueId() const {
    return m_venueId;
}

bool InputMedia::operator ==(const InputMedia &b) const {
    return m_classType == b.m_classType &&
           m_address == b.m_address &&
           m_attributes == b.m_attributes &&
           m_caption == b.m_caption &&
           m_file == b.m_file &&
           m_firstName == b.m_firstName &&
           m_geoPoint == b.m_geoPoint &&
           m_idInputDocument == b.m_idInputDocument &&
           m_idInputPhoto == b.m_idInputPhoto &&
           m_lastName == b.m_lastName &&
           m_mimeType == b.m_mimeType &&
           m_phoneNumber == b.m_phoneNumber &&
           m_provider == b.m_provider &&
           m_q == b.m_q &&
           m_thumb == b.m_thumb &&
           m_title == b.m_title &&
           m_url == b.m_url &&
           m_venueId == b.m_venueId;
}

void InputMedia::setClassType(InputMedia::InputMediaClassType classType) {
    m_classType = classType;
}

InputMedia::InputMediaClassType InputMedia::classType() const {
    return m_classType;
}

bool InputMedia::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputMediaEmpty: {
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaUploadedPhoto: {
        m_file.fetch(in);
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaPhoto: {
        m_idInputPhoto.fetch(in);
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaGeoPoint: {
        m_geoPoint.fetch(in);
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaContact: {
        m_phoneNumber = in->fetchQString();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaUploadedDocument: {
        m_file.fetch(in);
        m_mimeType = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_attributes_length = in->fetchInt();
        m_attributes.clear();
        for (qint32 i = 0; i < m_attributes_length; i++) {
            DocumentAttribute type;
            type.fetch(in);
            m_attributes.append(type);
        }
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaUploadedThumbDocument: {
        m_file.fetch(in);
        m_thumb.fetch(in);
        m_mimeType = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_attributes_length = in->fetchInt();
        m_attributes.clear();
        for (qint32 i = 0; i < m_attributes_length; i++) {
            DocumentAttribute type;
            type.fetch(in);
            m_attributes.append(type);
        }
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaDocument: {
        m_idInputDocument.fetch(in);
        m_caption = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaVenue: {
        m_geoPoint.fetch(in);
        m_title = in->fetchQString();
        m_address = in->fetchQString();
        m_provider = in->fetchQString();
        m_venueId = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    case typeInputMediaGifExternal: {
        m_url = in->fetchQString();
        m_q = in->fetchQString();
        m_classType = static_cast<InputMediaClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputMedia::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputMediaEmpty: {
        return true;
    }
        break;
    
    case typeInputMediaUploadedPhoto: {
        m_file.push(out);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaPhoto: {
        m_idInputPhoto.push(out);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaGeoPoint: {
        m_geoPoint.push(out);
        return true;
    }
        break;
    
    case typeInputMediaContact: {
        out->appendQString(m_phoneNumber);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        return true;
    }
        break;
    
    case typeInputMediaUploadedDocument: {
        m_file.push(out);
        out->appendQString(m_mimeType);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_attributes.count());
        for (qint32 i = 0; i < m_attributes.count(); i++) {
            m_attributes[i].push(out);
        }
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaUploadedThumbDocument: {
        m_file.push(out);
        m_thumb.push(out);
        out->appendQString(m_mimeType);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_attributes.count());
        for (qint32 i = 0; i < m_attributes.count(); i++) {
            m_attributes[i].push(out);
        }
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaDocument: {
        m_idInputDocument.push(out);
        out->appendQString(m_caption);
        return true;
    }
        break;
    
    case typeInputMediaVenue: {
        m_geoPoint.push(out);
        out->appendQString(m_title);
        out->appendQString(m_address);
        out->appendQString(m_provider);
        out->appendQString(m_venueId);
        return true;
    }
        break;
    
    case typeInputMediaGifExternal: {
        out->appendQString(m_url);
        out->appendQString(m_q);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> InputMedia::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeInputMediaEmpty: {
        result["classType"] = "InputMedia::typeInputMediaEmpty";
        return result;
    }
        break;
    
    case typeInputMediaUploadedPhoto: {
        result["classType"] = "InputMedia::typeInputMediaUploadedPhoto";
        result["file"] = m_file.toMap();
        result["caption"] = QVariant::fromValue<QString>(caption());
        return result;
    }
        break;
    
    case typeInputMediaPhoto: {
        result["classType"] = "InputMedia::typeInputMediaPhoto";
        result["idInputPhoto"] = m_idInputPhoto.toMap();
        result["caption"] = QVariant::fromValue<QString>(caption());
        return result;
    }
        break;
    
    case typeInputMediaGeoPoint: {
        result["classType"] = "InputMedia::typeInputMediaGeoPoint";
        result["geoPoint"] = m_geoPoint.toMap();
        return result;
    }
        break;
    
    case typeInputMediaContact: {
        result["classType"] = "InputMedia::typeInputMediaContact";
        result["phoneNumber"] = QVariant::fromValue<QString>(phoneNumber());
        result["firstName"] = QVariant::fromValue<QString>(firstName());
        result["lastName"] = QVariant::fromValue<QString>(lastName());
        return result;
    }
        break;
    
    case typeInputMediaUploadedDocument: {
        result["classType"] = "InputMedia::typeInputMediaUploadedDocument";
        result["file"] = m_file.toMap();
        result["mimeType"] = QVariant::fromValue<QString>(mimeType());
        QList<QVariant> _attributes;
        Q_FOREACH(const DocumentAttribute &m__type, m_attributes)
            _attributes << m__type.toMap();
        result["attributes"] = _attributes;
        result["caption"] = QVariant::fromValue<QString>(caption());
        return result;
    }
        break;
    
    case typeInputMediaUploadedThumbDocument: {
        result["classType"] = "InputMedia::typeInputMediaUploadedThumbDocument";
        result["file"] = m_file.toMap();
        result["thumb"] = m_thumb.toMap();
        result["mimeType"] = QVariant::fromValue<QString>(mimeType());
        QList<QVariant> _attributes;
        Q_FOREACH(const DocumentAttribute &m__type, m_attributes)
            _attributes << m__type.toMap();
        result["attributes"] = _attributes;
        result["caption"] = QVariant::fromValue<QString>(caption());
        return result;
    }
        break;
    
    case typeInputMediaDocument: {
        result["classType"] = "InputMedia::typeInputMediaDocument";
        result["idInputDocument"] = m_idInputDocument.toMap();
        result["caption"] = QVariant::fromValue<QString>(caption());
        return result;
    }
        break;
    
    case typeInputMediaVenue: {
        result["classType"] = "InputMedia::typeInputMediaVenue";
        result["geoPoint"] = m_geoPoint.toMap();
        result["title"] = QVariant::fromValue<QString>(title());
        result["address"] = QVariant::fromValue<QString>(address());
        result["provider"] = QVariant::fromValue<QString>(provider());
        result["venueId"] = QVariant::fromValue<QString>(venueId());
        return result;
    }
        break;
    
    case typeInputMediaGifExternal: {
        result["classType"] = "InputMedia::typeInputMediaGifExternal";
        result["url"] = QVariant::fromValue<QString>(url());
        result["q"] = QVariant::fromValue<QString>(q());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

InputMedia InputMedia::fromMap(const QMap<QString, QVariant> &map) {
    InputMedia result;
    if(map.value("classType").toString() == "InputMedia::typeInputMediaEmpty") {
        result.setClassType(typeInputMediaEmpty);
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaUploadedPhoto") {
        result.setClassType(typeInputMediaUploadedPhoto);
        result.setFile( InputFile::fromMap(map.value("file").toMap()) );
        result.setCaption( map.value("caption").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaPhoto") {
        result.setClassType(typeInputMediaPhoto);
        result.setIdInputPhoto( InputPhoto::fromMap(map.value("idInputPhoto").toMap()) );
        result.setCaption( map.value("caption").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaGeoPoint") {
        result.setClassType(typeInputMediaGeoPoint);
        result.setGeoPoint( InputGeoPoint::fromMap(map.value("geoPoint").toMap()) );
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaContact") {
        result.setClassType(typeInputMediaContact);
        result.setPhoneNumber( map.value("phoneNumber").value<QString>() );
        result.setFirstName( map.value("firstName").value<QString>() );
        result.setLastName( map.value("lastName").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaUploadedDocument") {
        result.setClassType(typeInputMediaUploadedDocument);
        result.setFile( InputFile::fromMap(map.value("file").toMap()) );
        result.setMimeType( map.value("mimeType").value<QString>() );
        QList<QVariant> map_attributes = map["attributes"].toList();
        QList<DocumentAttribute> _attributes;
        Q_FOREACH(const QVariant &var, map_attributes)
            _attributes << DocumentAttribute::fromMap(var.toMap());
        result.setAttributes(_attributes);
        result.setCaption( map.value("caption").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaUploadedThumbDocument") {
        result.setClassType(typeInputMediaUploadedThumbDocument);
        result.setFile( InputFile::fromMap(map.value("file").toMap()) );
        result.setThumb( InputFile::fromMap(map.value("thumb").toMap()) );
        result.setMimeType( map.value("mimeType").value<QString>() );
        QList<QVariant> map_attributes = map["attributes"].toList();
        QList<DocumentAttribute> _attributes;
        Q_FOREACH(const QVariant &var, map_attributes)
            _attributes << DocumentAttribute::fromMap(var.toMap());
        result.setAttributes(_attributes);
        result.setCaption( map.value("caption").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaDocument") {
        result.setClassType(typeInputMediaDocument);
        result.setIdInputDocument( InputDocument::fromMap(map.value("idInputDocument").toMap()) );
        result.setCaption( map.value("caption").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaVenue") {
        result.setClassType(typeInputMediaVenue);
        result.setGeoPoint( InputGeoPoint::fromMap(map.value("geoPoint").toMap()) );
        result.setTitle( map.value("title").value<QString>() );
        result.setAddress( map.value("address").value<QString>() );
        result.setProvider( map.value("provider").value<QString>() );
        result.setVenueId( map.value("venueId").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "InputMedia::typeInputMediaGifExternal") {
        result.setClassType(typeInputMediaGifExternal);
        result.setUrl( map.value("url").value<QString>() );
        result.setQ( map.value("q").value<QString>() );
        return result;
    }
    return result;
}

QByteArray InputMedia::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputMedia &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputMedia::typeInputMediaEmpty:
        
        break;
    case InputMedia::typeInputMediaUploadedPhoto:
        stream << item.file();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaPhoto:
        stream << item.idInputPhoto();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaGeoPoint:
        stream << item.geoPoint();
        break;
    case InputMedia::typeInputMediaContact:
        stream << item.phoneNumber();
        stream << item.firstName();
        stream << item.lastName();
        break;
    case InputMedia::typeInputMediaUploadedDocument:
        stream << item.file();
        stream << item.mimeType();
        stream << item.attributes();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaUploadedThumbDocument:
        stream << item.file();
        stream << item.thumb();
        stream << item.mimeType();
        stream << item.attributes();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaDocument:
        stream << item.idInputDocument();
        stream << item.caption();
        break;
    case InputMedia::typeInputMediaVenue:
        stream << item.geoPoint();
        stream << item.title();
        stream << item.address();
        stream << item.provider();
        stream << item.venueId();
        break;
    case InputMedia::typeInputMediaGifExternal:
        stream << item.url();
        stream << item.q();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputMedia &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputMedia::InputMediaClassType>(type));
    switch(type) {
    case InputMedia::typeInputMediaEmpty: {
        
    }
        break;
    case InputMedia::typeInputMediaUploadedPhoto: {
        InputFile m_file;
        stream >> m_file;
        item.setFile(m_file);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaPhoto: {
        InputPhoto m_id_InputPhoto;
        stream >> m_id_InputPhoto;
        item.setIdInputPhoto(m_id_InputPhoto);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaGeoPoint: {
        InputGeoPoint m_geo_point;
        stream >> m_geo_point;
        item.setGeoPoint(m_geo_point);
    }
        break;
    case InputMedia::typeInputMediaContact: {
        QString m_phone_number;
        stream >> m_phone_number;
        item.setPhoneNumber(m_phone_number);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
    }
        break;
    case InputMedia::typeInputMediaUploadedDocument: {
        InputFile m_file;
        stream >> m_file;
        item.setFile(m_file);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        QList<DocumentAttribute> m_attributes;
        stream >> m_attributes;
        item.setAttributes(m_attributes);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaUploadedThumbDocument: {
        InputFile m_file;
        stream >> m_file;
        item.setFile(m_file);
        InputFile m_thumb;
        stream >> m_thumb;
        item.setThumb(m_thumb);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        QList<DocumentAttribute> m_attributes;
        stream >> m_attributes;
        item.setAttributes(m_attributes);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaDocument: {
        InputDocument m_id_InputDocument;
        stream >> m_id_InputDocument;
        item.setIdInputDocument(m_id_InputDocument);
        QString m_caption;
        stream >> m_caption;
        item.setCaption(m_caption);
    }
        break;
    case InputMedia::typeInputMediaVenue: {
        InputGeoPoint m_geo_point;
        stream >> m_geo_point;
        item.setGeoPoint(m_geo_point);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_address;
        stream >> m_address;
        item.setAddress(m_address);
        QString m_provider;
        stream >> m_provider;
        item.setProvider(m_provider);
        QString m_venue_id;
        stream >> m_venue_id;
        item.setVenueId(m_venue_id);
    }
        break;
    case InputMedia::typeInputMediaGifExternal: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_q;
        stream >> m_q;
        item.setQ(m_q);
    }
        break;
    }
    return stream;
}

