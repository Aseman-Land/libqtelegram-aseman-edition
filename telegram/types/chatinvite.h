// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHATINVITE
#define LQTG_TYPE_CHATINVITE

#include "telegramtypeobject.h"

#include <QMetaType>
#include "chat.h"
#include <QtGlobal>
#include <QString>

class LIBQTELEGRAMSHARED_EXPORT ChatInvite : public TelegramTypeObject
{
public:
    enum ChatInviteType {
        typeChatInviteAlready = 0x5a686d7c,
        typeChatInvite = 0x93e99b60
    };

    ChatInvite(ChatInviteType classType = typeChatInviteAlready, InboundPkt *in = 0);
    ChatInvite(InboundPkt *in);
    ChatInvite(const Null&);
    virtual ~ChatInvite();

    void setBroadcast(bool broadcast);
    bool broadcast() const;

    void setChannel(bool channel);
    bool channel() const;

    void setChat(const Chat &chat);
    Chat chat() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setMegagroup(bool megagroup);
    bool megagroup() const;

    void setPublicValue(bool publicValue);
    bool publicValue() const;

    void setTitle(const QString &title);
    QString title() const;

    void setClassType(ChatInviteType classType);
    ChatInviteType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    bool operator ==(const ChatInvite &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    Chat m_chat;
    qint32 m_flags;
    QString m_title;
    ChatInviteType m_classType;
};

Q_DECLARE_METATYPE(ChatInvite)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChatInvite &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChatInvite &item);

#endif // LQTG_TYPE_CHATINVITE
