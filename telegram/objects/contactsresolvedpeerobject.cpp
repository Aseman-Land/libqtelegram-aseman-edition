// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactsresolvedpeerobject.h"

ContactsResolvedPeerObject::ContactsResolvedPeerObject(const ContactsResolvedPeer &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core(core)
{
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &ContactsResolvedPeerObject::corePeerChanged);
}

ContactsResolvedPeerObject::ContactsResolvedPeerObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core()
{
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &ContactsResolvedPeerObject::corePeerChanged);
}

ContactsResolvedPeerObject::~ContactsResolvedPeerObject() {
}

void ContactsResolvedPeerObject::setChats(const QList<Chat> &chats) {
    if(m_core.chats() == chats) return;
    m_core.setChats(chats);
    Q_EMIT chatsChanged();
    Q_EMIT coreChanged();
}

QList<Chat> ContactsResolvedPeerObject::chats() const {
    return m_core.chats();
}

void ContactsResolvedPeerObject::setPeer(PeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), &PeerObject::coreChanged, this, &ContactsResolvedPeerObject::corePeerChanged);
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

PeerObject*  ContactsResolvedPeerObject::peer() const {
    return m_peer;
}

void ContactsResolvedPeerObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> ContactsResolvedPeerObject::users() const {
    return m_core.users();
}

ContactsResolvedPeerObject &ContactsResolvedPeerObject::operator =(const ContactsResolvedPeer &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_peer->setCore(b.peer());

    Q_EMIT chatsChanged();
    Q_EMIT peerChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ContactsResolvedPeerObject::operator ==(const ContactsResolvedPeer &b) const {
    return m_core == b;
}

void ContactsResolvedPeerObject::setClassType(quint32 classType) {
    ContactsResolvedPeer::ContactsResolvedPeerClassType result;
    switch(classType) {
    case TypeContactsResolvedPeer:
        result = ContactsResolvedPeer::typeContactsResolvedPeer;
        break;
    default:
        result = ContactsResolvedPeer::typeContactsResolvedPeer;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactsResolvedPeerObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsResolvedPeer::typeContactsResolvedPeer:
        result = TypeContactsResolvedPeer;
        break;
    default:
        result = TypeContactsResolvedPeer;
        break;
    }

    return result;
}

void ContactsResolvedPeerObject::setCore(const ContactsResolvedPeer &core) {
    operator =(core);
}

ContactsResolvedPeer ContactsResolvedPeerObject::core() const {
    return m_core;
}

void ContactsResolvedPeerObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

