// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "botinlinemessageobject.h"

BotInlineMessageObject::BotInlineMessageObject(const BotInlineMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

BotInlineMessageObject::BotInlineMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

BotInlineMessageObject::~BotInlineMessageObject() {
}

void BotInlineMessageObject::setCaption(const QString &caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::caption() const {
    return m_core.caption();
}

void BotInlineMessageObject::setEntities(const QList<MessageEntity> &entities) {
    if(m_core.entities() == entities) return;
    m_core.setEntities(entities);
    Q_EMIT entitiesChanged();
    Q_EMIT coreChanged();
}

QList<MessageEntity> BotInlineMessageObject::entities() const {
    return m_core.entities();
}

void BotInlineMessageObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 BotInlineMessageObject::flags() const {
    return m_core.flags();
}

void BotInlineMessageObject::setMessage(const QString &message) {
    if(m_core.message() == message) return;
    m_core.setMessage(message);
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::message() const {
    return m_core.message();
}

void BotInlineMessageObject::setNoWebpage(bool noWebpage) {
    if(m_core.noWebpage() == noWebpage) return;
    m_core.setNoWebpage(noWebpage);
    Q_EMIT noWebpageChanged();
    Q_EMIT coreChanged();
}

bool BotInlineMessageObject::noWebpage() const {
    return m_core.noWebpage();
}

BotInlineMessageObject &BotInlineMessageObject::operator =(const BotInlineMessage &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT captionChanged();
    Q_EMIT entitiesChanged();
    Q_EMIT flagsChanged();
    Q_EMIT messageChanged();
    Q_EMIT noWebpageChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool BotInlineMessageObject::operator ==(const BotInlineMessage &b) const {
    return m_core == b;
}

void BotInlineMessageObject::setClassType(quint32 classType) {
    BotInlineMessage::BotInlineMessageType result;
    switch(classType) {
    case TypeBotInlineMessageMediaAuto:
        result = BotInlineMessage::typeBotInlineMessageMediaAuto;
        break;
    case TypeBotInlineMessageText:
        result = BotInlineMessage::typeBotInlineMessageText;
        break;
    default:
        result = BotInlineMessage::typeBotInlineMessageMediaAuto;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 BotInlineMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case BotInlineMessage::typeBotInlineMessageMediaAuto:
        result = TypeBotInlineMessageMediaAuto;
        break;
    case BotInlineMessage::typeBotInlineMessageText:
        result = TypeBotInlineMessageText;
        break;
    default:
        result = TypeBotInlineMessageMediaAuto;
        break;
    }

    return result;
}

void BotInlineMessageObject::setCore(const BotInlineMessage &core) {
    operator =(core);
}

BotInlineMessage BotInlineMessageObject::core() const {
    return m_core;
}

