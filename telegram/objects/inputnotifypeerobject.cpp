// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputnotifypeerobject.h"

InputNotifyPeerObject::InputNotifyPeerObject(const InputNotifyPeer &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core(core)
{
    m_peer = new InputPeerObject(m_core.peer(), this);
    connect(m_peer.data(), &InputPeerObject::coreChanged, this, &InputNotifyPeerObject::corePeerChanged);
}

InputNotifyPeerObject::InputNotifyPeerObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core()
{
    m_peer = new InputPeerObject(m_core.peer(), this);
    connect(m_peer.data(), &InputPeerObject::coreChanged, this, &InputNotifyPeerObject::corePeerChanged);
}

InputNotifyPeerObject::~InputNotifyPeerObject() {
}

void InputNotifyPeerObject::setPeer(InputPeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), &InputPeerObject::coreChanged, this, &InputNotifyPeerObject::corePeerChanged);
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

InputPeerObject*  InputNotifyPeerObject::peer() const {
    return m_peer;
}

InputNotifyPeerObject &InputNotifyPeerObject::operator =(const InputNotifyPeer &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_peer->setCore(b.peer());

    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputNotifyPeerObject::operator ==(const InputNotifyPeer &b) const {
    return m_core == b;
}

void InputNotifyPeerObject::setClassType(quint32 classType) {
    InputNotifyPeer::InputNotifyPeerType result;
    switch(classType) {
    case TypeInputNotifyPeer:
        result = InputNotifyPeer::typeInputNotifyPeer;
        break;
    case TypeInputNotifyUsers:
        result = InputNotifyPeer::typeInputNotifyUsers;
        break;
    case TypeInputNotifyChats:
        result = InputNotifyPeer::typeInputNotifyChats;
        break;
    case TypeInputNotifyAll:
        result = InputNotifyPeer::typeInputNotifyAll;
        break;
    default:
        result = InputNotifyPeer::typeInputNotifyPeer;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputNotifyPeerObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputNotifyPeer::typeInputNotifyPeer:
        result = TypeInputNotifyPeer;
        break;
    case InputNotifyPeer::typeInputNotifyUsers:
        result = TypeInputNotifyUsers;
        break;
    case InputNotifyPeer::typeInputNotifyChats:
        result = TypeInputNotifyChats;
        break;
    case InputNotifyPeer::typeInputNotifyAll:
        result = TypeInputNotifyAll;
        break;
    default:
        result = TypeInputNotifyPeer;
        break;
    }

    return result;
}

void InputNotifyPeerObject::setCore(const InputNotifyPeer &core) {
    operator =(core);
}

InputNotifyPeer InputNotifyPeerObject::core() const {
    return m_core;
}

void InputNotifyPeerObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

