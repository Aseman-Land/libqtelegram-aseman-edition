// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_PHOTOSPHOTOS
#define LQTG_TYPE_PHOTOSPHOTOS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QList>
#include "photo.h"
#include "user.h"

class LIBQTELEGRAMSHARED_EXPORT PhotosPhotos : public TelegramTypeObject
{
public:
    enum PhotosPhotosClassType {
        typePhotosPhotos = 0x8dca6aa5,
        typePhotosPhotosSlice = 0x15051f54
    };

    PhotosPhotos(PhotosPhotosClassType classType = typePhotosPhotos, InboundPkt *in = 0);
    PhotosPhotos(InboundPkt *in);
    PhotosPhotos(const Null&);
    virtual ~PhotosPhotos();

    void setCount(qint32 count);
    qint32 count() const;

    void setPhotos(const QList<Photo> &photos);
    QList<Photo> photos() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(PhotosPhotosClassType classType);
    PhotosPhotosClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static PhotosPhotos fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const PhotosPhotos &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_count;
    QList<Photo> m_photos;
    QList<User> m_users;
    PhotosPhotosClassType m_classType;
};

Q_DECLARE_METATYPE(PhotosPhotos)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const PhotosPhotos &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, PhotosPhotos &item);

inline PhotosPhotos::PhotosPhotos(PhotosPhotosClassType classType, InboundPkt *in) :
    m_count(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline PhotosPhotos::PhotosPhotos(InboundPkt *in) :
    m_count(0),
    m_classType(typePhotosPhotos)
{
    fetch(in);
}

inline PhotosPhotos::PhotosPhotos(const Null &null) :
    TelegramTypeObject(null),
    m_count(0),
    m_classType(typePhotosPhotos)
{
}

inline PhotosPhotos::~PhotosPhotos() {
}

inline void PhotosPhotos::setCount(qint32 count) {
    m_count = count;
}

inline qint32 PhotosPhotos::count() const {
    return m_count;
}

inline void PhotosPhotos::setPhotos(const QList<Photo> &photos) {
    m_photos = photos;
}

inline QList<Photo> PhotosPhotos::photos() const {
    return m_photos;
}

inline void PhotosPhotos::setUsers(const QList<User> &users) {
    m_users = users;
}

inline QList<User> PhotosPhotos::users() const {
    return m_users;
}

inline bool PhotosPhotos::operator ==(const PhotosPhotos &b) const {
    return m_classType == b.m_classType &&
           m_count == b.m_count &&
           m_photos == b.m_photos &&
           m_users == b.m_users;
}

inline void PhotosPhotos::setClassType(PhotosPhotos::PhotosPhotosClassType classType) {
    m_classType = classType;
}

inline PhotosPhotos::PhotosPhotosClassType PhotosPhotos::classType() const {
    return m_classType;
}

inline bool PhotosPhotos::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePhotosPhotos: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_photos_length = in->fetchInt();
        m_photos.clear();
        for (qint32 i = 0; i < m_photos_length; i++) {
            Photo type;
            type.fetch(in);
            m_photos.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<PhotosPhotosClassType>(x);
        return true;
    }
        break;
    
    case typePhotosPhotosSlice: {
        m_count = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_photos_length = in->fetchInt();
        m_photos.clear();
        for (qint32 i = 0; i < m_photos_length; i++) {
            Photo type;
            type.fetch(in);
            m_photos.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        m_classType = static_cast<PhotosPhotosClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool PhotosPhotos::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePhotosPhotos: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_photos.count());
        for (qint32 i = 0; i < m_photos.count(); i++) {
            m_photos[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;
    
    case typePhotosPhotosSlice: {
        out->appendInt(m_count);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_photos.count());
        for (qint32 i = 0; i < m_photos.count(); i++) {
            m_photos[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> PhotosPhotos::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePhotosPhotos: {
        result["classType"] = "PhotosPhotos::typePhotosPhotos";
        QList<QVariant> _photos;
        Q_FOREACH(const Photo &m__type, m_photos)
            _photos << m__type.toMap();
        result["photos"] = _photos;
        QList<QVariant> _users;
        Q_FOREACH(const User &m__type, m_users)
            _users << m__type.toMap();
        result["users"] = _users;
        return result;
    }
        break;
    
    case typePhotosPhotosSlice: {
        result["classType"] = "PhotosPhotos::typePhotosPhotosSlice";
        result["count"] = QVariant::fromValue<qint32>(count());
        QList<QVariant> _photos;
        Q_FOREACH(const Photo &m__type, m_photos)
            _photos << m__type.toMap();
        result["photos"] = _photos;
        QList<QVariant> _users;
        Q_FOREACH(const User &m__type, m_users)
            _users << m__type.toMap();
        result["users"] = _users;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline PhotosPhotos PhotosPhotos::fromMap(const QMap<QString, QVariant> &map) {
    PhotosPhotos result;
    if(map.value("classType").toString() == "PhotosPhotos::typePhotosPhotos") {
        result.setClassType(typePhotosPhotos);
        QList<QVariant> map_photos = map["photos"].toList();
        QList<Photo> _photos;
        Q_FOREACH(const QVariant &var, map_photos)
            _photos << Photo::fromMap(var.toMap());
        result.setPhotos(_photos);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        Q_FOREACH(const QVariant &var, map_users)
            _users << User::fromMap(var.toMap());
        result.setUsers(_users);
        return result;
    }
    if(map.value("classType").toString() == "PhotosPhotos::typePhotosPhotosSlice") {
        result.setClassType(typePhotosPhotosSlice);
        result.setCount( map.value("count").value<qint32>() );
        QList<QVariant> map_photos = map["photos"].toList();
        QList<Photo> _photos;
        Q_FOREACH(const QVariant &var, map_photos)
            _photos << Photo::fromMap(var.toMap());
        result.setPhotos(_photos);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        Q_FOREACH(const QVariant &var, map_users)
            _users << User::fromMap(var.toMap());
        result.setUsers(_users);
        return result;
    }
    return result;
}

inline QByteArray PhotosPhotos::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const PhotosPhotos &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PhotosPhotos::typePhotosPhotos:
        stream << item.photos();
        stream << item.users();
        break;
    case PhotosPhotos::typePhotosPhotosSlice:
        stream << item.count();
        stream << item.photos();
        stream << item.users();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, PhotosPhotos &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PhotosPhotos::PhotosPhotosClassType>(type));
    switch(type) {
    case PhotosPhotos::typePhotosPhotos: {
        QList<Photo> m_photos;
        stream >> m_photos;
        item.setPhotos(m_photos);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    case PhotosPhotos::typePhotosPhotosSlice: {
        qint32 m_count;
        stream >> m_count;
        item.setCount(m_count);
        QList<Photo> m_photos;
        stream >> m_photos;
        item.setPhotos(m_photos);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_PHOTOSPHOTOS
