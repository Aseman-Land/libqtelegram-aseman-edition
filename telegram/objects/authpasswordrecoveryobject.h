// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_AUTHPASSWORDRECOVERY_OBJECT
#define LQTG_TYPE_AUTHPASSWORDRECOVERY_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/authpasswordrecovery.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AuthPasswordRecoveryObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AuthPasswordRecoveryClassType)
    Q_PROPERTY(QString emailPattern READ emailPattern WRITE setEmailPattern NOTIFY emailPatternChanged)
    Q_PROPERTY(AuthPasswordRecovery core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AuthPasswordRecoveryClassType {
        TypeAuthPasswordRecovery
    };

    AuthPasswordRecoveryObject(const AuthPasswordRecovery &core, QObject *parent = 0);
    AuthPasswordRecoveryObject(QObject *parent = 0);
    virtual ~AuthPasswordRecoveryObject();

    void setEmailPattern(const QString &emailPattern);
    QString emailPattern() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AuthPasswordRecovery &core);
    AuthPasswordRecovery core() const;

    AuthPasswordRecoveryObject &operator =(const AuthPasswordRecovery &b);
    bool operator ==(const AuthPasswordRecovery &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void emailPatternChanged();

private Q_SLOTS:

private:
    AuthPasswordRecovery m_core;
};

inline AuthPasswordRecoveryObject::AuthPasswordRecoveryObject(const AuthPasswordRecovery &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AuthPasswordRecoveryObject::AuthPasswordRecoveryObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AuthPasswordRecoveryObject::~AuthPasswordRecoveryObject() {
}

inline void AuthPasswordRecoveryObject::setEmailPattern(const QString &emailPattern) {
    if(m_core.emailPattern() == emailPattern) return;
    m_core.setEmailPattern(emailPattern);
    Q_EMIT emailPatternChanged();
    Q_EMIT coreChanged();
}

inline QString AuthPasswordRecoveryObject::emailPattern() const {
    return m_core.emailPattern();
}

inline AuthPasswordRecoveryObject &AuthPasswordRecoveryObject::operator =(const AuthPasswordRecovery &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT emailPatternChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AuthPasswordRecoveryObject::operator ==(const AuthPasswordRecovery &b) const {
    return m_core == b;
}

inline void AuthPasswordRecoveryObject::setClassType(quint32 classType) {
    AuthPasswordRecovery::AuthPasswordRecoveryClassType result;
    switch(classType) {
    case TypeAuthPasswordRecovery:
        result = AuthPasswordRecovery::typeAuthPasswordRecovery;
        break;
    default:
        result = AuthPasswordRecovery::typeAuthPasswordRecovery;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AuthPasswordRecoveryObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthPasswordRecovery::typeAuthPasswordRecovery:
        result = TypeAuthPasswordRecovery;
        break;
    default:
        result = TypeAuthPasswordRecovery;
        break;
    }

    return result;
}

inline void AuthPasswordRecoveryObject::setCore(const AuthPasswordRecovery &core) {
    operator =(core);
}

inline AuthPasswordRecovery AuthPasswordRecoveryObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_AUTHPASSWORDRECOVERY_OBJECT
