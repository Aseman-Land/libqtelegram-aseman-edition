// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesallstickersobject.h"

MessagesAllStickersObject::MessagesAllStickersObject(const MessagesAllStickers &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesAllStickersObject::MessagesAllStickersObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesAllStickersObject::~MessagesAllStickersObject() {
}

void MessagesAllStickersObject::setHash(qint32 hash) {
    if(m_core.hash() == hash) return;
    m_core.setHash(hash);
    Q_EMIT hashChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesAllStickersObject::hash() const {
    return m_core.hash();
}

void MessagesAllStickersObject::setSets(const QList<StickerSet> &sets) {
    if(m_core.sets() == sets) return;
    m_core.setSets(sets);
    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
}

QList<StickerSet> MessagesAllStickersObject::sets() const {
    return m_core.sets();
}

MessagesAllStickersObject &MessagesAllStickersObject::operator =(const MessagesAllStickers &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT hashChanged();
    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesAllStickersObject::operator ==(const MessagesAllStickers &b) const {
    return m_core == b;
}

void MessagesAllStickersObject::setClassType(quint32 classType) {
    MessagesAllStickers::MessagesAllStickersType result;
    switch(classType) {
    case TypeMessagesAllStickersNotModified:
        result = MessagesAllStickers::typeMessagesAllStickersNotModified;
        break;
    case TypeMessagesAllStickers:
        result = MessagesAllStickers::typeMessagesAllStickers;
        break;
    default:
        result = MessagesAllStickers::typeMessagesAllStickersNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesAllStickersObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesAllStickers::typeMessagesAllStickersNotModified:
        result = TypeMessagesAllStickersNotModified;
        break;
    case MessagesAllStickers::typeMessagesAllStickers:
        result = TypeMessagesAllStickers;
        break;
    default:
        result = TypeMessagesAllStickersNotModified;
        break;
    }

    return result;
}

void MessagesAllStickersObject::setCore(const MessagesAllStickers &core) {
    operator =(core);
}

MessagesAllStickers MessagesAllStickersObject::core() const {
    return m_core;
}

