// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESBOTRESULTS
#define LQTG_TYPE_MESSAGESBOTRESULTS

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QString>
#include <QList>
#include "botinlineresult.h"
#include "inlinebotswitchpm.h"

class LIBQTELEGRAMSHARED_EXPORT MessagesBotResults : public TelegramTypeObject
{
public:
    enum MessagesBotResultsClassType {
        typeMessagesBotResults = 0x256709a6
    };

    MessagesBotResults(MessagesBotResultsClassType classType = typeMessagesBotResults, InboundPkt *in = 0);
    MessagesBotResults(InboundPkt *in);
    MessagesBotResults(const Null&);
    virtual ~MessagesBotResults();

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setGallery(bool gallery);
    bool gallery() const;

    void setNextOffset(const QString &nextOffset);
    QString nextOffset() const;

    void setQueryId(qint64 queryId);
    qint64 queryId() const;

    void setResults(const QList<BotInlineResult> &results);
    QList<BotInlineResult> results() const;

    void setSwitchPm(const InlineBotSwitchPM &switchPm);
    InlineBotSwitchPM switchPm() const;

    void setClassType(MessagesBotResultsClassType classType);
    MessagesBotResultsClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static MessagesBotResults fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const MessagesBotResults &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_flags;
    QString m_nextOffset;
    qint64 m_queryId;
    QList<BotInlineResult> m_results;
    InlineBotSwitchPM m_switchPm;
    MessagesBotResultsClassType m_classType;
};

Q_DECLARE_METATYPE(MessagesBotResults)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const MessagesBotResults &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, MessagesBotResults &item);

inline MessagesBotResults::MessagesBotResults(MessagesBotResultsClassType classType, InboundPkt *in) :
    m_flags(0),
    m_queryId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline MessagesBotResults::MessagesBotResults(InboundPkt *in) :
    m_flags(0),
    m_queryId(0),
    m_classType(typeMessagesBotResults)
{
    fetch(in);
}

inline MessagesBotResults::MessagesBotResults(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_queryId(0),
    m_classType(typeMessagesBotResults)
{
}

inline MessagesBotResults::~MessagesBotResults() {
}

inline void MessagesBotResults::setFlags(qint32 flags) {
    m_flags = flags;
}

inline qint32 MessagesBotResults::flags() const {
    return m_flags;
}

inline void MessagesBotResults::setGallery(bool gallery) {
    if(gallery) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

inline bool MessagesBotResults::gallery() const {
    return (m_flags & 1<<0);
}

inline void MessagesBotResults::setNextOffset(const QString &nextOffset) {
    m_nextOffset = nextOffset;
}

inline QString MessagesBotResults::nextOffset() const {
    return m_nextOffset;
}

inline void MessagesBotResults::setQueryId(qint64 queryId) {
    m_queryId = queryId;
}

inline qint64 MessagesBotResults::queryId() const {
    return m_queryId;
}

inline void MessagesBotResults::setResults(const QList<BotInlineResult> &results) {
    m_results = results;
}

inline QList<BotInlineResult> MessagesBotResults::results() const {
    return m_results;
}

inline void MessagesBotResults::setSwitchPm(const InlineBotSwitchPM &switchPm) {
    m_switchPm = switchPm;
}

inline InlineBotSwitchPM MessagesBotResults::switchPm() const {
    return m_switchPm;
}

inline bool MessagesBotResults::operator ==(const MessagesBotResults &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_nextOffset == b.m_nextOffset &&
           m_queryId == b.m_queryId &&
           m_results == b.m_results &&
           m_switchPm == b.m_switchPm;
}

inline void MessagesBotResults::setClassType(MessagesBotResults::MessagesBotResultsClassType classType) {
    m_classType = classType;
}

inline MessagesBotResults::MessagesBotResultsClassType MessagesBotResults::classType() const {
    return m_classType;
}

inline bool MessagesBotResults::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesBotResults: {
        m_flags = in->fetchInt();
        m_queryId = in->fetchLong();
        if(m_flags & 1<<1) {
            m_nextOffset = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_switchPm.fetch(in);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_results_length = in->fetchInt();
        m_results.clear();
        for (qint32 i = 0; i < m_results_length; i++) {
            BotInlineResult type;
            type.fetch(in);
            m_results.append(type);
        }
        m_classType = static_cast<MessagesBotResultsClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool MessagesBotResults::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesBotResults: {
        out->appendInt(m_flags);
        out->appendLong(m_queryId);
        out->appendQString(m_nextOffset);
        m_switchPm.push(out);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_results.count());
        for (qint32 i = 0; i < m_results.count(); i++) {
            m_results[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> MessagesBotResults::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessagesBotResults: {
        result["classType"] = "MessagesBotResults::typeMessagesBotResults";
        result["gallery"] = QVariant::fromValue<bool>(gallery());
        result["queryId"] = QVariant::fromValue<qint64>(queryId());
        result["nextOffset"] = QVariant::fromValue<QString>(nextOffset());
        result["switchPm"] = m_switchPm.toMap();
        QList<QVariant> _results;
        Q_FOREACH(const BotInlineResult &m__type, m_results)
            _results << m__type.toMap();
        result["results"] = _results;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline MessagesBotResults MessagesBotResults::fromMap(const QMap<QString, QVariant> &map) {
    MessagesBotResults result;
    if(map.value("classType").toString() == "MessagesBotResults::typeMessagesBotResults") {
        result.setClassType(typeMessagesBotResults);
        result.setGallery( map.value("gallery").value<bool>() );
        result.setQueryId( map.value("queryId").value<qint64>() );
        result.setNextOffset( map.value("nextOffset").value<QString>() );
        result.setSwitchPm( InlineBotSwitchPM::fromMap(map.value("switchPm").toMap()) );
        QList<QVariant> map_results = map["results"].toList();
        QList<BotInlineResult> _results;
        Q_FOREACH(const QVariant &var, map_results)
            _results << BotInlineResult::fromMap(var.toMap());
        result.setResults(_results);
        return result;
    }
    return result;
}

inline QByteArray MessagesBotResults::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const MessagesBotResults &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesBotResults::typeMessagesBotResults:
        stream << item.flags();
        stream << item.queryId();
        stream << item.nextOffset();
        stream << item.switchPm();
        stream << item.results();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, MessagesBotResults &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesBotResults::MessagesBotResultsClassType>(type));
    switch(type) {
    case MessagesBotResults::typeMessagesBotResults: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_query_id;
        stream >> m_query_id;
        item.setQueryId(m_query_id);
        QString m_next_offset;
        stream >> m_next_offset;
        item.setNextOffset(m_next_offset);
        InlineBotSwitchPM m_switch_pm;
        stream >> m_switch_pm;
        item.setSwitchPm(m_switch_pm);
        QList<BotInlineResult> m_results;
        stream >> m_results;
        item.setResults(m_results);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_MESSAGESBOTRESULTS
