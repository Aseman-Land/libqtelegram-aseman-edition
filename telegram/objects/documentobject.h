// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_DOCUMENT_OBJECT
#define LQTG_TYPE_DOCUMENT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/document.h"

#include <QPointer>
#include "photosizeobject.h"

class LIBQTELEGRAMSHARED_EXPORT DocumentObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(DocumentClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(QList<DocumentAttribute> attributes READ attributes WRITE setAttributes NOTIFY attributesChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(qint32 dcId READ dcId WRITE setDcId NOTIFY dcIdChanged)
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QString mimeType READ mimeType WRITE setMimeType NOTIFY mimeTypeChanged)
    Q_PROPERTY(qint32 size READ size WRITE setSize NOTIFY sizeChanged)
    Q_PROPERTY(PhotoSizeObject* thumb READ thumb WRITE setThumb NOTIFY thumbChanged)
    Q_PROPERTY(Document core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum DocumentClassType {
        TypeDocumentEmpty,
        TypeDocument
    };

    DocumentObject(const Document &core, QObject *parent = 0);
    DocumentObject(QObject *parent = 0);
    virtual ~DocumentObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setAttributes(const QList<DocumentAttribute> &attributes);
    QList<DocumentAttribute> attributes() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setDcId(qint32 dcId);
    qint32 dcId() const;

    void setId(qint64 id);
    qint64 id() const;

    void setMimeType(const QString &mimeType);
    QString mimeType() const;

    void setSize(qint32 size);
    qint32 size() const;

    void setThumb(PhotoSizeObject* thumb);
    PhotoSizeObject* thumb() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const Document &core);
    Document core() const;

    DocumentObject &operator =(const Document &b);
    bool operator ==(const Document &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void attributesChanged();
    void dateChanged();
    void dcIdChanged();
    void idChanged();
    void mimeTypeChanged();
    void sizeChanged();
    void thumbChanged();

private Q_SLOTS:
    void coreThumbChanged();

private:
    QPointer<PhotoSizeObject> m_thumb;
    Document m_core;
};

inline DocumentObject::DocumentObject(const Document &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_thumb(0),
    m_core(core)
{
    m_thumb = new PhotoSizeObject(m_core.thumb(), this);
    connect(m_thumb.data(), &PhotoSizeObject::coreChanged, this, &DocumentObject::coreThumbChanged);
}

inline DocumentObject::DocumentObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_thumb(0),
    m_core()
{
    m_thumb = new PhotoSizeObject(m_core.thumb(), this);
    connect(m_thumb.data(), &PhotoSizeObject::coreChanged, this, &DocumentObject::coreThumbChanged);
}

inline DocumentObject::~DocumentObject() {
}

inline void DocumentObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 DocumentObject::accessHash() const {
    return m_core.accessHash();
}

inline void DocumentObject::setAttributes(const QList<DocumentAttribute> &attributes) {
    if(m_core.attributes() == attributes) return;
    m_core.setAttributes(attributes);
    Q_EMIT attributesChanged();
    Q_EMIT coreChanged();
}

inline QList<DocumentAttribute> DocumentObject::attributes() const {
    return m_core.attributes();
}

inline void DocumentObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 DocumentObject::date() const {
    return m_core.date();
}

inline void DocumentObject::setDcId(qint32 dcId) {
    if(m_core.dcId() == dcId) return;
    m_core.setDcId(dcId);
    Q_EMIT dcIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 DocumentObject::dcId() const {
    return m_core.dcId();
}

inline void DocumentObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint64 DocumentObject::id() const {
    return m_core.id();
}

inline void DocumentObject::setMimeType(const QString &mimeType) {
    if(m_core.mimeType() == mimeType) return;
    m_core.setMimeType(mimeType);
    Q_EMIT mimeTypeChanged();
    Q_EMIT coreChanged();
}

inline QString DocumentObject::mimeType() const {
    return m_core.mimeType();
}

inline void DocumentObject::setSize(qint32 size) {
    if(m_core.size() == size) return;
    m_core.setSize(size);
    Q_EMIT sizeChanged();
    Q_EMIT coreChanged();
}

inline qint32 DocumentObject::size() const {
    return m_core.size();
}

inline void DocumentObject::setThumb(PhotoSizeObject* thumb) {
    if(m_thumb == thumb) return;
    if(m_thumb) delete m_thumb;
    m_thumb = thumb;
    if(m_thumb) {
        m_thumb->setParent(this);
        m_core.setThumb(m_thumb->core());
        connect(m_thumb.data(), &PhotoSizeObject::coreChanged, this, &DocumentObject::coreThumbChanged);
    }
    Q_EMIT thumbChanged();
    Q_EMIT coreChanged();
}

inline PhotoSizeObject*  DocumentObject::thumb() const {
    return m_thumb;
}

inline DocumentObject &DocumentObject::operator =(const Document &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_thumb->setCore(b.thumb());

    Q_EMIT accessHashChanged();
    Q_EMIT attributesChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcIdChanged();
    Q_EMIT idChanged();
    Q_EMIT mimeTypeChanged();
    Q_EMIT sizeChanged();
    Q_EMIT thumbChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool DocumentObject::operator ==(const Document &b) const {
    return m_core == b;
}

inline void DocumentObject::setClassType(quint32 classType) {
    Document::DocumentClassType result;
    switch(classType) {
    case TypeDocumentEmpty:
        result = Document::typeDocumentEmpty;
        break;
    case TypeDocument:
        result = Document::typeDocument;
        break;
    default:
        result = Document::typeDocumentEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 DocumentObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Document::typeDocumentEmpty:
        result = TypeDocumentEmpty;
        break;
    case Document::typeDocument:
        result = TypeDocument;
        break;
    default:
        result = TypeDocumentEmpty;
        break;
    }

    return result;
}

inline void DocumentObject::setCore(const Document &core) {
    operator =(core);
}

inline Document DocumentObject::core() const {
    return m_core;
}

inline void DocumentObject::coreThumbChanged() {
    if(m_core.thumb() == m_thumb->core()) return;
    m_core.setThumb(m_thumb->core());
    Q_EMIT thumbChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_DOCUMENT_OBJECT
