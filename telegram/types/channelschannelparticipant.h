// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHANNELSCHANNELPARTICIPANT
#define LQTG_TYPE_CHANNELSCHANNELPARTICIPANT

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "channelparticipant.h"
#include <QList>
#include "user.h"

class LIBQTELEGRAMSHARED_EXPORT ChannelsChannelParticipant : public TelegramTypeObject
{
public:
    enum ChannelsChannelParticipantClassType {
        typeChannelsChannelParticipant = 0xd0d9b163
    };

    ChannelsChannelParticipant(ChannelsChannelParticipantClassType classType = typeChannelsChannelParticipant, InboundPkt *in = 0);
    ChannelsChannelParticipant(InboundPkt *in);
    ChannelsChannelParticipant(const Null&);
    virtual ~ChannelsChannelParticipant();

    void setParticipant(const ChannelParticipant &participant);
    ChannelParticipant participant() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(ChannelsChannelParticipantClassType classType);
    ChannelsChannelParticipantClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ChannelsChannelParticipant fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ChannelsChannelParticipant &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    ChannelParticipant m_participant;
    QList<User> m_users;
    ChannelsChannelParticipantClassType m_classType;
};

Q_DECLARE_METATYPE(ChannelsChannelParticipant)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChannelsChannelParticipant &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChannelsChannelParticipant &item);

#endif // LQTG_TYPE_CHANNELSCHANNELPARTICIPANT
