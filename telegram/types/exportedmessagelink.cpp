// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "exportedmessagelink.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ExportedMessageLink::ExportedMessageLink(ExportedMessageLinkClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

ExportedMessageLink::ExportedMessageLink(InboundPkt *in) :
    m_classType(typeExportedMessageLink)
{
    fetch(in);
}

ExportedMessageLink::ExportedMessageLink(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeExportedMessageLink)
{
}

ExportedMessageLink::~ExportedMessageLink() {
}

void ExportedMessageLink::setLink(const QString &link) {
    m_link = link;
}

QString ExportedMessageLink::link() const {
    return m_link;
}

bool ExportedMessageLink::operator ==(const ExportedMessageLink &b) const {
    return m_classType == b.m_classType &&
           m_link == b.m_link;
}

void ExportedMessageLink::setClassType(ExportedMessageLink::ExportedMessageLinkClassType classType) {
    m_classType = classType;
}

ExportedMessageLink::ExportedMessageLinkClassType ExportedMessageLink::classType() const {
    return m_classType;
}

bool ExportedMessageLink::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeExportedMessageLink: {
        m_link = in->fetchQString();
        m_classType = static_cast<ExportedMessageLinkClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ExportedMessageLink::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeExportedMessageLink: {
        out->appendQString(m_link);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> ExportedMessageLink::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeExportedMessageLink: {
        result["classType"] = "ExportedMessageLink::typeExportedMessageLink";
        result["link"] = QVariant::fromValue<QString>(link());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

ExportedMessageLink ExportedMessageLink::fromMap(const QMap<QString, QVariant> &map) {
    ExportedMessageLink result;
    if(map.value("classType").toString() == "ExportedMessageLink::typeExportedMessageLink") {
        result.setClassType(typeExportedMessageLink);
        result.setLink( map.value("link").value<QString>() );
        return result;
    }
    return result;
}

QByteArray ExportedMessageLink::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ExportedMessageLink &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ExportedMessageLink::typeExportedMessageLink:
        stream << item.link();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ExportedMessageLink &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ExportedMessageLink::ExportedMessageLinkClassType>(type));
    switch(type) {
    case ExportedMessageLink::typeExportedMessageLink: {
        QString m_link;
        stream >> m_link;
        item.setLink(m_link);
    }
        break;
    }
    return stream;
}

