// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGERANGE
#define LQTG_TYPE_MESSAGERANGE

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>

class LIBQTELEGRAMSHARED_EXPORT MessageRange : public TelegramTypeObject
{
public:
    enum MessageRangeClassType {
        typeMessageRange = 0xae30253
    };

    MessageRange(MessageRangeClassType classType = typeMessageRange, InboundPkt *in = 0);
    MessageRange(InboundPkt *in);
    MessageRange(const Null&);
    virtual ~MessageRange();

    void setMaxId(qint32 maxId);
    qint32 maxId() const;

    void setMinId(qint32 minId);
    qint32 minId() const;

    void setClassType(MessageRangeClassType classType);
    MessageRangeClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static MessageRange fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const MessageRange &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_maxId;
    qint32 m_minId;
    MessageRangeClassType m_classType;
};

Q_DECLARE_METATYPE(MessageRange)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const MessageRange &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, MessageRange &item);

inline MessageRange::MessageRange(MessageRangeClassType classType, InboundPkt *in) :
    m_maxId(0),
    m_minId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline MessageRange::MessageRange(InboundPkt *in) :
    m_maxId(0),
    m_minId(0),
    m_classType(typeMessageRange)
{
    fetch(in);
}

inline MessageRange::MessageRange(const Null &null) :
    TelegramTypeObject(null),
    m_maxId(0),
    m_minId(0),
    m_classType(typeMessageRange)
{
}

inline MessageRange::~MessageRange() {
}

inline void MessageRange::setMaxId(qint32 maxId) {
    m_maxId = maxId;
}

inline qint32 MessageRange::maxId() const {
    return m_maxId;
}

inline void MessageRange::setMinId(qint32 minId) {
    m_minId = minId;
}

inline qint32 MessageRange::minId() const {
    return m_minId;
}

inline bool MessageRange::operator ==(const MessageRange &b) const {
    return m_classType == b.m_classType &&
           m_maxId == b.m_maxId &&
           m_minId == b.m_minId;
}

inline void MessageRange::setClassType(MessageRange::MessageRangeClassType classType) {
    m_classType = classType;
}

inline MessageRange::MessageRangeClassType MessageRange::classType() const {
    return m_classType;
}

inline bool MessageRange::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessageRange: {
        m_minId = in->fetchInt();
        m_maxId = in->fetchInt();
        m_classType = static_cast<MessageRangeClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool MessageRange::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessageRange: {
        out->appendInt(m_minId);
        out->appendInt(m_maxId);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> MessageRange::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeMessageRange: {
        result["classType"] = "MessageRange::typeMessageRange";
        result["minId"] = QVariant::fromValue<qint32>(minId());
        result["maxId"] = QVariant::fromValue<qint32>(maxId());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline MessageRange MessageRange::fromMap(const QMap<QString, QVariant> &map) {
    MessageRange result;
    if(map.value("classType").toString() == "MessageRange::typeMessageRange") {
        result.setClassType(typeMessageRange);
        result.setMinId( map.value("minId").value<qint32>() );
        result.setMaxId( map.value("maxId").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray MessageRange::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const MessageRange &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessageRange::typeMessageRange:
        stream << item.minId();
        stream << item.maxId();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, MessageRange &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessageRange::MessageRangeClassType>(type));
    switch(type) {
    case MessageRange::typeMessageRange: {
        qint32 m_min_id;
        stream >> m_min_id;
        item.setMinId(m_min_id);
        qint32 m_max_id;
        stream >> m_max_id;
        item.setMaxId(m_max_id);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_MESSAGERANGE
