// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "peersettings.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PeerSettings::PeerSettings(PeerSettingsType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PeerSettings::PeerSettings(InboundPkt *in) :
    m_flags(0),
    m_classType(typePeerSettings)
{
    fetch(in);
}

PeerSettings::PeerSettings(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typePeerSettings)
{
}

PeerSettings::~PeerSettings() {
}

void PeerSettings::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PeerSettings::flags() const {
    return m_flags;
}

void PeerSettings::setReportSpam(bool reportSpam) {
    if(reportSpam) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool PeerSettings::reportSpam() const {
    return (m_flags & 1<<0);
}

bool PeerSettings::operator ==(const PeerSettings &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags;
}

void PeerSettings::setClassType(PeerSettings::PeerSettingsType classType) {
    m_classType = classType;
}

PeerSettings::PeerSettingsType PeerSettings::classType() const {
    return m_classType;
}

bool PeerSettings::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePeerSettings: {
        m_flags = in->fetchInt();
        m_classType = static_cast<PeerSettingsType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PeerSettings::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePeerSettings: {
        out->appendInt(m_flags);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray PeerSettings::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PeerSettings &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PeerSettings::typePeerSettings:
        stream << item.flags();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PeerSettings &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PeerSettings::PeerSettingsType>(type));
    switch(type) {
    case PeerSettings::typePeerSettings: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
    }
        break;
    }
    return stream;
}

