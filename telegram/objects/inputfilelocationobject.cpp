// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputfilelocationobject.h"

InputFileLocationObject::InputFileLocationObject(const InputFileLocation &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputFileLocationObject::InputFileLocationObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputFileLocationObject::~InputFileLocationObject() {
}

void InputFileLocationObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 InputFileLocationObject::accessHash() const {
    return m_core.accessHash();
}

void InputFileLocationObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 InputFileLocationObject::id() const {
    return m_core.id();
}

void InputFileLocationObject::setLocalId(qint32 localId) {
    if(m_core.localId() == localId) return;
    m_core.setLocalId(localId);
    Q_EMIT localIdChanged();
    Q_EMIT coreChanged();
}

qint32 InputFileLocationObject::localId() const {
    return m_core.localId();
}

void InputFileLocationObject::setSecret(qint64 secret) {
    if(m_core.secret() == secret) return;
    m_core.setSecret(secret);
    Q_EMIT secretChanged();
    Q_EMIT coreChanged();
}

qint64 InputFileLocationObject::secret() const {
    return m_core.secret();
}

void InputFileLocationObject::setVolumeId(qint64 volumeId) {
    if(m_core.volumeId() == volumeId) return;
    m_core.setVolumeId(volumeId);
    Q_EMIT volumeIdChanged();
    Q_EMIT coreChanged();
}

qint64 InputFileLocationObject::volumeId() const {
    return m_core.volumeId();
}

InputFileLocationObject &InputFileLocationObject::operator =(const InputFileLocation &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT idChanged();
    Q_EMIT localIdChanged();
    Q_EMIT secretChanged();
    Q_EMIT volumeIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputFileLocationObject::operator ==(const InputFileLocation &b) const {
    return m_core == b;
}

void InputFileLocationObject::setClassType(quint32 classType) {
    InputFileLocation::InputFileLocationType result;
    switch(classType) {
    case TypeInputFileLocation:
        result = InputFileLocation::typeInputFileLocation;
        break;
    case TypeInputVideoFileLocation:
        result = InputFileLocation::typeInputVideoFileLocation;
        break;
    case TypeInputEncryptedFileLocation:
        result = InputFileLocation::typeInputEncryptedFileLocation;
        break;
    case TypeInputAudioFileLocation:
        result = InputFileLocation::typeInputAudioFileLocation;
        break;
    case TypeInputDocumentFileLocation:
        result = InputFileLocation::typeInputDocumentFileLocation;
        break;
    default:
        result = InputFileLocation::typeInputFileLocation;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputFileLocationObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputFileLocation::typeInputFileLocation:
        result = TypeInputFileLocation;
        break;
    case InputFileLocation::typeInputVideoFileLocation:
        result = TypeInputVideoFileLocation;
        break;
    case InputFileLocation::typeInputEncryptedFileLocation:
        result = TypeInputEncryptedFileLocation;
        break;
    case InputFileLocation::typeInputAudioFileLocation:
        result = TypeInputAudioFileLocation;
        break;
    case InputFileLocation::typeInputDocumentFileLocation:
        result = TypeInputDocumentFileLocation;
        break;
    default:
        result = TypeInputFileLocation;
        break;
    }

    return result;
}

void InputFileLocationObject::setCore(const InputFileLocation &core) {
    operator =(core);
}

InputFileLocation InputFileLocationObject::core() const {
    return m_core;
}

