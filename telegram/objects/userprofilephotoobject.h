// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_USERPROFILEPHOTO_OBJECT
#define LQTG_TYPE_USERPROFILEPHOTO_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/userprofilephoto.h"

#include <QPointer>
#include "filelocationobject.h"

class LIBQTELEGRAMSHARED_EXPORT UserProfilePhotoObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(UserProfilePhotoClassType)
    Q_PROPERTY(FileLocationObject* photoBig READ photoBig WRITE setPhotoBig NOTIFY photoBigChanged)
    Q_PROPERTY(qint64 photoId READ photoId WRITE setPhotoId NOTIFY photoIdChanged)
    Q_PROPERTY(FileLocationObject* photoSmall READ photoSmall WRITE setPhotoSmall NOTIFY photoSmallChanged)
    Q_PROPERTY(UserProfilePhoto core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum UserProfilePhotoClassType {
        TypeUserProfilePhotoEmpty,
        TypeUserProfilePhoto
    };

    UserProfilePhotoObject(const UserProfilePhoto &core, QObject *parent = 0);
    UserProfilePhotoObject(QObject *parent = 0);
    virtual ~UserProfilePhotoObject();

    void setPhotoBig(FileLocationObject* photoBig);
    FileLocationObject* photoBig() const;

    void setPhotoId(qint64 photoId);
    qint64 photoId() const;

    void setPhotoSmall(FileLocationObject* photoSmall);
    FileLocationObject* photoSmall() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const UserProfilePhoto &core);
    UserProfilePhoto core() const;

    UserProfilePhotoObject &operator =(const UserProfilePhoto &b);
    bool operator ==(const UserProfilePhoto &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void photoBigChanged();
    void photoIdChanged();
    void photoSmallChanged();

private Q_SLOTS:
    void corePhotoBigChanged();
    void corePhotoSmallChanged();

private:
    QPointer<FileLocationObject> m_photoBig;
    QPointer<FileLocationObject> m_photoSmall;
    UserProfilePhoto m_core;
};

inline UserProfilePhotoObject::UserProfilePhotoObject(const UserProfilePhoto &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_photoBig(0),
    m_photoSmall(0),
    m_core(core)
{
    m_photoBig = new FileLocationObject(m_core.photoBig(), this);
    connect(m_photoBig.data(), &FileLocationObject::coreChanged, this, &UserProfilePhotoObject::corePhotoBigChanged);
    m_photoSmall = new FileLocationObject(m_core.photoSmall(), this);
    connect(m_photoSmall.data(), &FileLocationObject::coreChanged, this, &UserProfilePhotoObject::corePhotoSmallChanged);
}

inline UserProfilePhotoObject::UserProfilePhotoObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_photoBig(0),
    m_photoSmall(0),
    m_core()
{
    m_photoBig = new FileLocationObject(m_core.photoBig(), this);
    connect(m_photoBig.data(), &FileLocationObject::coreChanged, this, &UserProfilePhotoObject::corePhotoBigChanged);
    m_photoSmall = new FileLocationObject(m_core.photoSmall(), this);
    connect(m_photoSmall.data(), &FileLocationObject::coreChanged, this, &UserProfilePhotoObject::corePhotoSmallChanged);
}

inline UserProfilePhotoObject::~UserProfilePhotoObject() {
}

inline void UserProfilePhotoObject::setPhotoBig(FileLocationObject* photoBig) {
    if(m_photoBig == photoBig) return;
    if(m_photoBig) delete m_photoBig;
    m_photoBig = photoBig;
    if(m_photoBig) {
        m_photoBig->setParent(this);
        m_core.setPhotoBig(m_photoBig->core());
        connect(m_photoBig.data(), &FileLocationObject::coreChanged, this, &UserProfilePhotoObject::corePhotoBigChanged);
    }
    Q_EMIT photoBigChanged();
    Q_EMIT coreChanged();
}

inline FileLocationObject*  UserProfilePhotoObject::photoBig() const {
    return m_photoBig;
}

inline void UserProfilePhotoObject::setPhotoId(qint64 photoId) {
    if(m_core.photoId() == photoId) return;
    m_core.setPhotoId(photoId);
    Q_EMIT photoIdChanged();
    Q_EMIT coreChanged();
}

inline qint64 UserProfilePhotoObject::photoId() const {
    return m_core.photoId();
}

inline void UserProfilePhotoObject::setPhotoSmall(FileLocationObject* photoSmall) {
    if(m_photoSmall == photoSmall) return;
    if(m_photoSmall) delete m_photoSmall;
    m_photoSmall = photoSmall;
    if(m_photoSmall) {
        m_photoSmall->setParent(this);
        m_core.setPhotoSmall(m_photoSmall->core());
        connect(m_photoSmall.data(), &FileLocationObject::coreChanged, this, &UserProfilePhotoObject::corePhotoSmallChanged);
    }
    Q_EMIT photoSmallChanged();
    Q_EMIT coreChanged();
}

inline FileLocationObject*  UserProfilePhotoObject::photoSmall() const {
    return m_photoSmall;
}

inline UserProfilePhotoObject &UserProfilePhotoObject::operator =(const UserProfilePhoto &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_photoBig->setCore(b.photoBig());
    m_photoSmall->setCore(b.photoSmall());

    Q_EMIT photoBigChanged();
    Q_EMIT photoIdChanged();
    Q_EMIT photoSmallChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool UserProfilePhotoObject::operator ==(const UserProfilePhoto &b) const {
    return m_core == b;
}

inline void UserProfilePhotoObject::setClassType(quint32 classType) {
    UserProfilePhoto::UserProfilePhotoClassType result;
    switch(classType) {
    case TypeUserProfilePhotoEmpty:
        result = UserProfilePhoto::typeUserProfilePhotoEmpty;
        break;
    case TypeUserProfilePhoto:
        result = UserProfilePhoto::typeUserProfilePhoto;
        break;
    default:
        result = UserProfilePhoto::typeUserProfilePhotoEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 UserProfilePhotoObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case UserProfilePhoto::typeUserProfilePhotoEmpty:
        result = TypeUserProfilePhotoEmpty;
        break;
    case UserProfilePhoto::typeUserProfilePhoto:
        result = TypeUserProfilePhoto;
        break;
    default:
        result = TypeUserProfilePhotoEmpty;
        break;
    }

    return result;
}

inline void UserProfilePhotoObject::setCore(const UserProfilePhoto &core) {
    operator =(core);
}

inline UserProfilePhoto UserProfilePhotoObject::core() const {
    return m_core;
}

inline void UserProfilePhotoObject::corePhotoBigChanged() {
    if(m_core.photoBig() == m_photoBig->core()) return;
    m_core.setPhotoBig(m_photoBig->core());
    Q_EMIT photoBigChanged();
    Q_EMIT coreChanged();
}

inline void UserProfilePhotoObject::corePhotoSmallChanged() {
    if(m_core.photoSmall() == m_photoSmall->core()) return;
    m_core.setPhotoSmall(m_photoSmall->core());
    Q_EMIT photoSmallChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_USERPROFILEPHOTO_OBJECT
