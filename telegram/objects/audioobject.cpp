// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "audioobject.h"

AudioObject::AudioObject(const Audio &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

AudioObject::AudioObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

AudioObject::~AudioObject() {
}

void AudioObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 AudioObject::accessHash() const {
    return m_core.accessHash();
}

void AudioObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 AudioObject::date() const {
    return m_core.date();
}

void AudioObject::setDcId(qint32 dcId) {
    if(m_core.dcId() == dcId) return;
    m_core.setDcId(dcId);
    Q_EMIT dcIdChanged();
    Q_EMIT coreChanged();
}

qint32 AudioObject::dcId() const {
    return m_core.dcId();
}

void AudioObject::setDuration(qint32 duration) {
    if(m_core.duration() == duration) return;
    m_core.setDuration(duration);
    Q_EMIT durationChanged();
    Q_EMIT coreChanged();
}

qint32 AudioObject::duration() const {
    return m_core.duration();
}

void AudioObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 AudioObject::id() const {
    return m_core.id();
}

void AudioObject::setMimeType(const QString &mimeType) {
    if(m_core.mimeType() == mimeType) return;
    m_core.setMimeType(mimeType);
    Q_EMIT mimeTypeChanged();
    Q_EMIT coreChanged();
}

QString AudioObject::mimeType() const {
    return m_core.mimeType();
}

void AudioObject::setSize(qint32 size) {
    if(m_core.size() == size) return;
    m_core.setSize(size);
    Q_EMIT sizeChanged();
    Q_EMIT coreChanged();
}

qint32 AudioObject::size() const {
    return m_core.size();
}

AudioObject &AudioObject::operator =(const Audio &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcIdChanged();
    Q_EMIT durationChanged();
    Q_EMIT idChanged();
    Q_EMIT mimeTypeChanged();
    Q_EMIT sizeChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool AudioObject::operator ==(const Audio &b) const {
    return m_core == b;
}

void AudioObject::setClassType(quint32 classType) {
    Audio::AudioType result;
    switch(classType) {
    case TypeAudioEmpty:
        result = Audio::typeAudioEmpty;
        break;
    case TypeAudio:
        result = Audio::typeAudio;
        break;
    default:
        result = Audio::typeAudioEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AudioObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Audio::typeAudioEmpty:
        result = TypeAudioEmpty;
        break;
    case Audio::typeAudio:
        result = TypeAudio;
        break;
    default:
        result = TypeAudioEmpty;
        break;
    }

    return result;
}

void AudioObject::setCore(const Audio &core) {
    operator =(core);
}

Audio AudioObject::core() const {
    return m_core;
}

