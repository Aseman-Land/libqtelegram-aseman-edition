// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_BOTINLINERESULT
#define LQTG_TYPE_BOTINLINERESULT

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QString>
#include "document.h"
#include <QtGlobal>
#include "photo.h"
#include "botinlinemessage.h"

class LIBQTELEGRAMSHARED_EXPORT BotInlineResult : public TelegramTypeObject
{
public:
    enum BotInlineResultClassType {
        typeBotInlineResult = 0x9bebaeb9,
        typeBotInlineMediaResult = 0x17db940b
    };

    BotInlineResult(BotInlineResultClassType classType = typeBotInlineResult, InboundPkt *in = 0);
    BotInlineResult(InboundPkt *in);
    BotInlineResult(const Null&);
    virtual ~BotInlineResult();

    void setContentType(const QString &contentType);
    QString contentType() const;

    void setContentUrl(const QString &contentUrl);
    QString contentUrl() const;

    void setDescription(const QString &description);
    QString description() const;

    void setDocument(const Document &document);
    Document document() const;

    void setDuration(qint32 duration);
    qint32 duration() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setH(qint32 h);
    qint32 h() const;

    void setId(const QString &id);
    QString id() const;

    void setPhoto(const Photo &photo);
    Photo photo() const;

    void setSendMessage(const BotInlineMessage &sendMessage);
    BotInlineMessage sendMessage() const;

    void setThumbUrl(const QString &thumbUrl);
    QString thumbUrl() const;

    void setTitle(const QString &title);
    QString title() const;

    void setType(const QString &type);
    QString type() const;

    void setUrl(const QString &url);
    QString url() const;

    void setW(qint32 w);
    qint32 w() const;

    void setClassType(BotInlineResultClassType classType);
    BotInlineResultClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static BotInlineResult fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const BotInlineResult &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_contentType;
    QString m_contentUrl;
    QString m_description;
    Document m_document;
    qint32 m_duration;
    qint32 m_flags;
    qint32 m_h;
    QString m_id;
    Photo m_photo;
    BotInlineMessage m_sendMessage;
    QString m_thumbUrl;
    QString m_title;
    QString m_type;
    QString m_url;
    qint32 m_w;
    BotInlineResultClassType m_classType;
};

Q_DECLARE_METATYPE(BotInlineResult)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const BotInlineResult &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, BotInlineResult &item);

inline BotInlineResult::BotInlineResult(BotInlineResultClassType classType, InboundPkt *in) :
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline BotInlineResult::BotInlineResult(InboundPkt *in) :
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(typeBotInlineResult)
{
    fetch(in);
}

inline BotInlineResult::BotInlineResult(const Null &null) :
    TelegramTypeObject(null),
    m_duration(0),
    m_flags(0),
    m_h(0),
    m_w(0),
    m_classType(typeBotInlineResult)
{
}

inline BotInlineResult::~BotInlineResult() {
}

inline void BotInlineResult::setContentType(const QString &contentType) {
    m_contentType = contentType;
}

inline QString BotInlineResult::contentType() const {
    return m_contentType;
}

inline void BotInlineResult::setContentUrl(const QString &contentUrl) {
    m_contentUrl = contentUrl;
}

inline QString BotInlineResult::contentUrl() const {
    return m_contentUrl;
}

inline void BotInlineResult::setDescription(const QString &description) {
    m_description = description;
}

inline QString BotInlineResult::description() const {
    return m_description;
}

inline void BotInlineResult::setDocument(const Document &document) {
    m_document = document;
}

inline Document BotInlineResult::document() const {
    return m_document;
}

inline void BotInlineResult::setDuration(qint32 duration) {
    m_duration = duration;
}

inline qint32 BotInlineResult::duration() const {
    return m_duration;
}

inline void BotInlineResult::setFlags(qint32 flags) {
    m_flags = flags;
}

inline qint32 BotInlineResult::flags() const {
    return m_flags;
}

inline void BotInlineResult::setH(qint32 h) {
    m_h = h;
}

inline qint32 BotInlineResult::h() const {
    return m_h;
}

inline void BotInlineResult::setId(const QString &id) {
    m_id = id;
}

inline QString BotInlineResult::id() const {
    return m_id;
}

inline void BotInlineResult::setPhoto(const Photo &photo) {
    m_photo = photo;
}

inline Photo BotInlineResult::photo() const {
    return m_photo;
}

inline void BotInlineResult::setSendMessage(const BotInlineMessage &sendMessage) {
    m_sendMessage = sendMessage;
}

inline BotInlineMessage BotInlineResult::sendMessage() const {
    return m_sendMessage;
}

inline void BotInlineResult::setThumbUrl(const QString &thumbUrl) {
    m_thumbUrl = thumbUrl;
}

inline QString BotInlineResult::thumbUrl() const {
    return m_thumbUrl;
}

inline void BotInlineResult::setTitle(const QString &title) {
    m_title = title;
}

inline QString BotInlineResult::title() const {
    return m_title;
}

inline void BotInlineResult::setType(const QString &type) {
    m_type = type;
}

inline QString BotInlineResult::type() const {
    return m_type;
}

inline void BotInlineResult::setUrl(const QString &url) {
    m_url = url;
}

inline QString BotInlineResult::url() const {
    return m_url;
}

inline void BotInlineResult::setW(qint32 w) {
    m_w = w;
}

inline qint32 BotInlineResult::w() const {
    return m_w;
}

inline bool BotInlineResult::operator ==(const BotInlineResult &b) const {
    return m_classType == b.m_classType &&
           m_contentType == b.m_contentType &&
           m_contentUrl == b.m_contentUrl &&
           m_description == b.m_description &&
           m_document == b.m_document &&
           m_duration == b.m_duration &&
           m_flags == b.m_flags &&
           m_h == b.m_h &&
           m_id == b.m_id &&
           m_photo == b.m_photo &&
           m_sendMessage == b.m_sendMessage &&
           m_thumbUrl == b.m_thumbUrl &&
           m_title == b.m_title &&
           m_type == b.m_type &&
           m_url == b.m_url &&
           m_w == b.m_w;
}

inline void BotInlineResult::setClassType(BotInlineResult::BotInlineResultClassType classType) {
    m_classType = classType;
}

inline BotInlineResult::BotInlineResultClassType BotInlineResult::classType() const {
    return m_classType;
}

inline bool BotInlineResult::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeBotInlineResult: {
        m_flags = in->fetchInt();
        m_id = in->fetchQString();
        m_type = in->fetchQString();
        if(m_flags & 1<<1) {
            m_title = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_description = in->fetchQString();
        }
        if(m_flags & 1<<3) {
            m_url = in->fetchQString();
        }
        if(m_flags & 1<<4) {
            m_thumbUrl = in->fetchQString();
        }
        if(m_flags & 1<<5) {
            m_contentUrl = in->fetchQString();
        }
        if(m_flags & 1<<5) {
            m_contentType = in->fetchQString();
        }
        if(m_flags & 1<<6) {
            m_w = in->fetchInt();
        }
        if(m_flags & 1<<6) {
            m_h = in->fetchInt();
        }
        if(m_flags & 1<<7) {
            m_duration = in->fetchInt();
        }
        m_sendMessage.fetch(in);
        m_classType = static_cast<BotInlineResultClassType>(x);
        return true;
    }
        break;
    
    case typeBotInlineMediaResult: {
        m_flags = in->fetchInt();
        m_id = in->fetchQString();
        m_type = in->fetchQString();
        if(m_flags & 1<<0) {
            m_photo.fetch(in);
        }
        if(m_flags & 1<<1) {
            m_document.fetch(in);
        }
        if(m_flags & 1<<2) {
            m_title = in->fetchQString();
        }
        if(m_flags & 1<<3) {
            m_description = in->fetchQString();
        }
        m_sendMessage.fetch(in);
        m_classType = static_cast<BotInlineResultClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool BotInlineResult::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeBotInlineResult: {
        out->appendInt(m_flags);
        out->appendQString(m_id);
        out->appendQString(m_type);
        out->appendQString(m_title);
        out->appendQString(m_description);
        out->appendQString(m_url);
        out->appendQString(m_thumbUrl);
        out->appendQString(m_contentUrl);
        out->appendQString(m_contentType);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendInt(m_duration);
        m_sendMessage.push(out);
        return true;
    }
        break;
    
    case typeBotInlineMediaResult: {
        out->appendInt(m_flags);
        out->appendQString(m_id);
        out->appendQString(m_type);
        m_photo.push(out);
        m_document.push(out);
        out->appendQString(m_title);
        out->appendQString(m_description);
        m_sendMessage.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> BotInlineResult::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeBotInlineResult: {
        result["classType"] = "BotInlineResult::typeBotInlineResult";
        result["id"] = QVariant::fromValue<QString>(id());
        result["type"] = QVariant::fromValue<QString>(type());
        result["title"] = QVariant::fromValue<QString>(title());
        result["description"] = QVariant::fromValue<QString>(description());
        result["url"] = QVariant::fromValue<QString>(url());
        result["thumbUrl"] = QVariant::fromValue<QString>(thumbUrl());
        result["contentUrl"] = QVariant::fromValue<QString>(contentUrl());
        result["contentType"] = QVariant::fromValue<QString>(contentType());
        result["w"] = QVariant::fromValue<qint32>(w());
        result["h"] = QVariant::fromValue<qint32>(h());
        result["duration"] = QVariant::fromValue<qint32>(duration());
        result["sendMessage"] = m_sendMessage.toMap();
        return result;
    }
        break;
    
    case typeBotInlineMediaResult: {
        result["classType"] = "BotInlineResult::typeBotInlineMediaResult";
        result["id"] = QVariant::fromValue<QString>(id());
        result["type"] = QVariant::fromValue<QString>(type());
        result["photo"] = m_photo.toMap();
        result["document"] = m_document.toMap();
        result["title"] = QVariant::fromValue<QString>(title());
        result["description"] = QVariant::fromValue<QString>(description());
        result["sendMessage"] = m_sendMessage.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline BotInlineResult BotInlineResult::fromMap(const QMap<QString, QVariant> &map) {
    BotInlineResult result;
    if(map.value("classType").toString() == "BotInlineResult::typeBotInlineResult") {
        result.setClassType(typeBotInlineResult);
        result.setId( map.value("id").value<QString>() );
        result.setType( map.value("type").value<QString>() );
        result.setTitle( map.value("title").value<QString>() );
        result.setDescription( map.value("description").value<QString>() );
        result.setUrl( map.value("url").value<QString>() );
        result.setThumbUrl( map.value("thumbUrl").value<QString>() );
        result.setContentUrl( map.value("contentUrl").value<QString>() );
        result.setContentType( map.value("contentType").value<QString>() );
        result.setW( map.value("w").value<qint32>() );
        result.setH( map.value("h").value<qint32>() );
        result.setDuration( map.value("duration").value<qint32>() );
        result.setSendMessage( BotInlineMessage::fromMap(map.value("sendMessage").toMap()) );
        return result;
    }
    if(map.value("classType").toString() == "BotInlineResult::typeBotInlineMediaResult") {
        result.setClassType(typeBotInlineMediaResult);
        result.setId( map.value("id").value<QString>() );
        result.setType( map.value("type").value<QString>() );
        result.setPhoto( Photo::fromMap(map.value("photo").toMap()) );
        result.setDocument( Document::fromMap(map.value("document").toMap()) );
        result.setTitle( map.value("title").value<QString>() );
        result.setDescription( map.value("description").value<QString>() );
        result.setSendMessage( BotInlineMessage::fromMap(map.value("sendMessage").toMap()) );
        return result;
    }
    return result;
}

inline QByteArray BotInlineResult::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const BotInlineResult &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case BotInlineResult::typeBotInlineResult:
        stream << item.flags();
        stream << item.id();
        stream << item.type();
        stream << item.title();
        stream << item.description();
        stream << item.url();
        stream << item.thumbUrl();
        stream << item.contentUrl();
        stream << item.contentType();
        stream << item.w();
        stream << item.h();
        stream << item.duration();
        stream << item.sendMessage();
        break;
    case BotInlineResult::typeBotInlineMediaResult:
        stream << item.flags();
        stream << item.id();
        stream << item.type();
        stream << item.photo();
        stream << item.document();
        stream << item.title();
        stream << item.description();
        stream << item.sendMessage();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, BotInlineResult &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<BotInlineResult::BotInlineResultClassType>(type));
    switch(type) {
    case BotInlineResult::typeBotInlineResult: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_id;
        stream >> m_id;
        item.setId(m_id);
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_description;
        stream >> m_description;
        item.setDescription(m_description);
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_thumb_url;
        stream >> m_thumb_url;
        item.setThumbUrl(m_thumb_url);
        QString m_content_url;
        stream >> m_content_url;
        item.setContentUrl(m_content_url);
        QString m_content_type;
        stream >> m_content_type;
        item.setContentType(m_content_type);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        BotInlineMessage m_send_message;
        stream >> m_send_message;
        item.setSendMessage(m_send_message);
    }
        break;
    case BotInlineResult::typeBotInlineMediaResult: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QString m_id;
        stream >> m_id;
        item.setId(m_id);
        QString m_type;
        stream >> m_type;
        item.setType(m_type);
        Photo m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        Document m_document;
        stream >> m_document;
        item.setDocument(m_document);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_description;
        stream >> m_description;
        item.setDescription(m_description);
        BotInlineMessage m_send_message;
        stream >> m_send_message;
        item.setSendMessage(m_send_message);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_BOTINLINERESULT
