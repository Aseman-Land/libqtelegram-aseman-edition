// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "user.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

User::User(UserType classType, InboundPkt *in) :
    m_accessHash(0),
    m_botInfoVersion(0),
    m_flags(0),
    m_id(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

User::User(InboundPkt *in) :
    m_accessHash(0),
    m_botInfoVersion(0),
    m_flags(0),
    m_id(0),
    m_classType(typeUserEmpty)
{
    fetch(in);
}

User::User(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_botInfoVersion(0),
    m_flags(0),
    m_id(0),
    m_classType(typeUserEmpty)
{
}

User::~User() {
}

void User::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 User::accessHash() const {
    return m_accessHash;
}

void User::setBot(bool bot) {
    if(bot) m_flags = (m_flags | (1<<14));
    else m_flags = (m_flags & ~(1<<14));
}

bool User::bot() const {
    return (m_flags & 1<<14);
}

void User::setBotChatHistory(bool botChatHistory) {
    if(botChatHistory) m_flags = (m_flags | (1<<15));
    else m_flags = (m_flags & ~(1<<15));
}

bool User::botChatHistory() const {
    return (m_flags & 1<<15);
}

void User::setBotInfoVersion(qint32 botInfoVersion) {
    m_botInfoVersion = botInfoVersion;
}

qint32 User::botInfoVersion() const {
    return m_botInfoVersion;
}

void User::setBotInlinePlaceholder(const QString &botInlinePlaceholder) {
    m_botInlinePlaceholder = botInlinePlaceholder;
}

QString User::botInlinePlaceholder() const {
    return m_botInlinePlaceholder;
}

void User::setBotNochats(bool botNochats) {
    if(botNochats) m_flags = (m_flags | (1<<16));
    else m_flags = (m_flags & ~(1<<16));
}

bool User::botNochats() const {
    return (m_flags & 1<<16);
}

void User::setContact(bool contact) {
    if(contact) m_flags = (m_flags | (1<<11));
    else m_flags = (m_flags & ~(1<<11));
}

bool User::contact() const {
    return (m_flags & 1<<11);
}

void User::setDeleted(bool deleted) {
    if(deleted) m_flags = (m_flags | (1<<13));
    else m_flags = (m_flags & ~(1<<13));
}

bool User::deleted() const {
    return (m_flags & 1<<13);
}

void User::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

QString User::firstName() const {
    return m_firstName;
}

void User::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 User::flags() const {
    return m_flags;
}

void User::setId(qint32 id) {
    m_id = id;
}

qint32 User::id() const {
    return m_id;
}

void User::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

QString User::lastName() const {
    return m_lastName;
}

void User::setMin(bool min) {
    if(min) m_flags = (m_flags | (1<<20));
    else m_flags = (m_flags & ~(1<<20));
}

bool User::min() const {
    return (m_flags & 1<<20);
}

void User::setMutualContact(bool mutualContact) {
    if(mutualContact) m_flags = (m_flags | (1<<12));
    else m_flags = (m_flags & ~(1<<12));
}

bool User::mutualContact() const {
    return (m_flags & 1<<12);
}

void User::setPhone(const QString &phone) {
    m_phone = phone;
}

QString User::phone() const {
    return m_phone;
}

void User::setPhoto(const UserProfilePhoto &photo) {
    m_photo = photo;
}

UserProfilePhoto User::photo() const {
    return m_photo;
}

void User::setRestricted(bool restricted) {
    if(restricted) m_flags = (m_flags | (1<<18));
    else m_flags = (m_flags & ~(1<<18));
}

bool User::restricted() const {
    return (m_flags & 1<<18);
}

void User::setRestrictionReason(const QString &restrictionReason) {
    m_restrictionReason = restrictionReason;
}

QString User::restrictionReason() const {
    return m_restrictionReason;
}

void User::setSelf(bool self) {
    if(self) m_flags = (m_flags | (1<<10));
    else m_flags = (m_flags & ~(1<<10));
}

bool User::self() const {
    return (m_flags & 1<<10);
}

void User::setStatus(const UserStatus &status) {
    m_status = status;
}

UserStatus User::status() const {
    return m_status;
}

void User::setUsername(const QString &username) {
    m_username = username;
}

QString User::username() const {
    return m_username;
}

void User::setVerified(bool verified) {
    if(verified) m_flags = (m_flags | (1<<17));
    else m_flags = (m_flags & ~(1<<17));
}

bool User::verified() const {
    return (m_flags & 1<<17);
}

bool User::operator ==(const User &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_botInfoVersion == b.m_botInfoVersion &&
           m_botInlinePlaceholder == b.m_botInlinePlaceholder &&
           m_firstName == b.m_firstName &&
           m_flags == b.m_flags &&
           m_id == b.m_id &&
           m_lastName == b.m_lastName &&
           m_phone == b.m_phone &&
           m_photo == b.m_photo &&
           m_restrictionReason == b.m_restrictionReason &&
           m_status == b.m_status &&
           m_username == b.m_username;
}

void User::setClassType(User::UserType classType) {
    m_classType = classType;
}

User::UserType User::classType() const {
    return m_classType;
}

bool User::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUserEmpty: {
        m_id = in->fetchInt();
        m_classType = static_cast<UserType>(x);
        return true;
    }
        break;
    
    case typeUser: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        if(m_flags & 1<<0) {
            m_accessHash = in->fetchLong();
        }
        if(m_flags & 1<<1) {
            m_firstName = in->fetchQString();
        }
        if(m_flags & 1<<2) {
            m_lastName = in->fetchQString();
        }
        if(m_flags & 1<<3) {
            m_username = in->fetchQString();
        }
        if(m_flags & 1<<4) {
            m_phone = in->fetchQString();
        }
        if(m_flags & 1<<5) {
            m_photo.fetch(in);
        }
        if(m_flags & 1<<6) {
            m_status.fetch(in);
        }
        if(m_flags & 1<<14) {
            m_botInfoVersion = in->fetchInt();
        }
        if(m_flags & 1<<18) {
            m_restrictionReason = in->fetchQString();
        }
        if(m_flags & 1<<19) {
            m_botInlinePlaceholder = in->fetchQString();
        }
        m_classType = static_cast<UserType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool User::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUserEmpty: {
        out->appendInt(m_id);
        return true;
    }
        break;
    
    case typeUser: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendLong(m_accessHash);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        out->appendQString(m_username);
        out->appendQString(m_phone);
        m_photo.push(out);
        m_status.push(out);
        out->appendInt(m_botInfoVersion);
        out->appendQString(m_restrictionReason);
        out->appendQString(m_botInlinePlaceholder);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QDataStream &operator<<(QDataStream &stream, const User &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case User::typeUserEmpty:
        stream << item.id();
        break;
    case User::typeUser:
        stream << item.flags();
        stream << item.id();
        stream << item.accessHash();
        stream << item.firstName();
        stream << item.lastName();
        stream << item.username();
        stream << item.phone();
        stream << item.photo();
        stream << item.status();
        stream << item.botInfoVersion();
        stream << item.restrictionReason();
        stream << item.botInlinePlaceholder();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, User &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<User::UserType>(type));
    switch(type) {
    case User::typeUserEmpty: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
    }
        break;
    case User::typeUser: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
        QString m_username;
        stream >> m_username;
        item.setUsername(m_username);
        QString m_phone;
        stream >> m_phone;
        item.setPhone(m_phone);
        UserProfilePhoto m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        UserStatus m_status;
        stream >> m_status;
        item.setStatus(m_status);
        qint32 m_bot_info_version;
        stream >> m_bot_info_version;
        item.setBotInfoVersion(m_bot_info_version);
        QString m_restriction_reason;
        stream >> m_restriction_reason;
        item.setRestrictionReason(m_restriction_reason);
        QString m_bot_inline_placeholder;
        stream >> m_bot_inline_placeholder;
        item.setBotInlinePlaceholder(m_bot_inline_placeholder);
    }
        break;
    }
    return stream;
}

