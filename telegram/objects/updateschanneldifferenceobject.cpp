// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "updateschanneldifferenceobject.h"

UpdatesChannelDifferenceObject::UpdatesChannelDifferenceObject(const UpdatesChannelDifference &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

UpdatesChannelDifferenceObject::UpdatesChannelDifferenceObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

UpdatesChannelDifferenceObject::~UpdatesChannelDifferenceObject() {
}

void UpdatesChannelDifferenceObject::setChats(const QList<Chat> &chats) {
    if(m_core.chats() == chats) return;
    m_core.setChats(chats);
    Q_EMIT chatsChanged();
    Q_EMIT coreChanged();
}

QList<Chat> UpdatesChannelDifferenceObject::chats() const {
    return m_core.chats();
}

void UpdatesChannelDifferenceObject::setFinal(bool final) {
    if(m_core.final() == final) return;
    m_core.setFinal(final);
    Q_EMIT finalChanged();
    Q_EMIT coreChanged();
}

bool UpdatesChannelDifferenceObject::final() const {
    return m_core.final();
}

void UpdatesChannelDifferenceObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdatesChannelDifferenceObject::flags() const {
    return m_core.flags();
}

void UpdatesChannelDifferenceObject::setMessages(const QList<Message> &messages) {
    if(m_core.messages() == messages) return;
    m_core.setMessages(messages);
    Q_EMIT messagesChanged();
    Q_EMIT coreChanged();
}

QList<Message> UpdatesChannelDifferenceObject::messages() const {
    return m_core.messages();
}

void UpdatesChannelDifferenceObject::setNewMessages(const QList<Message> &newMessages) {
    if(m_core.newMessages() == newMessages) return;
    m_core.setNewMessages(newMessages);
    Q_EMIT newMessagesChanged();
    Q_EMIT coreChanged();
}

QList<Message> UpdatesChannelDifferenceObject::newMessages() const {
    return m_core.newMessages();
}

void UpdatesChannelDifferenceObject::setOtherUpdates(const QList<Update> &otherUpdates) {
    if(m_core.otherUpdates() == otherUpdates) return;
    m_core.setOtherUpdates(otherUpdates);
    Q_EMIT otherUpdatesChanged();
    Q_EMIT coreChanged();
}

QList<Update> UpdatesChannelDifferenceObject::otherUpdates() const {
    return m_core.otherUpdates();
}

void UpdatesChannelDifferenceObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdatesChannelDifferenceObject::pts() const {
    return m_core.pts();
}

void UpdatesChannelDifferenceObject::setReadInboxMaxId(qint32 readInboxMaxId) {
    if(m_core.readInboxMaxId() == readInboxMaxId) return;
    m_core.setReadInboxMaxId(readInboxMaxId);
    Q_EMIT readInboxMaxIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdatesChannelDifferenceObject::readInboxMaxId() const {
    return m_core.readInboxMaxId();
}

void UpdatesChannelDifferenceObject::setTimeout(qint32 timeout) {
    if(m_core.timeout() == timeout) return;
    m_core.setTimeout(timeout);
    Q_EMIT timeoutChanged();
    Q_EMIT coreChanged();
}

qint32 UpdatesChannelDifferenceObject::timeout() const {
    return m_core.timeout();
}

void UpdatesChannelDifferenceObject::setTopImportantMessage(qint32 topImportantMessage) {
    if(m_core.topImportantMessage() == topImportantMessage) return;
    m_core.setTopImportantMessage(topImportantMessage);
    Q_EMIT topImportantMessageChanged();
    Q_EMIT coreChanged();
}

qint32 UpdatesChannelDifferenceObject::topImportantMessage() const {
    return m_core.topImportantMessage();
}

void UpdatesChannelDifferenceObject::setTopMessage(qint32 topMessage) {
    if(m_core.topMessage() == topMessage) return;
    m_core.setTopMessage(topMessage);
    Q_EMIT topMessageChanged();
    Q_EMIT coreChanged();
}

qint32 UpdatesChannelDifferenceObject::topMessage() const {
    return m_core.topMessage();
}

void UpdatesChannelDifferenceObject::setUnreadCount(qint32 unreadCount) {
    if(m_core.unreadCount() == unreadCount) return;
    m_core.setUnreadCount(unreadCount);
    Q_EMIT unreadCountChanged();
    Q_EMIT coreChanged();
}

qint32 UpdatesChannelDifferenceObject::unreadCount() const {
    return m_core.unreadCount();
}

void UpdatesChannelDifferenceObject::setUnreadImportantCount(qint32 unreadImportantCount) {
    if(m_core.unreadImportantCount() == unreadImportantCount) return;
    m_core.setUnreadImportantCount(unreadImportantCount);
    Q_EMIT unreadImportantCountChanged();
    Q_EMIT coreChanged();
}

qint32 UpdatesChannelDifferenceObject::unreadImportantCount() const {
    return m_core.unreadImportantCount();
}

void UpdatesChannelDifferenceObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> UpdatesChannelDifferenceObject::users() const {
    return m_core.users();
}

UpdatesChannelDifferenceObject &UpdatesChannelDifferenceObject::operator =(const UpdatesChannelDifference &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT chatsChanged();
    Q_EMIT finalChanged();
    Q_EMIT flagsChanged();
    Q_EMIT messagesChanged();
    Q_EMIT newMessagesChanged();
    Q_EMIT otherUpdatesChanged();
    Q_EMIT ptsChanged();
    Q_EMIT readInboxMaxIdChanged();
    Q_EMIT timeoutChanged();
    Q_EMIT topImportantMessageChanged();
    Q_EMIT topMessageChanged();
    Q_EMIT unreadCountChanged();
    Q_EMIT unreadImportantCountChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool UpdatesChannelDifferenceObject::operator ==(const UpdatesChannelDifference &b) const {
    return m_core == b;
}

void UpdatesChannelDifferenceObject::setClassType(quint32 classType) {
    UpdatesChannelDifference::UpdatesChannelDifferenceType result;
    switch(classType) {
    case TypeUpdatesChannelDifferenceEmpty:
        result = UpdatesChannelDifference::typeUpdatesChannelDifferenceEmpty;
        break;
    case TypeUpdatesChannelDifferenceTooLong:
        result = UpdatesChannelDifference::typeUpdatesChannelDifferenceTooLong;
        break;
    case TypeUpdatesChannelDifference:
        result = UpdatesChannelDifference::typeUpdatesChannelDifference;
        break;
    default:
        result = UpdatesChannelDifference::typeUpdatesChannelDifferenceEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 UpdatesChannelDifferenceObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case UpdatesChannelDifference::typeUpdatesChannelDifferenceEmpty:
        result = TypeUpdatesChannelDifferenceEmpty;
        break;
    case UpdatesChannelDifference::typeUpdatesChannelDifferenceTooLong:
        result = TypeUpdatesChannelDifferenceTooLong;
        break;
    case UpdatesChannelDifference::typeUpdatesChannelDifference:
        result = TypeUpdatesChannelDifference;
        break;
    default:
        result = TypeUpdatesChannelDifferenceEmpty;
        break;
    }

    return result;
}

void UpdatesChannelDifferenceObject::setCore(const UpdatesChannelDifference &core) {
    operator =(core);
}

UpdatesChannelDifference UpdatesChannelDifferenceObject::core() const {
    return m_core;
}

