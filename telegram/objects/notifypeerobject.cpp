// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "notifypeerobject.h"

NotifyPeerObject::NotifyPeerObject(const NotifyPeer &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core(core)
{
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &NotifyPeerObject::corePeerChanged);
}

NotifyPeerObject::NotifyPeerObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core()
{
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &NotifyPeerObject::corePeerChanged);
}

NotifyPeerObject::~NotifyPeerObject() {
}

void NotifyPeerObject::setPeer(PeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), &PeerObject::coreChanged, this, &NotifyPeerObject::corePeerChanged);
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

PeerObject*  NotifyPeerObject::peer() const {
    return m_peer;
}

NotifyPeerObject &NotifyPeerObject::operator =(const NotifyPeer &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_peer->setCore(b.peer());

    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool NotifyPeerObject::operator ==(const NotifyPeer &b) const {
    return m_core == b;
}

void NotifyPeerObject::setClassType(quint32 classType) {
    NotifyPeer::NotifyPeerType result;
    switch(classType) {
    case TypeNotifyPeer:
        result = NotifyPeer::typeNotifyPeer;
        break;
    case TypeNotifyUsers:
        result = NotifyPeer::typeNotifyUsers;
        break;
    case TypeNotifyChats:
        result = NotifyPeer::typeNotifyChats;
        break;
    case TypeNotifyAll:
        result = NotifyPeer::typeNotifyAll;
        break;
    default:
        result = NotifyPeer::typeNotifyPeer;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 NotifyPeerObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case NotifyPeer::typeNotifyPeer:
        result = TypeNotifyPeer;
        break;
    case NotifyPeer::typeNotifyUsers:
        result = TypeNotifyUsers;
        break;
    case NotifyPeer::typeNotifyChats:
        result = TypeNotifyChats;
        break;
    case NotifyPeer::typeNotifyAll:
        result = TypeNotifyAll;
        break;
    default:
        result = TypeNotifyPeer;
        break;
    }

    return result;
}

void NotifyPeerObject::setCore(const NotifyPeer &core) {
    operator =(core);
}

NotifyPeer NotifyPeerObject::core() const {
    return m_core;
}

void NotifyPeerObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

