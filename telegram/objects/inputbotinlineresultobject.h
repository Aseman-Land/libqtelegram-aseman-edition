// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTBOTINLINERESULT_OBJECT
#define LQTG_TYPE_INPUTBOTINLINERESULT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputbotinlineresult.h"

#include <QPointer>
#include "inputdocumentobject.h"
#include "inputphotoobject.h"
#include "inputbotinlinemessageobject.h"

class LIBQTELEGRAMSHARED_EXPORT InputBotInlineResultObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputBotInlineResultClassType)
    Q_PROPERTY(QString contentType READ contentType WRITE setContentType NOTIFY contentTypeChanged)
    Q_PROPERTY(QString contentUrl READ contentUrl WRITE setContentUrl NOTIFY contentUrlChanged)
    Q_PROPERTY(QString description READ description WRITE setDescription NOTIFY descriptionChanged)
    Q_PROPERTY(InputDocumentObject* document READ document WRITE setDocument NOTIFY documentChanged)
    Q_PROPERTY(qint32 duration READ duration WRITE setDuration NOTIFY durationChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(qint32 h READ h WRITE setH NOTIFY hChanged)
    Q_PROPERTY(QString id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(InputPhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(InputBotInlineMessageObject* sendMessage READ sendMessage WRITE setSendMessage NOTIFY sendMessageChanged)
    Q_PROPERTY(QString thumbUrl READ thumbUrl WRITE setThumbUrl NOTIFY thumbUrlChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(QString type READ type WRITE setType NOTIFY typeChanged)
    Q_PROPERTY(QString url READ url WRITE setUrl NOTIFY urlChanged)
    Q_PROPERTY(qint32 w READ w WRITE setW NOTIFY wChanged)
    Q_PROPERTY(InputBotInlineResult core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputBotInlineResultClassType {
        TypeInputBotInlineResult,
        TypeInputBotInlineResultPhoto,
        TypeInputBotInlineResultDocument
    };

    InputBotInlineResultObject(const InputBotInlineResult &core, QObject *parent = 0);
    InputBotInlineResultObject(QObject *parent = 0);
    virtual ~InputBotInlineResultObject();

    void setContentType(const QString &contentType);
    QString contentType() const;

    void setContentUrl(const QString &contentUrl);
    QString contentUrl() const;

    void setDescription(const QString &description);
    QString description() const;

    void setDocument(InputDocumentObject* document);
    InputDocumentObject* document() const;

    void setDuration(qint32 duration);
    qint32 duration() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setH(qint32 h);
    qint32 h() const;

    void setId(const QString &id);
    QString id() const;

    void setPhoto(InputPhotoObject* photo);
    InputPhotoObject* photo() const;

    void setSendMessage(InputBotInlineMessageObject* sendMessage);
    InputBotInlineMessageObject* sendMessage() const;

    void setThumbUrl(const QString &thumbUrl);
    QString thumbUrl() const;

    void setTitle(const QString &title);
    QString title() const;

    void setType(const QString &type);
    QString type() const;

    void setUrl(const QString &url);
    QString url() const;

    void setW(qint32 w);
    qint32 w() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputBotInlineResult &core);
    InputBotInlineResult core() const;

    InputBotInlineResultObject &operator =(const InputBotInlineResult &b);
    bool operator ==(const InputBotInlineResult &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void contentTypeChanged();
    void contentUrlChanged();
    void descriptionChanged();
    void documentChanged();
    void durationChanged();
    void flagsChanged();
    void hChanged();
    void idChanged();
    void photoChanged();
    void sendMessageChanged();
    void thumbUrlChanged();
    void titleChanged();
    void typeChanged();
    void urlChanged();
    void wChanged();

private Q_SLOTS:
    void coreDocumentChanged();
    void corePhotoChanged();
    void coreSendMessageChanged();

private:
    QPointer<InputDocumentObject> m_document;
    QPointer<InputPhotoObject> m_photo;
    QPointer<InputBotInlineMessageObject> m_sendMessage;
    InputBotInlineResult m_core;
};

#endif // LQTG_TYPE_INPUTBOTINLINERESULT_OBJECT
