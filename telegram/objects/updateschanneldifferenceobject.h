// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_UPDATESCHANNELDIFFERENCE_OBJECT
#define LQTG_TYPE_UPDATESCHANNELDIFFERENCE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/updateschanneldifference.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT UpdatesChannelDifferenceObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(UpdatesChannelDifferenceClassType)
    Q_PROPERTY(QList<Chat> chats READ chats WRITE setChats NOTIFY chatsChanged)
    Q_PROPERTY(bool final READ final WRITE setFinal NOTIFY finalChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(QList<Message> messages READ messages WRITE setMessages NOTIFY messagesChanged)
    Q_PROPERTY(QList<Message> newMessages READ newMessages WRITE setNewMessages NOTIFY newMessagesChanged)
    Q_PROPERTY(QList<Update> otherUpdates READ otherUpdates WRITE setOtherUpdates NOTIFY otherUpdatesChanged)
    Q_PROPERTY(qint32 pts READ pts WRITE setPts NOTIFY ptsChanged)
    Q_PROPERTY(qint32 readInboxMaxId READ readInboxMaxId WRITE setReadInboxMaxId NOTIFY readInboxMaxIdChanged)
    Q_PROPERTY(qint32 readOutboxMaxId READ readOutboxMaxId WRITE setReadOutboxMaxId NOTIFY readOutboxMaxIdChanged)
    Q_PROPERTY(qint32 timeout READ timeout WRITE setTimeout NOTIFY timeoutChanged)
    Q_PROPERTY(qint32 topMessage READ topMessage WRITE setTopMessage NOTIFY topMessageChanged)
    Q_PROPERTY(qint32 unreadCount READ unreadCount WRITE setUnreadCount NOTIFY unreadCountChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(UpdatesChannelDifference core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum UpdatesChannelDifferenceClassType {
        TypeUpdatesChannelDifferenceEmpty,
        TypeUpdatesChannelDifferenceTooLong,
        TypeUpdatesChannelDifference
    };

    UpdatesChannelDifferenceObject(const UpdatesChannelDifference &core, QObject *parent = 0);
    UpdatesChannelDifferenceObject(QObject *parent = 0);
    virtual ~UpdatesChannelDifferenceObject();

    void setChats(const QList<Chat> &chats);
    QList<Chat> chats() const;

    void setFinal(bool final);
    bool final() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setMessages(const QList<Message> &messages);
    QList<Message> messages() const;

    void setNewMessages(const QList<Message> &newMessages);
    QList<Message> newMessages() const;

    void setOtherUpdates(const QList<Update> &otherUpdates);
    QList<Update> otherUpdates() const;

    void setPts(qint32 pts);
    qint32 pts() const;

    void setReadInboxMaxId(qint32 readInboxMaxId);
    qint32 readInboxMaxId() const;

    void setReadOutboxMaxId(qint32 readOutboxMaxId);
    qint32 readOutboxMaxId() const;

    void setTimeout(qint32 timeout);
    qint32 timeout() const;

    void setTopMessage(qint32 topMessage);
    qint32 topMessage() const;

    void setUnreadCount(qint32 unreadCount);
    qint32 unreadCount() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const UpdatesChannelDifference &core);
    UpdatesChannelDifference core() const;

    UpdatesChannelDifferenceObject &operator =(const UpdatesChannelDifference &b);
    bool operator ==(const UpdatesChannelDifference &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatsChanged();
    void finalChanged();
    void flagsChanged();
    void messagesChanged();
    void newMessagesChanged();
    void otherUpdatesChanged();
    void ptsChanged();
    void readInboxMaxIdChanged();
    void readOutboxMaxIdChanged();
    void timeoutChanged();
    void topMessageChanged();
    void unreadCountChanged();
    void usersChanged();

private Q_SLOTS:

private:
    UpdatesChannelDifference m_core;
};

inline UpdatesChannelDifferenceObject::UpdatesChannelDifferenceObject(const UpdatesChannelDifference &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline UpdatesChannelDifferenceObject::UpdatesChannelDifferenceObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline UpdatesChannelDifferenceObject::~UpdatesChannelDifferenceObject() {
}

inline void UpdatesChannelDifferenceObject::setChats(const QList<Chat> &chats) {
    if(m_core.chats() == chats) return;
    m_core.setChats(chats);
    Q_EMIT chatsChanged();
    Q_EMIT coreChanged();
}

inline QList<Chat> UpdatesChannelDifferenceObject::chats() const {
    return m_core.chats();
}

inline void UpdatesChannelDifferenceObject::setFinal(bool final) {
    if(m_core.final() == final) return;
    m_core.setFinal(final);
    Q_EMIT finalChanged();
    Q_EMIT coreChanged();
}

inline bool UpdatesChannelDifferenceObject::final() const {
    return m_core.final();
}

inline void UpdatesChannelDifferenceObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesChannelDifferenceObject::flags() const {
    return m_core.flags();
}

inline void UpdatesChannelDifferenceObject::setMessages(const QList<Message> &messages) {
    if(m_core.messages() == messages) return;
    m_core.setMessages(messages);
    Q_EMIT messagesChanged();
    Q_EMIT coreChanged();
}

inline QList<Message> UpdatesChannelDifferenceObject::messages() const {
    return m_core.messages();
}

inline void UpdatesChannelDifferenceObject::setNewMessages(const QList<Message> &newMessages) {
    if(m_core.newMessages() == newMessages) return;
    m_core.setNewMessages(newMessages);
    Q_EMIT newMessagesChanged();
    Q_EMIT coreChanged();
}

inline QList<Message> UpdatesChannelDifferenceObject::newMessages() const {
    return m_core.newMessages();
}

inline void UpdatesChannelDifferenceObject::setOtherUpdates(const QList<Update> &otherUpdates) {
    if(m_core.otherUpdates() == otherUpdates) return;
    m_core.setOtherUpdates(otherUpdates);
    Q_EMIT otherUpdatesChanged();
    Q_EMIT coreChanged();
}

inline QList<Update> UpdatesChannelDifferenceObject::otherUpdates() const {
    return m_core.otherUpdates();
}

inline void UpdatesChannelDifferenceObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesChannelDifferenceObject::pts() const {
    return m_core.pts();
}

inline void UpdatesChannelDifferenceObject::setReadInboxMaxId(qint32 readInboxMaxId) {
    if(m_core.readInboxMaxId() == readInboxMaxId) return;
    m_core.setReadInboxMaxId(readInboxMaxId);
    Q_EMIT readInboxMaxIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesChannelDifferenceObject::readInboxMaxId() const {
    return m_core.readInboxMaxId();
}

inline void UpdatesChannelDifferenceObject::setReadOutboxMaxId(qint32 readOutboxMaxId) {
    if(m_core.readOutboxMaxId() == readOutboxMaxId) return;
    m_core.setReadOutboxMaxId(readOutboxMaxId);
    Q_EMIT readOutboxMaxIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesChannelDifferenceObject::readOutboxMaxId() const {
    return m_core.readOutboxMaxId();
}

inline void UpdatesChannelDifferenceObject::setTimeout(qint32 timeout) {
    if(m_core.timeout() == timeout) return;
    m_core.setTimeout(timeout);
    Q_EMIT timeoutChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesChannelDifferenceObject::timeout() const {
    return m_core.timeout();
}

inline void UpdatesChannelDifferenceObject::setTopMessage(qint32 topMessage) {
    if(m_core.topMessage() == topMessage) return;
    m_core.setTopMessage(topMessage);
    Q_EMIT topMessageChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesChannelDifferenceObject::topMessage() const {
    return m_core.topMessage();
}

inline void UpdatesChannelDifferenceObject::setUnreadCount(qint32 unreadCount) {
    if(m_core.unreadCount() == unreadCount) return;
    m_core.setUnreadCount(unreadCount);
    Q_EMIT unreadCountChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesChannelDifferenceObject::unreadCount() const {
    return m_core.unreadCount();
}

inline void UpdatesChannelDifferenceObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> UpdatesChannelDifferenceObject::users() const {
    return m_core.users();
}

inline UpdatesChannelDifferenceObject &UpdatesChannelDifferenceObject::operator =(const UpdatesChannelDifference &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT chatsChanged();
    Q_EMIT finalChanged();
    Q_EMIT flagsChanged();
    Q_EMIT messagesChanged();
    Q_EMIT newMessagesChanged();
    Q_EMIT otherUpdatesChanged();
    Q_EMIT ptsChanged();
    Q_EMIT readInboxMaxIdChanged();
    Q_EMIT readOutboxMaxIdChanged();
    Q_EMIT timeoutChanged();
    Q_EMIT topMessageChanged();
    Q_EMIT unreadCountChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool UpdatesChannelDifferenceObject::operator ==(const UpdatesChannelDifference &b) const {
    return m_core == b;
}

inline void UpdatesChannelDifferenceObject::setClassType(quint32 classType) {
    UpdatesChannelDifference::UpdatesChannelDifferenceClassType result;
    switch(classType) {
    case TypeUpdatesChannelDifferenceEmpty:
        result = UpdatesChannelDifference::typeUpdatesChannelDifferenceEmpty;
        break;
    case TypeUpdatesChannelDifferenceTooLong:
        result = UpdatesChannelDifference::typeUpdatesChannelDifferenceTooLong;
        break;
    case TypeUpdatesChannelDifference:
        result = UpdatesChannelDifference::typeUpdatesChannelDifference;
        break;
    default:
        result = UpdatesChannelDifference::typeUpdatesChannelDifferenceEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 UpdatesChannelDifferenceObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case UpdatesChannelDifference::typeUpdatesChannelDifferenceEmpty:
        result = TypeUpdatesChannelDifferenceEmpty;
        break;
    case UpdatesChannelDifference::typeUpdatesChannelDifferenceTooLong:
        result = TypeUpdatesChannelDifferenceTooLong;
        break;
    case UpdatesChannelDifference::typeUpdatesChannelDifference:
        result = TypeUpdatesChannelDifference;
        break;
    default:
        result = TypeUpdatesChannelDifferenceEmpty;
        break;
    }

    return result;
}

inline void UpdatesChannelDifferenceObject::setCore(const UpdatesChannelDifference &core) {
    operator =(core);
}

inline UpdatesChannelDifference UpdatesChannelDifferenceObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_UPDATESCHANNELDIFFERENCE_OBJECT
