// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_SENDMESSAGEACTION_OBJECT
#define LQTG_TYPE_SENDMESSAGEACTION_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/sendmessageaction.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT SendMessageActionObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(SendMessageActionClassType)
    Q_PROPERTY(qint32 progress READ progress WRITE setProgress NOTIFY progressChanged)
    Q_PROPERTY(SendMessageAction core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum SendMessageActionClassType {
        TypeSendMessageTypingAction,
        TypeSendMessageCancelAction,
        TypeSendMessageRecordVideoAction,
        TypeSendMessageUploadVideoAction,
        TypeSendMessageRecordAudioAction,
        TypeSendMessageUploadAudioAction,
        TypeSendMessageUploadPhotoAction,
        TypeSendMessageUploadDocumentAction,
        TypeSendMessageGeoLocationAction,
        TypeSendMessageChooseContactAction
    };

    SendMessageActionObject(const SendMessageAction &core, QObject *parent = 0);
    SendMessageActionObject(QObject *parent = 0);
    virtual ~SendMessageActionObject();

    void setProgress(qint32 progress);
    qint32 progress() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const SendMessageAction &core);
    SendMessageAction core() const;

    SendMessageActionObject &operator =(const SendMessageAction &b);
    bool operator ==(const SendMessageAction &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void progressChanged();

private Q_SLOTS:

private:
    SendMessageAction m_core;
};

inline SendMessageActionObject::SendMessageActionObject(const SendMessageAction &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline SendMessageActionObject::SendMessageActionObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline SendMessageActionObject::~SendMessageActionObject() {
}

inline void SendMessageActionObject::setProgress(qint32 progress) {
    if(m_core.progress() == progress) return;
    m_core.setProgress(progress);
    Q_EMIT progressChanged();
    Q_EMIT coreChanged();
}

inline qint32 SendMessageActionObject::progress() const {
    return m_core.progress();
}

inline SendMessageActionObject &SendMessageActionObject::operator =(const SendMessageAction &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT progressChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool SendMessageActionObject::operator ==(const SendMessageAction &b) const {
    return m_core == b;
}

inline void SendMessageActionObject::setClassType(quint32 classType) {
    SendMessageAction::SendMessageActionClassType result;
    switch(classType) {
    case TypeSendMessageTypingAction:
        result = SendMessageAction::typeSendMessageTypingAction;
        break;
    case TypeSendMessageCancelAction:
        result = SendMessageAction::typeSendMessageCancelAction;
        break;
    case TypeSendMessageRecordVideoAction:
        result = SendMessageAction::typeSendMessageRecordVideoAction;
        break;
    case TypeSendMessageUploadVideoAction:
        result = SendMessageAction::typeSendMessageUploadVideoAction;
        break;
    case TypeSendMessageRecordAudioAction:
        result = SendMessageAction::typeSendMessageRecordAudioAction;
        break;
    case TypeSendMessageUploadAudioAction:
        result = SendMessageAction::typeSendMessageUploadAudioAction;
        break;
    case TypeSendMessageUploadPhotoAction:
        result = SendMessageAction::typeSendMessageUploadPhotoAction;
        break;
    case TypeSendMessageUploadDocumentAction:
        result = SendMessageAction::typeSendMessageUploadDocumentAction;
        break;
    case TypeSendMessageGeoLocationAction:
        result = SendMessageAction::typeSendMessageGeoLocationAction;
        break;
    case TypeSendMessageChooseContactAction:
        result = SendMessageAction::typeSendMessageChooseContactAction;
        break;
    default:
        result = SendMessageAction::typeSendMessageTypingAction;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 SendMessageActionObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case SendMessageAction::typeSendMessageTypingAction:
        result = TypeSendMessageTypingAction;
        break;
    case SendMessageAction::typeSendMessageCancelAction:
        result = TypeSendMessageCancelAction;
        break;
    case SendMessageAction::typeSendMessageRecordVideoAction:
        result = TypeSendMessageRecordVideoAction;
        break;
    case SendMessageAction::typeSendMessageUploadVideoAction:
        result = TypeSendMessageUploadVideoAction;
        break;
    case SendMessageAction::typeSendMessageRecordAudioAction:
        result = TypeSendMessageRecordAudioAction;
        break;
    case SendMessageAction::typeSendMessageUploadAudioAction:
        result = TypeSendMessageUploadAudioAction;
        break;
    case SendMessageAction::typeSendMessageUploadPhotoAction:
        result = TypeSendMessageUploadPhotoAction;
        break;
    case SendMessageAction::typeSendMessageUploadDocumentAction:
        result = TypeSendMessageUploadDocumentAction;
        break;
    case SendMessageAction::typeSendMessageGeoLocationAction:
        result = TypeSendMessageGeoLocationAction;
        break;
    case SendMessageAction::typeSendMessageChooseContactAction:
        result = TypeSendMessageChooseContactAction;
        break;
    default:
        result = TypeSendMessageTypingAction;
        break;
    }

    return result;
}

inline void SendMessageActionObject::setCore(const SendMessageAction &core) {
    operator =(core);
}

inline SendMessageAction SendMessageActionObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_SENDMESSAGEACTION_OBJECT
