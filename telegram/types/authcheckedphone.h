// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_AUTHCHECKEDPHONE
#define LQTG_TYPE_AUTHCHECKEDPHONE

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>


class LIBQTELEGRAMSHARED_EXPORT AuthCheckedPhone : public TelegramTypeObject
{
public:
    enum AuthCheckedPhoneClassType {
        typeAuthCheckedPhone = 0x811ea28e
    };

    AuthCheckedPhone(AuthCheckedPhoneClassType classType = typeAuthCheckedPhone, InboundPkt *in = 0);
    AuthCheckedPhone(InboundPkt *in);
    AuthCheckedPhone(const Null&);
    virtual ~AuthCheckedPhone();

    void setPhoneRegistered(bool phoneRegistered);
    bool phoneRegistered() const;

    void setClassType(AuthCheckedPhoneClassType classType);
    AuthCheckedPhoneClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static AuthCheckedPhone fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const AuthCheckedPhone &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    bool m_phoneRegistered;
    AuthCheckedPhoneClassType m_classType;
};

Q_DECLARE_METATYPE(AuthCheckedPhone)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const AuthCheckedPhone &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, AuthCheckedPhone &item);

inline AuthCheckedPhone::AuthCheckedPhone(AuthCheckedPhoneClassType classType, InboundPkt *in) :
    m_phoneRegistered(false),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline AuthCheckedPhone::AuthCheckedPhone(InboundPkt *in) :
    m_phoneRegistered(false),
    m_classType(typeAuthCheckedPhone)
{
    fetch(in);
}

inline AuthCheckedPhone::AuthCheckedPhone(const Null &null) :
    TelegramTypeObject(null),
    m_phoneRegistered(false),
    m_classType(typeAuthCheckedPhone)
{
}

inline AuthCheckedPhone::~AuthCheckedPhone() {
}

inline void AuthCheckedPhone::setPhoneRegistered(bool phoneRegistered) {
    m_phoneRegistered = phoneRegistered;
}

inline bool AuthCheckedPhone::phoneRegistered() const {
    return m_phoneRegistered;
}

inline bool AuthCheckedPhone::operator ==(const AuthCheckedPhone &b) const {
    return m_classType == b.m_classType &&
           m_phoneRegistered == b.m_phoneRegistered;
}

inline void AuthCheckedPhone::setClassType(AuthCheckedPhone::AuthCheckedPhoneClassType classType) {
    m_classType = classType;
}

inline AuthCheckedPhone::AuthCheckedPhoneClassType AuthCheckedPhone::classType() const {
    return m_classType;
}

inline bool AuthCheckedPhone::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAuthCheckedPhone: {
        m_phoneRegistered = in->fetchBool();
        m_classType = static_cast<AuthCheckedPhoneClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool AuthCheckedPhone::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAuthCheckedPhone: {
        out->appendBool(m_phoneRegistered);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> AuthCheckedPhone::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeAuthCheckedPhone: {
        result["classType"] = "AuthCheckedPhone::typeAuthCheckedPhone";
        result["phoneRegistered"] = QVariant::fromValue<bool>(phoneRegistered());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline AuthCheckedPhone AuthCheckedPhone::fromMap(const QMap<QString, QVariant> &map) {
    AuthCheckedPhone result;
    if(map.value("classType").toString() == "AuthCheckedPhone::typeAuthCheckedPhone") {
        result.setClassType(typeAuthCheckedPhone);
        result.setPhoneRegistered( map.value("phoneRegistered").value<bool>() );
        return result;
    }
    return result;
}

inline QByteArray AuthCheckedPhone::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const AuthCheckedPhone &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AuthCheckedPhone::typeAuthCheckedPhone:
        stream << item.phoneRegistered();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, AuthCheckedPhone &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AuthCheckedPhone::AuthCheckedPhoneClassType>(type));
    switch(type) {
    case AuthCheckedPhone::typeAuthCheckedPhone: {
        bool m_phone_registered;
        stream >> m_phone_registered;
        item.setPhoneRegistered(m_phone_registered);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_AUTHCHECKEDPHONE
