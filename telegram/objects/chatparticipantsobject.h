// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHATPARTICIPANTS_OBJECT
#define LQTG_TYPE_CHATPARTICIPANTS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/chatparticipants.h"

#include <QPointer>
#include "chatparticipantobject.h"

class LIBQTELEGRAMSHARED_EXPORT ChatParticipantsObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ChatParticipantsClassType)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(QList<ChatParticipant> participants READ participants WRITE setParticipants NOTIFY participantsChanged)
    Q_PROPERTY(ChatParticipantObject* selfParticipant READ selfParticipant WRITE setSelfParticipant NOTIFY selfParticipantChanged)
    Q_PROPERTY(qint32 version READ version WRITE setVersion NOTIFY versionChanged)
    Q_PROPERTY(ChatParticipants core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ChatParticipantsClassType {
        TypeChatParticipantsForbidden,
        TypeChatParticipants
    };

    ChatParticipantsObject(const ChatParticipants &core, QObject *parent = 0);
    ChatParticipantsObject(QObject *parent = 0);
    virtual ~ChatParticipantsObject();

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setParticipants(const QList<ChatParticipant> &participants);
    QList<ChatParticipant> participants() const;

    void setSelfParticipant(ChatParticipantObject* selfParticipant);
    ChatParticipantObject* selfParticipant() const;

    void setVersion(qint32 version);
    qint32 version() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ChatParticipants &core);
    ChatParticipants core() const;

    ChatParticipantsObject &operator =(const ChatParticipants &b);
    bool operator ==(const ChatParticipants &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatIdChanged();
    void flagsChanged();
    void participantsChanged();
    void selfParticipantChanged();
    void versionChanged();

private Q_SLOTS:
    void coreSelfParticipantChanged();

private:
    QPointer<ChatParticipantObject> m_selfParticipant;
    ChatParticipants m_core;
};

inline ChatParticipantsObject::ChatParticipantsObject(const ChatParticipants &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_selfParticipant(0),
    m_core(core)
{
    m_selfParticipant = new ChatParticipantObject(m_core.selfParticipant(), this);
    connect(m_selfParticipant.data(), &ChatParticipantObject::coreChanged, this, &ChatParticipantsObject::coreSelfParticipantChanged);
}

inline ChatParticipantsObject::ChatParticipantsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_selfParticipant(0),
    m_core()
{
    m_selfParticipant = new ChatParticipantObject(m_core.selfParticipant(), this);
    connect(m_selfParticipant.data(), &ChatParticipantObject::coreChanged, this, &ChatParticipantsObject::coreSelfParticipantChanged);
}

inline ChatParticipantsObject::~ChatParticipantsObject() {
}

inline void ChatParticipantsObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 ChatParticipantsObject::chatId() const {
    return m_core.chatId();
}

inline void ChatParticipantsObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ChatParticipantsObject::flags() const {
    return m_core.flags();
}

inline void ChatParticipantsObject::setParticipants(const QList<ChatParticipant> &participants) {
    if(m_core.participants() == participants) return;
    m_core.setParticipants(participants);
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

inline QList<ChatParticipant> ChatParticipantsObject::participants() const {
    return m_core.participants();
}

inline void ChatParticipantsObject::setSelfParticipant(ChatParticipantObject* selfParticipant) {
    if(m_selfParticipant == selfParticipant) return;
    if(m_selfParticipant) delete m_selfParticipant;
    m_selfParticipant = selfParticipant;
    if(m_selfParticipant) {
        m_selfParticipant->setParent(this);
        m_core.setSelfParticipant(m_selfParticipant->core());
        connect(m_selfParticipant.data(), &ChatParticipantObject::coreChanged, this, &ChatParticipantsObject::coreSelfParticipantChanged);
    }
    Q_EMIT selfParticipantChanged();
    Q_EMIT coreChanged();
}

inline ChatParticipantObject*  ChatParticipantsObject::selfParticipant() const {
    return m_selfParticipant;
}

inline void ChatParticipantsObject::setVersion(qint32 version) {
    if(m_core.version() == version) return;
    m_core.setVersion(version);
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
}

inline qint32 ChatParticipantsObject::version() const {
    return m_core.version();
}

inline ChatParticipantsObject &ChatParticipantsObject::operator =(const ChatParticipants &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_selfParticipant->setCore(b.selfParticipant());

    Q_EMIT chatIdChanged();
    Q_EMIT flagsChanged();
    Q_EMIT participantsChanged();
    Q_EMIT selfParticipantChanged();
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ChatParticipantsObject::operator ==(const ChatParticipants &b) const {
    return m_core == b;
}

inline void ChatParticipantsObject::setClassType(quint32 classType) {
    ChatParticipants::ChatParticipantsClassType result;
    switch(classType) {
    case TypeChatParticipantsForbidden:
        result = ChatParticipants::typeChatParticipantsForbidden;
        break;
    case TypeChatParticipants:
        result = ChatParticipants::typeChatParticipants;
        break;
    default:
        result = ChatParticipants::typeChatParticipantsForbidden;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ChatParticipantsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChatParticipants::typeChatParticipantsForbidden:
        result = TypeChatParticipantsForbidden;
        break;
    case ChatParticipants::typeChatParticipants:
        result = TypeChatParticipants;
        break;
    default:
        result = TypeChatParticipantsForbidden;
        break;
    }

    return result;
}

inline void ChatParticipantsObject::setCore(const ChatParticipants &core) {
    operator =(core);
}

inline ChatParticipants ChatParticipantsObject::core() const {
    return m_core;
}

inline void ChatParticipantsObject::coreSelfParticipantChanged() {
    if(m_core.selfParticipant() == m_selfParticipant->core()) return;
    m_core.setSelfParticipant(m_selfParticipant->core());
    Q_EMIT selfParticipantChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_CHATPARTICIPANTS_OBJECT
