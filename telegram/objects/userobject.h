// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_USER_OBJECT
#define LQTG_TYPE_USER_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/user.h"

#include <QPointer>
#include "userprofilephotoobject.h"
#include "userstatusobject.h"

class LIBQTELEGRAMSHARED_EXPORT UserObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(UserType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(bool bot READ bot WRITE setBot NOTIFY botChanged)
    Q_PROPERTY(bool botChatHistory READ botChatHistory WRITE setBotChatHistory NOTIFY botChatHistoryChanged)
    Q_PROPERTY(qint32 botInfoVersion READ botInfoVersion WRITE setBotInfoVersion NOTIFY botInfoVersionChanged)
    Q_PROPERTY(QString botInlinePlaceholder READ botInlinePlaceholder WRITE setBotInlinePlaceholder NOTIFY botInlinePlaceholderChanged)
    Q_PROPERTY(bool botNochats READ botNochats WRITE setBotNochats NOTIFY botNochatsChanged)
    Q_PROPERTY(bool contact READ contact WRITE setContact NOTIFY contactChanged)
    Q_PROPERTY(bool deleted READ deleted WRITE setDeleted NOTIFY deletedChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(bool mutualContact READ mutualContact WRITE setMutualContact NOTIFY mutualContactChanged)
    Q_PROPERTY(QString phone READ phone WRITE setPhone NOTIFY phoneChanged)
    Q_PROPERTY(UserProfilePhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(bool restricted READ restricted WRITE setRestricted NOTIFY restrictedChanged)
    Q_PROPERTY(QString restrictionReason READ restrictionReason WRITE setRestrictionReason NOTIFY restrictionReasonChanged)
    Q_PROPERTY(bool self READ self WRITE setSelf NOTIFY selfChanged)
    Q_PROPERTY(UserStatusObject* status READ status WRITE setStatus NOTIFY statusChanged)
    Q_PROPERTY(QString username READ username WRITE setUsername NOTIFY usernameChanged)
    Q_PROPERTY(bool verified READ verified WRITE setVerified NOTIFY verifiedChanged)
    Q_PROPERTY(User core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum UserType {
        TypeUserEmpty,
        TypeUser
    };

    UserObject(const User &core, QObject *parent = 0);
    UserObject(QObject *parent = 0);
    virtual ~UserObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setBot(bool bot);
    bool bot() const;

    void setBotChatHistory(bool botChatHistory);
    bool botChatHistory() const;

    void setBotInfoVersion(qint32 botInfoVersion);
    qint32 botInfoVersion() const;

    void setBotInlinePlaceholder(const QString &botInlinePlaceholder);
    QString botInlinePlaceholder() const;

    void setBotNochats(bool botNochats);
    bool botNochats() const;

    void setContact(bool contact);
    bool contact() const;

    void setDeleted(bool deleted);
    bool deleted() const;

    void setFirstName(const QString &firstName);
    QString firstName() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setId(qint32 id);
    qint32 id() const;

    void setLastName(const QString &lastName);
    QString lastName() const;

    void setMutualContact(bool mutualContact);
    bool mutualContact() const;

    void setPhone(const QString &phone);
    QString phone() const;

    void setPhoto(UserProfilePhotoObject* photo);
    UserProfilePhotoObject* photo() const;

    void setRestricted(bool restricted);
    bool restricted() const;

    void setRestrictionReason(const QString &restrictionReason);
    QString restrictionReason() const;

    void setSelf(bool self);
    bool self() const;

    void setStatus(UserStatusObject* status);
    UserStatusObject* status() const;

    void setUsername(const QString &username);
    QString username() const;

    void setVerified(bool verified);
    bool verified() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const User &core);
    User core() const;

    UserObject &operator =(const User &b);
    bool operator ==(const User &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void botChanged();
    void botChatHistoryChanged();
    void botInfoVersionChanged();
    void botInlinePlaceholderChanged();
    void botNochatsChanged();
    void contactChanged();
    void deletedChanged();
    void firstNameChanged();
    void flagsChanged();
    void idChanged();
    void lastNameChanged();
    void mutualContactChanged();
    void phoneChanged();
    void photoChanged();
    void restrictedChanged();
    void restrictionReasonChanged();
    void selfChanged();
    void statusChanged();
    void usernameChanged();
    void verifiedChanged();

private Q_SLOTS:
    void corePhotoChanged();
    void coreStatusChanged();

private:
    QPointer<UserProfilePhotoObject> m_photo;
    QPointer<UserStatusObject> m_status;
    User m_core;
};

#endif // LQTG_TYPE_USER_OBJECT
