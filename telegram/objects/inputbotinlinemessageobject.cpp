// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputbotinlinemessageobject.h"

InputBotInlineMessageObject::InputBotInlineMessageObject(const InputBotInlineMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputBotInlineMessageObject::InputBotInlineMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputBotInlineMessageObject::~InputBotInlineMessageObject() {
}

void InputBotInlineMessageObject::setCaption(const QString &caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

QString InputBotInlineMessageObject::caption() const {
    return m_core.caption();
}

void InputBotInlineMessageObject::setEntities(const QList<MessageEntity> &entities) {
    if(m_core.entities() == entities) return;
    m_core.setEntities(entities);
    Q_EMIT entitiesChanged();
    Q_EMIT coreChanged();
}

QList<MessageEntity> InputBotInlineMessageObject::entities() const {
    return m_core.entities();
}

void InputBotInlineMessageObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 InputBotInlineMessageObject::flags() const {
    return m_core.flags();
}

void InputBotInlineMessageObject::setMessage(const QString &message) {
    if(m_core.message() == message) return;
    m_core.setMessage(message);
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

QString InputBotInlineMessageObject::message() const {
    return m_core.message();
}

void InputBotInlineMessageObject::setNoWebpage(bool noWebpage) {
    if(m_core.noWebpage() == noWebpage) return;
    m_core.setNoWebpage(noWebpage);
    Q_EMIT noWebpageChanged();
    Q_EMIT coreChanged();
}

bool InputBotInlineMessageObject::noWebpage() const {
    return m_core.noWebpage();
}

InputBotInlineMessageObject &InputBotInlineMessageObject::operator =(const InputBotInlineMessage &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT captionChanged();
    Q_EMIT entitiesChanged();
    Q_EMIT flagsChanged();
    Q_EMIT messageChanged();
    Q_EMIT noWebpageChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputBotInlineMessageObject::operator ==(const InputBotInlineMessage &b) const {
    return m_core == b;
}

void InputBotInlineMessageObject::setClassType(quint32 classType) {
    InputBotInlineMessage::InputBotInlineMessageType result;
    switch(classType) {
    case TypeInputBotInlineMessageMediaAuto:
        result = InputBotInlineMessage::typeInputBotInlineMessageMediaAuto;
        break;
    case TypeInputBotInlineMessageText:
        result = InputBotInlineMessage::typeInputBotInlineMessageText;
        break;
    default:
        result = InputBotInlineMessage::typeInputBotInlineMessageMediaAuto;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputBotInlineMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputBotInlineMessage::typeInputBotInlineMessageMediaAuto:
        result = TypeInputBotInlineMessageMediaAuto;
        break;
    case InputBotInlineMessage::typeInputBotInlineMessageText:
        result = TypeInputBotInlineMessageText;
        break;
    default:
        result = TypeInputBotInlineMessageMediaAuto;
        break;
    }

    return result;
}

void InputBotInlineMessageObject::setCore(const InputBotInlineMessage &core) {
    operator =(core);
}

InputBotInlineMessage InputBotInlineMessageObject::core() const {
    return m_core;
}

