// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ACCOUNTAUTHORIZATIONS_OBJECT
#define LQTG_TYPE_ACCOUNTAUTHORIZATIONS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/accountauthorizations.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AccountAuthorizationsObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AccountAuthorizationsClassType)
    Q_PROPERTY(QList<Authorization> authorizations READ authorizations WRITE setAuthorizations NOTIFY authorizationsChanged)
    Q_PROPERTY(AccountAuthorizations core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AccountAuthorizationsClassType {
        TypeAccountAuthorizations
    };

    AccountAuthorizationsObject(const AccountAuthorizations &core, QObject *parent = 0);
    AccountAuthorizationsObject(QObject *parent = 0);
    virtual ~AccountAuthorizationsObject();

    void setAuthorizations(const QList<Authorization> &authorizations);
    QList<Authorization> authorizations() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AccountAuthorizations &core);
    AccountAuthorizations core() const;

    AccountAuthorizationsObject &operator =(const AccountAuthorizations &b);
    bool operator ==(const AccountAuthorizations &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void authorizationsChanged();

private Q_SLOTS:

private:
    AccountAuthorizations m_core;
};

inline AccountAuthorizationsObject::AccountAuthorizationsObject(const AccountAuthorizations &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AccountAuthorizationsObject::AccountAuthorizationsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AccountAuthorizationsObject::~AccountAuthorizationsObject() {
}

inline void AccountAuthorizationsObject::setAuthorizations(const QList<Authorization> &authorizations) {
    if(m_core.authorizations() == authorizations) return;
    m_core.setAuthorizations(authorizations);
    Q_EMIT authorizationsChanged();
    Q_EMIT coreChanged();
}

inline QList<Authorization> AccountAuthorizationsObject::authorizations() const {
    return m_core.authorizations();
}

inline AccountAuthorizationsObject &AccountAuthorizationsObject::operator =(const AccountAuthorizations &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT authorizationsChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AccountAuthorizationsObject::operator ==(const AccountAuthorizations &b) const {
    return m_core == b;
}

inline void AccountAuthorizationsObject::setClassType(quint32 classType) {
    AccountAuthorizations::AccountAuthorizationsClassType result;
    switch(classType) {
    case TypeAccountAuthorizations:
        result = AccountAuthorizations::typeAccountAuthorizations;
        break;
    default:
        result = AccountAuthorizations::typeAccountAuthorizations;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AccountAuthorizationsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AccountAuthorizations::typeAccountAuthorizations:
        result = TypeAccountAuthorizations;
        break;
    default:
        result = TypeAccountAuthorizations;
        break;
    }

    return result;
}

inline void AccountAuthorizationsObject::setCore(const AccountAuthorizations &core) {
    operator =(core);
}

inline AccountAuthorizations AccountAuthorizationsObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_ACCOUNTAUTHORIZATIONS_OBJECT
