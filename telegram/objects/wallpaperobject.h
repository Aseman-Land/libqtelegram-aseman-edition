// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_WALLPAPER_OBJECT
#define LQTG_TYPE_WALLPAPER_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/wallpaper.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT WallPaperObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(WallPaperClassType)
    Q_PROPERTY(qint32 bgColor READ bgColor WRITE setBgColor NOTIFY bgColorChanged)
    Q_PROPERTY(qint32 color READ color WRITE setColor NOTIFY colorChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QList<PhotoSize> sizes READ sizes WRITE setSizes NOTIFY sizesChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(WallPaper core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum WallPaperClassType {
        TypeWallPaper,
        TypeWallPaperSolid
    };

    WallPaperObject(const WallPaper &core, QObject *parent = 0);
    WallPaperObject(QObject *parent = 0);
    virtual ~WallPaperObject();

    void setBgColor(qint32 bgColor);
    qint32 bgColor() const;

    void setColor(qint32 color);
    qint32 color() const;

    void setId(qint32 id);
    qint32 id() const;

    void setSizes(const QList<PhotoSize> &sizes);
    QList<PhotoSize> sizes() const;

    void setTitle(const QString &title);
    QString title() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const WallPaper &core);
    WallPaper core() const;

    WallPaperObject &operator =(const WallPaper &b);
    bool operator ==(const WallPaper &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void bgColorChanged();
    void colorChanged();
    void idChanged();
    void sizesChanged();
    void titleChanged();

private Q_SLOTS:

private:
    WallPaper m_core;
};

inline WallPaperObject::WallPaperObject(const WallPaper &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline WallPaperObject::WallPaperObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline WallPaperObject::~WallPaperObject() {
}

inline void WallPaperObject::setBgColor(qint32 bgColor) {
    if(m_core.bgColor() == bgColor) return;
    m_core.setBgColor(bgColor);
    Q_EMIT bgColorChanged();
    Q_EMIT coreChanged();
}

inline qint32 WallPaperObject::bgColor() const {
    return m_core.bgColor();
}

inline void WallPaperObject::setColor(qint32 color) {
    if(m_core.color() == color) return;
    m_core.setColor(color);
    Q_EMIT colorChanged();
    Q_EMIT coreChanged();
}

inline qint32 WallPaperObject::color() const {
    return m_core.color();
}

inline void WallPaperObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 WallPaperObject::id() const {
    return m_core.id();
}

inline void WallPaperObject::setSizes(const QList<PhotoSize> &sizes) {
    if(m_core.sizes() == sizes) return;
    m_core.setSizes(sizes);
    Q_EMIT sizesChanged();
    Q_EMIT coreChanged();
}

inline QList<PhotoSize> WallPaperObject::sizes() const {
    return m_core.sizes();
}

inline void WallPaperObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

inline QString WallPaperObject::title() const {
    return m_core.title();
}

inline WallPaperObject &WallPaperObject::operator =(const WallPaper &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT bgColorChanged();
    Q_EMIT colorChanged();
    Q_EMIT idChanged();
    Q_EMIT sizesChanged();
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool WallPaperObject::operator ==(const WallPaper &b) const {
    return m_core == b;
}

inline void WallPaperObject::setClassType(quint32 classType) {
    WallPaper::WallPaperClassType result;
    switch(classType) {
    case TypeWallPaper:
        result = WallPaper::typeWallPaper;
        break;
    case TypeWallPaperSolid:
        result = WallPaper::typeWallPaperSolid;
        break;
    default:
        result = WallPaper::typeWallPaper;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 WallPaperObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case WallPaper::typeWallPaper:
        result = TypeWallPaper;
        break;
    case WallPaper::typeWallPaperSolid:
        result = TypeWallPaperSolid;
        break;
    default:
        result = TypeWallPaper;
        break;
    }

    return result;
}

inline void WallPaperObject::setCore(const WallPaper &core) {
    operator =(core);
}

inline WallPaper WallPaperObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_WALLPAPER_OBJECT
