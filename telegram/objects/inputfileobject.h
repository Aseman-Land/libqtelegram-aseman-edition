// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTFILE_OBJECT
#define LQTG_TYPE_INPUTFILE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputfile.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputFileObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputFileClassType)
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QString md5Checksum READ md5Checksum WRITE setMd5Checksum NOTIFY md5ChecksumChanged)
    Q_PROPERTY(QString name READ name WRITE setName NOTIFY nameChanged)
    Q_PROPERTY(qint32 parts READ parts WRITE setParts NOTIFY partsChanged)
    Q_PROPERTY(InputFile core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputFileClassType {
        TypeInputFile,
        TypeInputFileBig
    };

    InputFileObject(const InputFile &core, QObject *parent = 0);
    InputFileObject(QObject *parent = 0);
    virtual ~InputFileObject();

    void setId(qint64 id);
    qint64 id() const;

    void setMd5Checksum(const QString &md5Checksum);
    QString md5Checksum() const;

    void setName(const QString &name);
    QString name() const;

    void setParts(qint32 parts);
    qint32 parts() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputFile &core);
    InputFile core() const;

    InputFileObject &operator =(const InputFile &b);
    bool operator ==(const InputFile &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void idChanged();
    void md5ChecksumChanged();
    void nameChanged();
    void partsChanged();

private Q_SLOTS:

private:
    InputFile m_core;
};

inline InputFileObject::InputFileObject(const InputFile &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputFileObject::InputFileObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputFileObject::~InputFileObject() {
}

inline void InputFileObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputFileObject::id() const {
    return m_core.id();
}

inline void InputFileObject::setMd5Checksum(const QString &md5Checksum) {
    if(m_core.md5Checksum() == md5Checksum) return;
    m_core.setMd5Checksum(md5Checksum);
    Q_EMIT md5ChecksumChanged();
    Q_EMIT coreChanged();
}

inline QString InputFileObject::md5Checksum() const {
    return m_core.md5Checksum();
}

inline void InputFileObject::setName(const QString &name) {
    if(m_core.name() == name) return;
    m_core.setName(name);
    Q_EMIT nameChanged();
    Q_EMIT coreChanged();
}

inline QString InputFileObject::name() const {
    return m_core.name();
}

inline void InputFileObject::setParts(qint32 parts) {
    if(m_core.parts() == parts) return;
    m_core.setParts(parts);
    Q_EMIT partsChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputFileObject::parts() const {
    return m_core.parts();
}

inline InputFileObject &InputFileObject::operator =(const InputFile &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT idChanged();
    Q_EMIT md5ChecksumChanged();
    Q_EMIT nameChanged();
    Q_EMIT partsChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputFileObject::operator ==(const InputFile &b) const {
    return m_core == b;
}

inline void InputFileObject::setClassType(quint32 classType) {
    InputFile::InputFileClassType result;
    switch(classType) {
    case TypeInputFile:
        result = InputFile::typeInputFile;
        break;
    case TypeInputFileBig:
        result = InputFile::typeInputFileBig;
        break;
    default:
        result = InputFile::typeInputFile;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputFileObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputFile::typeInputFile:
        result = TypeInputFile;
        break;
    case InputFile::typeInputFileBig:
        result = TypeInputFileBig;
        break;
    default:
        result = TypeInputFile;
        break;
    }

    return result;
}

inline void InputFileObject::setCore(const InputFile &core) {
    operator =(core);
}

inline InputFile InputFileObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTFILE_OBJECT
