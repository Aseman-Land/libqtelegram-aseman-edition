// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTCONTACT_OBJECT
#define LQTG_TYPE_INPUTCONTACT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputcontact.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputContactObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputContactClassType)
    Q_PROPERTY(qint64 clientId READ clientId WRITE setClientId NOTIFY clientIdChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(QString phone READ phone WRITE setPhone NOTIFY phoneChanged)
    Q_PROPERTY(InputContact core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputContactClassType {
        TypeInputPhoneContact
    };

    InputContactObject(const InputContact &core, QObject *parent = 0);
    InputContactObject(QObject *parent = 0);
    virtual ~InputContactObject();

    void setClientId(qint64 clientId);
    qint64 clientId() const;

    void setFirstName(const QString &firstName);
    QString firstName() const;

    void setLastName(const QString &lastName);
    QString lastName() const;

    void setPhone(const QString &phone);
    QString phone() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputContact &core);
    InputContact core() const;

    InputContactObject &operator =(const InputContact &b);
    bool operator ==(const InputContact &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void clientIdChanged();
    void firstNameChanged();
    void lastNameChanged();
    void phoneChanged();

private Q_SLOTS:

private:
    InputContact m_core;
};

inline InputContactObject::InputContactObject(const InputContact &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputContactObject::InputContactObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputContactObject::~InputContactObject() {
}

inline void InputContactObject::setClientId(qint64 clientId) {
    if(m_core.clientId() == clientId) return;
    m_core.setClientId(clientId);
    Q_EMIT clientIdChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputContactObject::clientId() const {
    return m_core.clientId();
}

inline void InputContactObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

inline QString InputContactObject::firstName() const {
    return m_core.firstName();
}

inline void InputContactObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

inline QString InputContactObject::lastName() const {
    return m_core.lastName();
}

inline void InputContactObject::setPhone(const QString &phone) {
    if(m_core.phone() == phone) return;
    m_core.setPhone(phone);
    Q_EMIT phoneChanged();
    Q_EMIT coreChanged();
}

inline QString InputContactObject::phone() const {
    return m_core.phone();
}

inline InputContactObject &InputContactObject::operator =(const InputContact &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT clientIdChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT phoneChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputContactObject::operator ==(const InputContact &b) const {
    return m_core == b;
}

inline void InputContactObject::setClassType(quint32 classType) {
    InputContact::InputContactClassType result;
    switch(classType) {
    case TypeInputPhoneContact:
        result = InputContact::typeInputPhoneContact;
        break;
    default:
        result = InputContact::typeInputPhoneContact;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputContactObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputContact::typeInputPhoneContact:
        result = TypeInputPhoneContact;
        break;
    default:
        result = TypeInputPhoneContact;
        break;
    }

    return result;
}

inline void InputContactObject::setCore(const InputContact &core) {
    operator =(core);
}

inline InputContact InputContactObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTCONTACT_OBJECT
