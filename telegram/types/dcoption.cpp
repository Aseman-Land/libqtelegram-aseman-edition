// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "dcoption.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

DcOption::DcOption(DcOptionClassType classType, InboundPkt *in) :
    m_flags(0),
    m_id(0),
    m_port(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

DcOption::DcOption(InboundPkt *in) :
    m_flags(0),
    m_id(0),
    m_port(0),
    m_classType(typeDcOption)
{
    fetch(in);
}

DcOption::DcOption(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_id(0),
    m_port(0),
    m_classType(typeDcOption)
{
}

DcOption::~DcOption() {
}

void DcOption::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 DcOption::flags() const {
    return m_flags;
}

void DcOption::setId(qint32 id) {
    m_id = id;
}

qint32 DcOption::id() const {
    return m_id;
}

void DcOption::setIpAddress(const QString &ipAddress) {
    m_ipAddress = ipAddress;
}

QString DcOption::ipAddress() const {
    return m_ipAddress;
}

void DcOption::setIpv6(bool ipv6) {
    if(ipv6) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool DcOption::ipv6() const {
    return (m_flags & 1<<0);
}

void DcOption::setMediaOnly(bool mediaOnly) {
    if(mediaOnly) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool DcOption::mediaOnly() const {
    return (m_flags & 1<<1);
}

void DcOption::setPort(qint32 port) {
    m_port = port;
}

qint32 DcOption::port() const {
    return m_port;
}

void DcOption::setTcpoOnly(bool tcpoOnly) {
    if(tcpoOnly) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

bool DcOption::tcpoOnly() const {
    return (m_flags & 1<<2);
}

bool DcOption::operator ==(const DcOption &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_id == b.m_id &&
           m_ipAddress == b.m_ipAddress &&
           m_port == b.m_port;
}

void DcOption::setClassType(DcOption::DcOptionClassType classType) {
    m_classType = classType;
}

DcOption::DcOptionClassType DcOption::classType() const {
    return m_classType;
}

bool DcOption::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDcOption: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_ipAddress = in->fetchQString();
        m_port = in->fetchInt();
        m_classType = static_cast<DcOptionClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool DcOption::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDcOption: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendQString(m_ipAddress);
        out->appendInt(m_port);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray DcOption::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const DcOption &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case DcOption::typeDcOption:
        stream << item.flags();
        stream << item.id();
        stream << item.ipAddress();
        stream << item.port();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, DcOption &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<DcOption::DcOptionClassType>(type));
    switch(type) {
    case DcOption::typeDcOption: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        QString m_ip_address;
        stream >> m_ip_address;
        item.setIpAddress(m_ip_address);
        qint32 m_port;
        stream >> m_port;
        item.setPort(m_port);
    }
        break;
    }
    return stream;
}

