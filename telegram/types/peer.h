// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_PEER
#define LQTG_TYPE_PEER

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>

class LIBQTELEGRAMSHARED_EXPORT Peer : public TelegramTypeObject
{
public:
    enum PeerClassType {
        typePeerUser = 0x9db1bc6d,
        typePeerChat = 0xbad0e5bb,
        typePeerChannel = 0xbddde532
    };

    Peer(PeerClassType classType = typePeerUser, InboundPkt *in = 0);
    Peer(InboundPkt *in);
    Peer(const Null&);
    virtual ~Peer();

    void setChannelId(qint32 channelId);
    qint32 channelId() const;

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(PeerClassType classType);
    PeerClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static Peer fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const Peer &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_channelId;
    qint32 m_chatId;
    qint32 m_userId;
    PeerClassType m_classType;
};

Q_DECLARE_METATYPE(Peer)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const Peer &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, Peer &item);

inline Peer::Peer(PeerClassType classType, InboundPkt *in) :
    m_channelId(0),
    m_chatId(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline Peer::Peer(InboundPkt *in) :
    m_channelId(0),
    m_chatId(0),
    m_userId(0),
    m_classType(typePeerUser)
{
    fetch(in);
}

inline Peer::Peer(const Null &null) :
    TelegramTypeObject(null),
    m_channelId(0),
    m_chatId(0),
    m_userId(0),
    m_classType(typePeerUser)
{
}

inline Peer::~Peer() {
}

inline void Peer::setChannelId(qint32 channelId) {
    m_channelId = channelId;
}

inline qint32 Peer::channelId() const {
    return m_channelId;
}

inline void Peer::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

inline qint32 Peer::chatId() const {
    return m_chatId;
}

inline void Peer::setUserId(qint32 userId) {
    m_userId = userId;
}

inline qint32 Peer::userId() const {
    return m_userId;
}

inline bool Peer::operator ==(const Peer &b) const {
    return m_classType == b.m_classType &&
           m_channelId == b.m_channelId &&
           m_chatId == b.m_chatId &&
           m_userId == b.m_userId;
}

inline void Peer::setClassType(Peer::PeerClassType classType) {
    m_classType = classType;
}

inline Peer::PeerClassType Peer::classType() const {
    return m_classType;
}

inline bool Peer::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePeerUser: {
        m_userId = in->fetchInt();
        m_classType = static_cast<PeerClassType>(x);
        return true;
    }
        break;
    
    case typePeerChat: {
        m_chatId = in->fetchInt();
        m_classType = static_cast<PeerClassType>(x);
        return true;
    }
        break;
    
    case typePeerChannel: {
        m_channelId = in->fetchInt();
        m_classType = static_cast<PeerClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool Peer::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePeerUser: {
        out->appendInt(m_userId);
        return true;
    }
        break;
    
    case typePeerChat: {
        out->appendInt(m_chatId);
        return true;
    }
        break;
    
    case typePeerChannel: {
        out->appendInt(m_channelId);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> Peer::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typePeerUser: {
        result["classType"] = "Peer::typePeerUser";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        return result;
    }
        break;
    
    case typePeerChat: {
        result["classType"] = "Peer::typePeerChat";
        result["chatId"] = QVariant::fromValue<qint32>(chatId());
        return result;
    }
        break;
    
    case typePeerChannel: {
        result["classType"] = "Peer::typePeerChannel";
        result["channelId"] = QVariant::fromValue<qint32>(channelId());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline Peer Peer::fromMap(const QMap<QString, QVariant> &map) {
    Peer result;
    if(map.value("classType").toString() == "Peer::typePeerUser") {
        result.setClassType(typePeerUser);
        result.setUserId( map.value("userId").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "Peer::typePeerChat") {
        result.setClassType(typePeerChat);
        result.setChatId( map.value("chatId").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "Peer::typePeerChannel") {
        result.setClassType(typePeerChannel);
        result.setChannelId( map.value("channelId").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray Peer::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const Peer &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Peer::typePeerUser:
        stream << item.userId();
        break;
    case Peer::typePeerChat:
        stream << item.chatId();
        break;
    case Peer::typePeerChannel:
        stream << item.channelId();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, Peer &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Peer::PeerClassType>(type));
    switch(type) {
    case Peer::typePeerUser: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
    }
        break;
    case Peer::typePeerChat: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
    }
        break;
    case Peer::typePeerChannel: {
        qint32 m_channel_id;
        stream >> m_channel_id;
        item.setChannelId(m_channel_id);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_PEER
