// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_REPLYMARKUP_OBJECT
#define LQTG_TYPE_REPLYMARKUP_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/replymarkup.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ReplyMarkupObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ReplyMarkupClassType)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(bool resize READ resize WRITE setResize NOTIFY resizeChanged)
    Q_PROPERTY(QList<KeyboardButtonRow> rows READ rows WRITE setRows NOTIFY rowsChanged)
    Q_PROPERTY(bool selective READ selective WRITE setSelective NOTIFY selectiveChanged)
    Q_PROPERTY(bool singleUse READ singleUse WRITE setSingleUse NOTIFY singleUseChanged)
    Q_PROPERTY(ReplyMarkup core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ReplyMarkupClassType {
        TypeReplyKeyboardHide,
        TypeReplyKeyboardForceReply,
        TypeReplyKeyboardMarkup,
        TypeReplyInlineMarkup
    };

    ReplyMarkupObject(const ReplyMarkup &core, QObject *parent = 0);
    ReplyMarkupObject(QObject *parent = 0);
    virtual ~ReplyMarkupObject();

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setResize(bool resize);
    bool resize() const;

    void setRows(const QList<KeyboardButtonRow> &rows);
    QList<KeyboardButtonRow> rows() const;

    void setSelective(bool selective);
    bool selective() const;

    void setSingleUse(bool singleUse);
    bool singleUse() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ReplyMarkup &core);
    ReplyMarkup core() const;

    ReplyMarkupObject &operator =(const ReplyMarkup &b);
    bool operator ==(const ReplyMarkup &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void flagsChanged();
    void resizeChanged();
    void rowsChanged();
    void selectiveChanged();
    void singleUseChanged();

private Q_SLOTS:

private:
    ReplyMarkup m_core;
};

inline ReplyMarkupObject::ReplyMarkupObject(const ReplyMarkup &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ReplyMarkupObject::ReplyMarkupObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ReplyMarkupObject::~ReplyMarkupObject() {
}

inline void ReplyMarkupObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ReplyMarkupObject::flags() const {
    return m_core.flags();
}

inline void ReplyMarkupObject::setResize(bool resize) {
    if(m_core.resize() == resize) return;
    m_core.setResize(resize);
    Q_EMIT resizeChanged();
    Q_EMIT coreChanged();
}

inline bool ReplyMarkupObject::resize() const {
    return m_core.resize();
}

inline void ReplyMarkupObject::setRows(const QList<KeyboardButtonRow> &rows) {
    if(m_core.rows() == rows) return;
    m_core.setRows(rows);
    Q_EMIT rowsChanged();
    Q_EMIT coreChanged();
}

inline QList<KeyboardButtonRow> ReplyMarkupObject::rows() const {
    return m_core.rows();
}

inline void ReplyMarkupObject::setSelective(bool selective) {
    if(m_core.selective() == selective) return;
    m_core.setSelective(selective);
    Q_EMIT selectiveChanged();
    Q_EMIT coreChanged();
}

inline bool ReplyMarkupObject::selective() const {
    return m_core.selective();
}

inline void ReplyMarkupObject::setSingleUse(bool singleUse) {
    if(m_core.singleUse() == singleUse) return;
    m_core.setSingleUse(singleUse);
    Q_EMIT singleUseChanged();
    Q_EMIT coreChanged();
}

inline bool ReplyMarkupObject::singleUse() const {
    return m_core.singleUse();
}

inline ReplyMarkupObject &ReplyMarkupObject::operator =(const ReplyMarkup &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT flagsChanged();
    Q_EMIT resizeChanged();
    Q_EMIT rowsChanged();
    Q_EMIT selectiveChanged();
    Q_EMIT singleUseChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ReplyMarkupObject::operator ==(const ReplyMarkup &b) const {
    return m_core == b;
}

inline void ReplyMarkupObject::setClassType(quint32 classType) {
    ReplyMarkup::ReplyMarkupClassType result;
    switch(classType) {
    case TypeReplyKeyboardHide:
        result = ReplyMarkup::typeReplyKeyboardHide;
        break;
    case TypeReplyKeyboardForceReply:
        result = ReplyMarkup::typeReplyKeyboardForceReply;
        break;
    case TypeReplyKeyboardMarkup:
        result = ReplyMarkup::typeReplyKeyboardMarkup;
        break;
    case TypeReplyInlineMarkup:
        result = ReplyMarkup::typeReplyInlineMarkup;
        break;
    default:
        result = ReplyMarkup::typeReplyKeyboardHide;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ReplyMarkupObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ReplyMarkup::typeReplyKeyboardHide:
        result = TypeReplyKeyboardHide;
        break;
    case ReplyMarkup::typeReplyKeyboardForceReply:
        result = TypeReplyKeyboardForceReply;
        break;
    case ReplyMarkup::typeReplyKeyboardMarkup:
        result = TypeReplyKeyboardMarkup;
        break;
    case ReplyMarkup::typeReplyInlineMarkup:
        result = TypeReplyInlineMarkup;
        break;
    default:
        result = TypeReplyKeyboardHide;
        break;
    }

    return result;
}

inline void ReplyMarkupObject::setCore(const ReplyMarkup &core) {
    operator =(core);
}

inline ReplyMarkup ReplyMarkupObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_REPLYMARKUP_OBJECT
