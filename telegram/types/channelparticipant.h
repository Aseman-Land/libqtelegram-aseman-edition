// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHANNELPARTICIPANT
#define LQTG_TYPE_CHANNELPARTICIPANT

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>

class LIBQTELEGRAMSHARED_EXPORT ChannelParticipant : public TelegramTypeObject
{
public:
    enum ChannelParticipantClassType {
        typeChannelParticipant = 0x15ebac1d,
        typeChannelParticipantSelf = 0xa3289a6d,
        typeChannelParticipantModerator = 0x91057fef,
        typeChannelParticipantEditor = 0x98192d61,
        typeChannelParticipantKicked = 0x8cc5e69a,
        typeChannelParticipantCreator = 0xe3e2e1f9
    };

    ChannelParticipant(ChannelParticipantClassType classType = typeChannelParticipant, InboundPkt *in = 0);
    ChannelParticipant(InboundPkt *in);
    ChannelParticipant(const Null&);
    virtual ~ChannelParticipant();

    void setDate(qint32 date);
    qint32 date() const;

    void setInviterId(qint32 inviterId);
    qint32 inviterId() const;

    void setKickedBy(qint32 kickedBy);
    qint32 kickedBy() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(ChannelParticipantClassType classType);
    ChannelParticipantClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ChannelParticipant fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ChannelParticipant &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_date;
    qint32 m_inviterId;
    qint32 m_kickedBy;
    qint32 m_userId;
    ChannelParticipantClassType m_classType;
};

Q_DECLARE_METATYPE(ChannelParticipant)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChannelParticipant &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChannelParticipant &item);

inline ChannelParticipant::ChannelParticipant(ChannelParticipantClassType classType, InboundPkt *in) :
    m_date(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline ChannelParticipant::ChannelParticipant(InboundPkt *in) :
    m_date(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_userId(0),
    m_classType(typeChannelParticipant)
{
    fetch(in);
}

inline ChannelParticipant::ChannelParticipant(const Null &null) :
    TelegramTypeObject(null),
    m_date(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_userId(0),
    m_classType(typeChannelParticipant)
{
}

inline ChannelParticipant::~ChannelParticipant() {
}

inline void ChannelParticipant::setDate(qint32 date) {
    m_date = date;
}

inline qint32 ChannelParticipant::date() const {
    return m_date;
}

inline void ChannelParticipant::setInviterId(qint32 inviterId) {
    m_inviterId = inviterId;
}

inline qint32 ChannelParticipant::inviterId() const {
    return m_inviterId;
}

inline void ChannelParticipant::setKickedBy(qint32 kickedBy) {
    m_kickedBy = kickedBy;
}

inline qint32 ChannelParticipant::kickedBy() const {
    return m_kickedBy;
}

inline void ChannelParticipant::setUserId(qint32 userId) {
    m_userId = userId;
}

inline qint32 ChannelParticipant::userId() const {
    return m_userId;
}

inline bool ChannelParticipant::operator ==(const ChannelParticipant &b) const {
    return m_classType == b.m_classType &&
           m_date == b.m_date &&
           m_inviterId == b.m_inviterId &&
           m_kickedBy == b.m_kickedBy &&
           m_userId == b.m_userId;
}

inline void ChannelParticipant::setClassType(ChannelParticipant::ChannelParticipantClassType classType) {
    m_classType = classType;
}

inline ChannelParticipant::ChannelParticipantClassType ChannelParticipant::classType() const {
    return m_classType;
}

inline bool ChannelParticipant::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelParticipant: {
        m_userId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantSelf: {
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantModerator: {
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantEditor: {
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantKicked: {
        m_userId = in->fetchInt();
        m_kickedBy = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantCreator: {
        m_userId = in->fetchInt();
        m_classType = static_cast<ChannelParticipantClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool ChannelParticipant::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelParticipant: {
        out->appendInt(m_userId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantSelf: {
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantModerator: {
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantEditor: {
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantKicked: {
        out->appendInt(m_userId);
        out->appendInt(m_kickedBy);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantCreator: {
        out->appendInt(m_userId);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> ChannelParticipant::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelParticipant: {
        result["classType"] = "ChannelParticipant::typeChannelParticipant";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        result["date"] = QVariant::fromValue<qint32>(date());
        return result;
    }
        break;
    
    case typeChannelParticipantSelf: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantSelf";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        result["inviterId"] = QVariant::fromValue<qint32>(inviterId());
        result["date"] = QVariant::fromValue<qint32>(date());
        return result;
    }
        break;
    
    case typeChannelParticipantModerator: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantModerator";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        result["inviterId"] = QVariant::fromValue<qint32>(inviterId());
        result["date"] = QVariant::fromValue<qint32>(date());
        return result;
    }
        break;
    
    case typeChannelParticipantEditor: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantEditor";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        result["inviterId"] = QVariant::fromValue<qint32>(inviterId());
        result["date"] = QVariant::fromValue<qint32>(date());
        return result;
    }
        break;
    
    case typeChannelParticipantKicked: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantKicked";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        result["kickedBy"] = QVariant::fromValue<qint32>(kickedBy());
        result["date"] = QVariant::fromValue<qint32>(date());
        return result;
    }
        break;
    
    case typeChannelParticipantCreator: {
        result["classType"] = "ChannelParticipant::typeChannelParticipantCreator";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline ChannelParticipant ChannelParticipant::fromMap(const QMap<QString, QVariant> &map) {
    ChannelParticipant result;
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipant") {
        result.setClassType(typeChannelParticipant);
        result.setUserId( map.value("userId").value<qint32>() );
        result.setDate( map.value("date").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantSelf") {
        result.setClassType(typeChannelParticipantSelf);
        result.setUserId( map.value("userId").value<qint32>() );
        result.setInviterId( map.value("inviterId").value<qint32>() );
        result.setDate( map.value("date").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantModerator") {
        result.setClassType(typeChannelParticipantModerator);
        result.setUserId( map.value("userId").value<qint32>() );
        result.setInviterId( map.value("inviterId").value<qint32>() );
        result.setDate( map.value("date").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantEditor") {
        result.setClassType(typeChannelParticipantEditor);
        result.setUserId( map.value("userId").value<qint32>() );
        result.setInviterId( map.value("inviterId").value<qint32>() );
        result.setDate( map.value("date").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantKicked") {
        result.setClassType(typeChannelParticipantKicked);
        result.setUserId( map.value("userId").value<qint32>() );
        result.setKickedBy( map.value("kickedBy").value<qint32>() );
        result.setDate( map.value("date").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipant::typeChannelParticipantCreator") {
        result.setClassType(typeChannelParticipantCreator);
        result.setUserId( map.value("userId").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray ChannelParticipant::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const ChannelParticipant &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelParticipant::typeChannelParticipant:
        stream << item.userId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantSelf:
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantModerator:
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantEditor:
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantKicked:
        stream << item.userId();
        stream << item.kickedBy();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantCreator:
        stream << item.userId();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, ChannelParticipant &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelParticipant::ChannelParticipantClassType>(type));
    switch(type) {
    case ChannelParticipant::typeChannelParticipant: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantSelf: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantModerator: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantEditor: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantKicked: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_kicked_by;
        stream >> m_kicked_by;
        item.setKickedBy(m_kicked_by);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantCreator: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_CHANNELPARTICIPANT
