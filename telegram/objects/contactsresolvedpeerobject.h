// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSRESOLVEDPEER_OBJECT
#define LQTG_TYPE_CONTACTSRESOLVEDPEER_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactsresolvedpeer.h"

#include <QPointer>
#include "peerobject.h"

class LIBQTELEGRAMSHARED_EXPORT ContactsResolvedPeerObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactsResolvedPeerClassType)
    Q_PROPERTY(QList<Chat> chats READ chats WRITE setChats NOTIFY chatsChanged)
    Q_PROPERTY(PeerObject* peer READ peer WRITE setPeer NOTIFY peerChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(ContactsResolvedPeer core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactsResolvedPeerClassType {
        TypeContactsResolvedPeer
    };

    ContactsResolvedPeerObject(const ContactsResolvedPeer &core, QObject *parent = 0);
    ContactsResolvedPeerObject(QObject *parent = 0);
    virtual ~ContactsResolvedPeerObject();

    void setChats(const QList<Chat> &chats);
    QList<Chat> chats() const;

    void setPeer(PeerObject* peer);
    PeerObject* peer() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactsResolvedPeer &core);
    ContactsResolvedPeer core() const;

    ContactsResolvedPeerObject &operator =(const ContactsResolvedPeer &b);
    bool operator ==(const ContactsResolvedPeer &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatsChanged();
    void peerChanged();
    void usersChanged();

private Q_SLOTS:
    void corePeerChanged();

private:
    QPointer<PeerObject> m_peer;
    ContactsResolvedPeer m_core;
};

inline ContactsResolvedPeerObject::ContactsResolvedPeerObject(const ContactsResolvedPeer &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core(core)
{
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &ContactsResolvedPeerObject::corePeerChanged);
}

inline ContactsResolvedPeerObject::ContactsResolvedPeerObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core()
{
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &ContactsResolvedPeerObject::corePeerChanged);
}

inline ContactsResolvedPeerObject::~ContactsResolvedPeerObject() {
}

inline void ContactsResolvedPeerObject::setChats(const QList<Chat> &chats) {
    if(m_core.chats() == chats) return;
    m_core.setChats(chats);
    Q_EMIT chatsChanged();
    Q_EMIT coreChanged();
}

inline QList<Chat> ContactsResolvedPeerObject::chats() const {
    return m_core.chats();
}

inline void ContactsResolvedPeerObject::setPeer(PeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), &PeerObject::coreChanged, this, &ContactsResolvedPeerObject::corePeerChanged);
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

inline PeerObject*  ContactsResolvedPeerObject::peer() const {
    return m_peer;
}

inline void ContactsResolvedPeerObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> ContactsResolvedPeerObject::users() const {
    return m_core.users();
}

inline ContactsResolvedPeerObject &ContactsResolvedPeerObject::operator =(const ContactsResolvedPeer &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_peer->setCore(b.peer());

    Q_EMIT chatsChanged();
    Q_EMIT peerChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactsResolvedPeerObject::operator ==(const ContactsResolvedPeer &b) const {
    return m_core == b;
}

inline void ContactsResolvedPeerObject::setClassType(quint32 classType) {
    ContactsResolvedPeer::ContactsResolvedPeerClassType result;
    switch(classType) {
    case TypeContactsResolvedPeer:
        result = ContactsResolvedPeer::typeContactsResolvedPeer;
        break;
    default:
        result = ContactsResolvedPeer::typeContactsResolvedPeer;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactsResolvedPeerObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsResolvedPeer::typeContactsResolvedPeer:
        result = TypeContactsResolvedPeer;
        break;
    default:
        result = TypeContactsResolvedPeer;
        break;
    }

    return result;
}

inline void ContactsResolvedPeerObject::setCore(const ContactsResolvedPeer &core) {
    operator =(core);
}

inline ContactsResolvedPeer ContactsResolvedPeerObject::core() const {
    return m_core;
}

inline void ContactsResolvedPeerObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_CONTACTSRESOLVEDPEER_OBJECT
