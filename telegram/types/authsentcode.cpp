// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authsentcode.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

AuthSentCode::AuthSentCode(AuthSentCodeType classType, InboundPkt *in) :
    m_isPassword(false),
    m_phoneRegistered(false),
    m_sendCallTimeout(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

AuthSentCode::AuthSentCode(InboundPkt *in) :
    m_isPassword(false),
    m_phoneRegistered(false),
    m_sendCallTimeout(0),
    m_classType(typeAuthSentCode)
{
    fetch(in);
}

AuthSentCode::AuthSentCode(const Null &null) :
    TelegramTypeObject(null),
    m_isPassword(false),
    m_phoneRegistered(false),
    m_sendCallTimeout(0),
    m_classType(typeAuthSentCode)
{
}

AuthSentCode::~AuthSentCode() {
}

void AuthSentCode::setIsPassword(bool isPassword) {
    m_isPassword = isPassword;
}

bool AuthSentCode::isPassword() const {
    return m_isPassword;
}

void AuthSentCode::setPhoneCodeHash(const QString &phoneCodeHash) {
    m_phoneCodeHash = phoneCodeHash;
}

QString AuthSentCode::phoneCodeHash() const {
    return m_phoneCodeHash;
}

void AuthSentCode::setPhoneRegistered(bool phoneRegistered) {
    m_phoneRegistered = phoneRegistered;
}

bool AuthSentCode::phoneRegistered() const {
    return m_phoneRegistered;
}

void AuthSentCode::setSendCallTimeout(qint32 sendCallTimeout) {
    m_sendCallTimeout = sendCallTimeout;
}

qint32 AuthSentCode::sendCallTimeout() const {
    return m_sendCallTimeout;
}

bool AuthSentCode::operator ==(const AuthSentCode &b) const {
    return m_classType == b.m_classType &&
           m_isPassword == b.m_isPassword &&
           m_phoneCodeHash == b.m_phoneCodeHash &&
           m_phoneRegistered == b.m_phoneRegistered &&
           m_sendCallTimeout == b.m_sendCallTimeout;
}

void AuthSentCode::setClassType(AuthSentCode::AuthSentCodeType classType) {
    m_classType = classType;
}

AuthSentCode::AuthSentCodeType AuthSentCode::classType() const {
    return m_classType;
}

bool AuthSentCode::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAuthSentCode: {
        m_phoneRegistered = in->fetchBool();
        m_phoneCodeHash = in->fetchQString();
        m_sendCallTimeout = in->fetchInt();
        m_isPassword = in->fetchBool();
        m_classType = static_cast<AuthSentCodeType>(x);
        return true;
    }
        break;
    
    case typeAuthSentAppCode: {
        m_phoneRegistered = in->fetchBool();
        m_phoneCodeHash = in->fetchQString();
        m_sendCallTimeout = in->fetchInt();
        m_isPassword = in->fetchBool();
        m_classType = static_cast<AuthSentCodeType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool AuthSentCode::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAuthSentCode: {
        out->appendBool(m_phoneRegistered);
        out->appendQString(m_phoneCodeHash);
        out->appendInt(m_sendCallTimeout);
        out->appendBool(m_isPassword);
        return true;
    }
        break;
    
    case typeAuthSentAppCode: {
        out->appendBool(m_phoneRegistered);
        out->appendQString(m_phoneCodeHash);
        out->appendInt(m_sendCallTimeout);
        out->appendBool(m_isPassword);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray AuthSentCode::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const AuthSentCode &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AuthSentCode::typeAuthSentCode:
        stream << item.phoneRegistered();
        stream << item.phoneCodeHash();
        stream << item.sendCallTimeout();
        stream << item.isPassword();
        break;
    case AuthSentCode::typeAuthSentAppCode:
        stream << item.phoneRegistered();
        stream << item.phoneCodeHash();
        stream << item.sendCallTimeout();
        stream << item.isPassword();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, AuthSentCode &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AuthSentCode::AuthSentCodeType>(type));
    switch(type) {
    case AuthSentCode::typeAuthSentCode: {
        bool m_phone_registered;
        stream >> m_phone_registered;
        item.setPhoneRegistered(m_phone_registered);
        QString m_phone_code_hash;
        stream >> m_phone_code_hash;
        item.setPhoneCodeHash(m_phone_code_hash);
        qint32 m_send_call_timeout;
        stream >> m_send_call_timeout;
        item.setSendCallTimeout(m_send_call_timeout);
        bool m_is_password;
        stream >> m_is_password;
        item.setIsPassword(m_is_password);
    }
        break;
    case AuthSentCode::typeAuthSentAppCode: {
        bool m_phone_registered;
        stream >> m_phone_registered;
        item.setPhoneRegistered(m_phone_registered);
        QString m_phone_code_hash;
        stream >> m_phone_code_hash;
        item.setPhoneCodeHash(m_phone_code_hash);
        qint32 m_send_call_timeout;
        stream >> m_send_call_timeout;
        item.setSendCallTimeout(m_send_call_timeout);
        bool m_is_password;
        stream >> m_is_password;
        item.setIsPassword(m_is_password);
    }
        break;
    }
    return stream;
}

