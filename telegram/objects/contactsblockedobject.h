// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSBLOCKED_OBJECT
#define LQTG_TYPE_CONTACTSBLOCKED_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactsblocked.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ContactsBlockedObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactsBlockedType)
    Q_PROPERTY(QList<ContactBlocked> blocked READ blocked WRITE setBlocked NOTIFY blockedChanged)
    Q_PROPERTY(qint32 count READ count WRITE setCount NOTIFY countChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(ContactsBlocked core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactsBlockedType {
        TypeContactsBlocked,
        TypeContactsBlockedSlice
    };

    ContactsBlockedObject(const ContactsBlocked &core, QObject *parent = 0);
    ContactsBlockedObject(QObject *parent = 0);
    virtual ~ContactsBlockedObject();

    void setBlocked(const QList<ContactBlocked> &blocked);
    QList<ContactBlocked> blocked() const;

    void setCount(qint32 count);
    qint32 count() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactsBlocked &core);
    ContactsBlocked core() const;

    ContactsBlockedObject &operator =(const ContactsBlocked &b);
    bool operator ==(const ContactsBlocked &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void blockedChanged();
    void countChanged();
    void usersChanged();

private Q_SLOTS:

private:
    ContactsBlocked m_core;
};

#endif // LQTG_TYPE_CONTACTSBLOCKED_OBJECT
