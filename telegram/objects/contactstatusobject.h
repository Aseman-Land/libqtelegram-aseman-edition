// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSTATUS_OBJECT
#define LQTG_TYPE_CONTACTSTATUS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactstatus.h"

#include <QPointer>
#include "userstatusobject.h"

class LIBQTELEGRAMSHARED_EXPORT ContactStatusObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactStatusClassType)
    Q_PROPERTY(UserStatusObject* status READ status WRITE setStatus NOTIFY statusChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(ContactStatus core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactStatusClassType {
        TypeContactStatus
    };

    ContactStatusObject(const ContactStatus &core, QObject *parent = 0);
    ContactStatusObject(QObject *parent = 0);
    virtual ~ContactStatusObject();

    void setStatus(UserStatusObject* status);
    UserStatusObject* status() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactStatus &core);
    ContactStatus core() const;

    ContactStatusObject &operator =(const ContactStatus &b);
    bool operator ==(const ContactStatus &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void statusChanged();
    void userIdChanged();

private Q_SLOTS:
    void coreStatusChanged();

private:
    QPointer<UserStatusObject> m_status;
    ContactStatus m_core;
};

inline ContactStatusObject::ContactStatusObject(const ContactStatus &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_status(0),
    m_core(core)
{
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), &UserStatusObject::coreChanged, this, &ContactStatusObject::coreStatusChanged);
}

inline ContactStatusObject::ContactStatusObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_status(0),
    m_core()
{
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), &UserStatusObject::coreChanged, this, &ContactStatusObject::coreStatusChanged);
}

inline ContactStatusObject::~ContactStatusObject() {
}

inline void ContactStatusObject::setStatus(UserStatusObject* status) {
    if(m_status == status) return;
    if(m_status) delete m_status;
    m_status = status;
    if(m_status) {
        m_status->setParent(this);
        m_core.setStatus(m_status->core());
        connect(m_status.data(), &UserStatusObject::coreChanged, this, &ContactStatusObject::coreStatusChanged);
    }
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

inline UserStatusObject*  ContactStatusObject::status() const {
    return m_status;
}

inline void ContactStatusObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 ContactStatusObject::userId() const {
    return m_core.userId();
}

inline ContactStatusObject &ContactStatusObject::operator =(const ContactStatus &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_status->setCore(b.status());

    Q_EMIT statusChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactStatusObject::operator ==(const ContactStatus &b) const {
    return m_core == b;
}

inline void ContactStatusObject::setClassType(quint32 classType) {
    ContactStatus::ContactStatusClassType result;
    switch(classType) {
    case TypeContactStatus:
        result = ContactStatus::typeContactStatus;
        break;
    default:
        result = ContactStatus::typeContactStatus;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactStatusObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactStatus::typeContactStatus:
        result = TypeContactStatus;
        break;
    default:
        result = TypeContactStatus;
        break;
    }

    return result;
}

inline void ContactStatusObject::setCore(const ContactStatus &core) {
    operator =(core);
}

inline ContactStatus ContactStatusObject::core() const {
    return m_core;
}

inline void ContactStatusObject::coreStatusChanged() {
    if(m_core.status() == m_status->core()) return;
    m_core.setStatus(m_status->core());
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_CONTACTSTATUS_OBJECT
