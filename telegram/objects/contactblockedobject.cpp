// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactblockedobject.h"

ContactBlockedObject::ContactBlockedObject(const ContactBlocked &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ContactBlockedObject::ContactBlockedObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ContactBlockedObject::~ContactBlockedObject() {
}

void ContactBlockedObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 ContactBlockedObject::date() const {
    return m_core.date();
}

void ContactBlockedObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 ContactBlockedObject::userId() const {
    return m_core.userId();
}

ContactBlockedObject &ContactBlockedObject::operator =(const ContactBlocked &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT dateChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ContactBlockedObject::operator ==(const ContactBlocked &b) const {
    return m_core == b;
}

void ContactBlockedObject::setClassType(quint32 classType) {
    ContactBlocked::ContactBlockedType result;
    switch(classType) {
    case TypeContactBlocked:
        result = ContactBlocked::typeContactBlocked;
        break;
    default:
        result = ContactBlocked::typeContactBlocked;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactBlockedObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactBlocked::typeContactBlocked:
        result = TypeContactBlocked;
        break;
    default:
        result = TypeContactBlocked;
        break;
    }

    return result;
}

void ContactBlockedObject::setCore(const ContactBlocked &core) {
    operator =(core);
}

ContactBlocked ContactBlockedObject::core() const {
    return m_core;
}

