// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ACCOUNTPASSWORD_OBJECT
#define LQTG_TYPE_ACCOUNTPASSWORD_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/accountpassword.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AccountPasswordObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AccountPasswordClassType)
    Q_PROPERTY(QByteArray currentSalt READ currentSalt WRITE setCurrentSalt NOTIFY currentSaltChanged)
    Q_PROPERTY(QString emailUnconfirmedPattern READ emailUnconfirmedPattern WRITE setEmailUnconfirmedPattern NOTIFY emailUnconfirmedPatternChanged)
    Q_PROPERTY(bool hasRecovery READ hasRecovery WRITE setHasRecovery NOTIFY hasRecoveryChanged)
    Q_PROPERTY(QString hint READ hint WRITE setHint NOTIFY hintChanged)
    Q_PROPERTY(QByteArray newSalt READ newSalt WRITE setNewSalt NOTIFY newSaltChanged)
    Q_PROPERTY(AccountPassword core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AccountPasswordClassType {
        TypeAccountNoPassword,
        TypeAccountPassword
    };

    AccountPasswordObject(const AccountPassword &core, QObject *parent = 0);
    AccountPasswordObject(QObject *parent = 0);
    virtual ~AccountPasswordObject();

    void setCurrentSalt(const QByteArray &currentSalt);
    QByteArray currentSalt() const;

    void setEmailUnconfirmedPattern(const QString &emailUnconfirmedPattern);
    QString emailUnconfirmedPattern() const;

    void setHasRecovery(bool hasRecovery);
    bool hasRecovery() const;

    void setHint(const QString &hint);
    QString hint() const;

    void setNewSalt(const QByteArray &newSalt);
    QByteArray newSalt() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AccountPassword &core);
    AccountPassword core() const;

    AccountPasswordObject &operator =(const AccountPassword &b);
    bool operator ==(const AccountPassword &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void currentSaltChanged();
    void emailUnconfirmedPatternChanged();
    void hasRecoveryChanged();
    void hintChanged();
    void newSaltChanged();

private Q_SLOTS:

private:
    AccountPassword m_core;
};

inline AccountPasswordObject::AccountPasswordObject(const AccountPassword &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AccountPasswordObject::AccountPasswordObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AccountPasswordObject::~AccountPasswordObject() {
}

inline void AccountPasswordObject::setCurrentSalt(const QByteArray &currentSalt) {
    if(m_core.currentSalt() == currentSalt) return;
    m_core.setCurrentSalt(currentSalt);
    Q_EMIT currentSaltChanged();
    Q_EMIT coreChanged();
}

inline QByteArray AccountPasswordObject::currentSalt() const {
    return m_core.currentSalt();
}

inline void AccountPasswordObject::setEmailUnconfirmedPattern(const QString &emailUnconfirmedPattern) {
    if(m_core.emailUnconfirmedPattern() == emailUnconfirmedPattern) return;
    m_core.setEmailUnconfirmedPattern(emailUnconfirmedPattern);
    Q_EMIT emailUnconfirmedPatternChanged();
    Q_EMIT coreChanged();
}

inline QString AccountPasswordObject::emailUnconfirmedPattern() const {
    return m_core.emailUnconfirmedPattern();
}

inline void AccountPasswordObject::setHasRecovery(bool hasRecovery) {
    if(m_core.hasRecovery() == hasRecovery) return;
    m_core.setHasRecovery(hasRecovery);
    Q_EMIT hasRecoveryChanged();
    Q_EMIT coreChanged();
}

inline bool AccountPasswordObject::hasRecovery() const {
    return m_core.hasRecovery();
}

inline void AccountPasswordObject::setHint(const QString &hint) {
    if(m_core.hint() == hint) return;
    m_core.setHint(hint);
    Q_EMIT hintChanged();
    Q_EMIT coreChanged();
}

inline QString AccountPasswordObject::hint() const {
    return m_core.hint();
}

inline void AccountPasswordObject::setNewSalt(const QByteArray &newSalt) {
    if(m_core.newSalt() == newSalt) return;
    m_core.setNewSalt(newSalt);
    Q_EMIT newSaltChanged();
    Q_EMIT coreChanged();
}

inline QByteArray AccountPasswordObject::newSalt() const {
    return m_core.newSalt();
}

inline AccountPasswordObject &AccountPasswordObject::operator =(const AccountPassword &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT currentSaltChanged();
    Q_EMIT emailUnconfirmedPatternChanged();
    Q_EMIT hasRecoveryChanged();
    Q_EMIT hintChanged();
    Q_EMIT newSaltChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AccountPasswordObject::operator ==(const AccountPassword &b) const {
    return m_core == b;
}

inline void AccountPasswordObject::setClassType(quint32 classType) {
    AccountPassword::AccountPasswordClassType result;
    switch(classType) {
    case TypeAccountNoPassword:
        result = AccountPassword::typeAccountNoPassword;
        break;
    case TypeAccountPassword:
        result = AccountPassword::typeAccountPassword;
        break;
    default:
        result = AccountPassword::typeAccountNoPassword;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AccountPasswordObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AccountPassword::typeAccountNoPassword:
        result = TypeAccountNoPassword;
        break;
    case AccountPassword::typeAccountPassword:
        result = TypeAccountPassword;
        break;
    default:
        result = TypeAccountNoPassword;
        break;
    }

    return result;
}

inline void AccountPasswordObject::setCore(const AccountPassword &core) {
    operator =(core);
}

inline AccountPassword AccountPasswordObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_ACCOUNTPASSWORD_OBJECT
