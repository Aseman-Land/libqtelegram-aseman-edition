// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTENCRYPTEDFILE_OBJECT
#define LQTG_TYPE_INPUTENCRYPTEDFILE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputencryptedfile.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputEncryptedFileObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputEncryptedFileClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(qint32 keyFingerprint READ keyFingerprint WRITE setKeyFingerprint NOTIFY keyFingerprintChanged)
    Q_PROPERTY(QString md5Checksum READ md5Checksum WRITE setMd5Checksum NOTIFY md5ChecksumChanged)
    Q_PROPERTY(qint32 parts READ parts WRITE setParts NOTIFY partsChanged)
    Q_PROPERTY(InputEncryptedFile core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputEncryptedFileClassType {
        TypeInputEncryptedFileEmpty,
        TypeInputEncryptedFileUploaded,
        TypeInputEncryptedFile,
        TypeInputEncryptedFileBigUploaded
    };

    InputEncryptedFileObject(const InputEncryptedFile &core, QObject *parent = 0);
    InputEncryptedFileObject(QObject *parent = 0);
    virtual ~InputEncryptedFileObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setId(qint64 id);
    qint64 id() const;

    void setKeyFingerprint(qint32 keyFingerprint);
    qint32 keyFingerprint() const;

    void setMd5Checksum(const QString &md5Checksum);
    QString md5Checksum() const;

    void setParts(qint32 parts);
    qint32 parts() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputEncryptedFile &core);
    InputEncryptedFile core() const;

    InputEncryptedFileObject &operator =(const InputEncryptedFile &b);
    bool operator ==(const InputEncryptedFile &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void idChanged();
    void keyFingerprintChanged();
    void md5ChecksumChanged();
    void partsChanged();

private Q_SLOTS:

private:
    InputEncryptedFile m_core;
};

inline InputEncryptedFileObject::InputEncryptedFileObject(const InputEncryptedFile &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputEncryptedFileObject::InputEncryptedFileObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputEncryptedFileObject::~InputEncryptedFileObject() {
}

inline void InputEncryptedFileObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputEncryptedFileObject::accessHash() const {
    return m_core.accessHash();
}

inline void InputEncryptedFileObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputEncryptedFileObject::id() const {
    return m_core.id();
}

inline void InputEncryptedFileObject::setKeyFingerprint(qint32 keyFingerprint) {
    if(m_core.keyFingerprint() == keyFingerprint) return;
    m_core.setKeyFingerprint(keyFingerprint);
    Q_EMIT keyFingerprintChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputEncryptedFileObject::keyFingerprint() const {
    return m_core.keyFingerprint();
}

inline void InputEncryptedFileObject::setMd5Checksum(const QString &md5Checksum) {
    if(m_core.md5Checksum() == md5Checksum) return;
    m_core.setMd5Checksum(md5Checksum);
    Q_EMIT md5ChecksumChanged();
    Q_EMIT coreChanged();
}

inline QString InputEncryptedFileObject::md5Checksum() const {
    return m_core.md5Checksum();
}

inline void InputEncryptedFileObject::setParts(qint32 parts) {
    if(m_core.parts() == parts) return;
    m_core.setParts(parts);
    Q_EMIT partsChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputEncryptedFileObject::parts() const {
    return m_core.parts();
}

inline InputEncryptedFileObject &InputEncryptedFileObject::operator =(const InputEncryptedFile &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT idChanged();
    Q_EMIT keyFingerprintChanged();
    Q_EMIT md5ChecksumChanged();
    Q_EMIT partsChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputEncryptedFileObject::operator ==(const InputEncryptedFile &b) const {
    return m_core == b;
}

inline void InputEncryptedFileObject::setClassType(quint32 classType) {
    InputEncryptedFile::InputEncryptedFileClassType result;
    switch(classType) {
    case TypeInputEncryptedFileEmpty:
        result = InputEncryptedFile::typeInputEncryptedFileEmpty;
        break;
    case TypeInputEncryptedFileUploaded:
        result = InputEncryptedFile::typeInputEncryptedFileUploaded;
        break;
    case TypeInputEncryptedFile:
        result = InputEncryptedFile::typeInputEncryptedFile;
        break;
    case TypeInputEncryptedFileBigUploaded:
        result = InputEncryptedFile::typeInputEncryptedFileBigUploaded;
        break;
    default:
        result = InputEncryptedFile::typeInputEncryptedFileEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputEncryptedFileObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputEncryptedFile::typeInputEncryptedFileEmpty:
        result = TypeInputEncryptedFileEmpty;
        break;
    case InputEncryptedFile::typeInputEncryptedFileUploaded:
        result = TypeInputEncryptedFileUploaded;
        break;
    case InputEncryptedFile::typeInputEncryptedFile:
        result = TypeInputEncryptedFile;
        break;
    case InputEncryptedFile::typeInputEncryptedFileBigUploaded:
        result = TypeInputEncryptedFileBigUploaded;
        break;
    default:
        result = TypeInputEncryptedFileEmpty;
        break;
    }

    return result;
}

inline void InputEncryptedFileObject::setCore(const InputEncryptedFile &core) {
    operator =(core);
}

inline InputEncryptedFile InputEncryptedFileObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTENCRYPTEDFILE_OBJECT
