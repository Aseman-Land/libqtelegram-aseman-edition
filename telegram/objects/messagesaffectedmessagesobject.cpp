// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesaffectedmessagesobject.h"

MessagesAffectedMessagesObject::MessagesAffectedMessagesObject(const MessagesAffectedMessages &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesAffectedMessagesObject::MessagesAffectedMessagesObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesAffectedMessagesObject::~MessagesAffectedMessagesObject() {
}

void MessagesAffectedMessagesObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesAffectedMessagesObject::pts() const {
    return m_core.pts();
}

void MessagesAffectedMessagesObject::setPtsCount(qint32 ptsCount) {
    if(m_core.ptsCount() == ptsCount) return;
    m_core.setPtsCount(ptsCount);
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesAffectedMessagesObject::ptsCount() const {
    return m_core.ptsCount();
}

MessagesAffectedMessagesObject &MessagesAffectedMessagesObject::operator =(const MessagesAffectedMessages &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT ptsChanged();
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesAffectedMessagesObject::operator ==(const MessagesAffectedMessages &b) const {
    return m_core == b;
}

void MessagesAffectedMessagesObject::setClassType(quint32 classType) {
    MessagesAffectedMessages::MessagesAffectedMessagesType result;
    switch(classType) {
    case TypeMessagesAffectedMessages:
        result = MessagesAffectedMessages::typeMessagesAffectedMessages;
        break;
    default:
        result = MessagesAffectedMessages::typeMessagesAffectedMessages;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesAffectedMessagesObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesAffectedMessages::typeMessagesAffectedMessages:
        result = TypeMessagesAffectedMessages;
        break;
    default:
        result = TypeMessagesAffectedMessages;
        break;
    }

    return result;
}

void MessagesAffectedMessagesObject::setCore(const MessagesAffectedMessages &core) {
    operator =(core);
}

MessagesAffectedMessages MessagesAffectedMessagesObject::core() const {
    return m_core;
}

