// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputfile.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

InputFile::InputFile(InputFileType classType, InboundPkt *in) :
    m_id(0),
    m_parts(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

InputFile::InputFile(InboundPkt *in) :
    m_id(0),
    m_parts(0),
    m_classType(typeInputFile)
{
    fetch(in);
}

InputFile::InputFile(const Null &null) :
    TelegramTypeObject(null),
    m_id(0),
    m_parts(0),
    m_classType(typeInputFile)
{
}

InputFile::~InputFile() {
}

void InputFile::setId(qint64 id) {
    m_id = id;
}

qint64 InputFile::id() const {
    return m_id;
}

void InputFile::setMd5Checksum(const QString &md5Checksum) {
    m_md5Checksum = md5Checksum;
}

QString InputFile::md5Checksum() const {
    return m_md5Checksum;
}

void InputFile::setName(const QString &name) {
    m_name = name;
}

QString InputFile::name() const {
    return m_name;
}

void InputFile::setParts(qint32 parts) {
    m_parts = parts;
}

qint32 InputFile::parts() const {
    return m_parts;
}

bool InputFile::operator ==(const InputFile &b) const {
    return m_classType == b.m_classType &&
           m_id == b.m_id &&
           m_md5Checksum == b.m_md5Checksum &&
           m_name == b.m_name &&
           m_parts == b.m_parts;
}

void InputFile::setClassType(InputFile::InputFileType classType) {
    m_classType = classType;
}

InputFile::InputFileType InputFile::classType() const {
    return m_classType;
}

bool InputFile::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputFile: {
        m_id = in->fetchLong();
        m_parts = in->fetchInt();
        m_name = in->fetchQString();
        m_md5Checksum = in->fetchQString();
        m_classType = static_cast<InputFileType>(x);
        return true;
    }
        break;
    
    case typeInputFileBig: {
        m_id = in->fetchLong();
        m_parts = in->fetchInt();
        m_name = in->fetchQString();
        m_classType = static_cast<InputFileType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool InputFile::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputFile: {
        out->appendLong(m_id);
        out->appendInt(m_parts);
        out->appendQString(m_name);
        out->appendQString(m_md5Checksum);
        return true;
    }
        break;
    
    case typeInputFileBig: {
        out->appendLong(m_id);
        out->appendInt(m_parts);
        out->appendQString(m_name);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray InputFile::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const InputFile &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case InputFile::typeInputFile:
        stream << item.id();
        stream << item.parts();
        stream << item.name();
        stream << item.md5Checksum();
        break;
    case InputFile::typeInputFileBig:
        stream << item.id();
        stream << item.parts();
        stream << item.name();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, InputFile &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<InputFile::InputFileType>(type));
    switch(type) {
    case InputFile::typeInputFile: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_parts;
        stream >> m_parts;
        item.setParts(m_parts);
        QString m_name;
        stream >> m_name;
        item.setName(m_name);
        QString m_md5_checksum;
        stream >> m_md5_checksum;
        item.setMd5Checksum(m_md5_checksum);
    }
        break;
    case InputFile::typeInputFileBig: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_parts;
        stream >> m_parts;
        item.setParts(m_parts);
        QString m_name;
        stream >> m_name;
        item.setName(m_name);
    }
        break;
    }
    return stream;
}

