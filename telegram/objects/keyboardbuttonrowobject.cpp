// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "keyboardbuttonrowobject.h"

KeyboardButtonRowObject::KeyboardButtonRowObject(const KeyboardButtonRow &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

KeyboardButtonRowObject::KeyboardButtonRowObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

KeyboardButtonRowObject::~KeyboardButtonRowObject() {
}

void KeyboardButtonRowObject::setButtons(const QList<KeyboardButton> &buttons) {
    if(m_core.buttons() == buttons) return;
    m_core.setButtons(buttons);
    Q_EMIT buttonsChanged();
    Q_EMIT coreChanged();
}

QList<KeyboardButton> KeyboardButtonRowObject::buttons() const {
    return m_core.buttons();
}

KeyboardButtonRowObject &KeyboardButtonRowObject::operator =(const KeyboardButtonRow &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT buttonsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool KeyboardButtonRowObject::operator ==(const KeyboardButtonRow &b) const {
    return m_core == b;
}

void KeyboardButtonRowObject::setClassType(quint32 classType) {
    KeyboardButtonRow::KeyboardButtonRowType result;
    switch(classType) {
    case TypeKeyboardButtonRow:
        result = KeyboardButtonRow::typeKeyboardButtonRow;
        break;
    default:
        result = KeyboardButtonRow::typeKeyboardButtonRow;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 KeyboardButtonRowObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case KeyboardButtonRow::typeKeyboardButtonRow:
        result = TypeKeyboardButtonRow;
        break;
    default:
        result = TypeKeyboardButtonRow;
        break;
    }

    return result;
}

void KeyboardButtonRowObject::setCore(const KeyboardButtonRow &core) {
    operator =(core);
}

KeyboardButtonRow KeyboardButtonRowObject::core() const {
    return m_core;
}

