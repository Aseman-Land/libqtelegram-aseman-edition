// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_USER_OBJECT
#define LQTG_TYPE_USER_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/user.h"

#include <QPointer>
#include "userprofilephotoobject.h"
#include "userstatusobject.h"

class LIBQTELEGRAMSHARED_EXPORT UserObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(UserClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(bool bot READ bot WRITE setBot NOTIFY botChanged)
    Q_PROPERTY(bool botChatHistory READ botChatHistory WRITE setBotChatHistory NOTIFY botChatHistoryChanged)
    Q_PROPERTY(qint32 botInfoVersion READ botInfoVersion WRITE setBotInfoVersion NOTIFY botInfoVersionChanged)
    Q_PROPERTY(bool botInlineGeo READ botInlineGeo WRITE setBotInlineGeo NOTIFY botInlineGeoChanged)
    Q_PROPERTY(QString botInlinePlaceholder READ botInlinePlaceholder WRITE setBotInlinePlaceholder NOTIFY botInlinePlaceholderChanged)
    Q_PROPERTY(bool botNochats READ botNochats WRITE setBotNochats NOTIFY botNochatsChanged)
    Q_PROPERTY(bool contact READ contact WRITE setContact NOTIFY contactChanged)
    Q_PROPERTY(bool deleted READ deleted WRITE setDeleted NOTIFY deletedChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(bool min READ min WRITE setMin NOTIFY minChanged)
    Q_PROPERTY(bool mutualContact READ mutualContact WRITE setMutualContact NOTIFY mutualContactChanged)
    Q_PROPERTY(QString phone READ phone WRITE setPhone NOTIFY phoneChanged)
    Q_PROPERTY(UserProfilePhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(bool restricted READ restricted WRITE setRestricted NOTIFY restrictedChanged)
    Q_PROPERTY(QString restrictionReason READ restrictionReason WRITE setRestrictionReason NOTIFY restrictionReasonChanged)
    Q_PROPERTY(bool self READ self WRITE setSelf NOTIFY selfChanged)
    Q_PROPERTY(UserStatusObject* status READ status WRITE setStatus NOTIFY statusChanged)
    Q_PROPERTY(QString username READ username WRITE setUsername NOTIFY usernameChanged)
    Q_PROPERTY(bool verified READ verified WRITE setVerified NOTIFY verifiedChanged)
    Q_PROPERTY(User core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum UserClassType {
        TypeUserEmpty,
        TypeUser
    };

    UserObject(const User &core, QObject *parent = 0);
    UserObject(QObject *parent = 0);
    virtual ~UserObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setBot(bool bot);
    bool bot() const;

    void setBotChatHistory(bool botChatHistory);
    bool botChatHistory() const;

    void setBotInfoVersion(qint32 botInfoVersion);
    qint32 botInfoVersion() const;

    void setBotInlineGeo(bool botInlineGeo);
    bool botInlineGeo() const;

    void setBotInlinePlaceholder(const QString &botInlinePlaceholder);
    QString botInlinePlaceholder() const;

    void setBotNochats(bool botNochats);
    bool botNochats() const;

    void setContact(bool contact);
    bool contact() const;

    void setDeleted(bool deleted);
    bool deleted() const;

    void setFirstName(const QString &firstName);
    QString firstName() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setId(qint32 id);
    qint32 id() const;

    void setLastName(const QString &lastName);
    QString lastName() const;

    void setMin(bool min);
    bool min() const;

    void setMutualContact(bool mutualContact);
    bool mutualContact() const;

    void setPhone(const QString &phone);
    QString phone() const;

    void setPhoto(UserProfilePhotoObject* photo);
    UserProfilePhotoObject* photo() const;

    void setRestricted(bool restricted);
    bool restricted() const;

    void setRestrictionReason(const QString &restrictionReason);
    QString restrictionReason() const;

    void setSelf(bool self);
    bool self() const;

    void setStatus(UserStatusObject* status);
    UserStatusObject* status() const;

    void setUsername(const QString &username);
    QString username() const;

    void setVerified(bool verified);
    bool verified() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const User &core);
    User core() const;

    UserObject &operator =(const User &b);
    bool operator ==(const User &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void botChanged();
    void botChatHistoryChanged();
    void botInfoVersionChanged();
    void botInlineGeoChanged();
    void botInlinePlaceholderChanged();
    void botNochatsChanged();
    void contactChanged();
    void deletedChanged();
    void firstNameChanged();
    void flagsChanged();
    void idChanged();
    void lastNameChanged();
    void minChanged();
    void mutualContactChanged();
    void phoneChanged();
    void photoChanged();
    void restrictedChanged();
    void restrictionReasonChanged();
    void selfChanged();
    void statusChanged();
    void usernameChanged();
    void verifiedChanged();

private Q_SLOTS:
    void corePhotoChanged();
    void coreStatusChanged();

private:
    QPointer<UserProfilePhotoObject> m_photo;
    QPointer<UserStatusObject> m_status;
    User m_core;
};

inline UserObject::UserObject(const User &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_photo(0),
    m_status(0),
    m_core(core)
{
    m_photo = new UserProfilePhotoObject(m_core.photo(), this);
    connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UserObject::corePhotoChanged);
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), &UserStatusObject::coreChanged, this, &UserObject::coreStatusChanged);
}

inline UserObject::UserObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_photo(0),
    m_status(0),
    m_core()
{
    m_photo = new UserProfilePhotoObject(m_core.photo(), this);
    connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UserObject::corePhotoChanged);
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), &UserStatusObject::coreChanged, this, &UserObject::coreStatusChanged);
}

inline UserObject::~UserObject() {
}

inline void UserObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 UserObject::accessHash() const {
    return m_core.accessHash();
}

inline void UserObject::setBot(bool bot) {
    if(m_core.bot() == bot) return;
    m_core.setBot(bot);
    Q_EMIT botChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::bot() const {
    return m_core.bot();
}

inline void UserObject::setBotChatHistory(bool botChatHistory) {
    if(m_core.botChatHistory() == botChatHistory) return;
    m_core.setBotChatHistory(botChatHistory);
    Q_EMIT botChatHistoryChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::botChatHistory() const {
    return m_core.botChatHistory();
}

inline void UserObject::setBotInfoVersion(qint32 botInfoVersion) {
    if(m_core.botInfoVersion() == botInfoVersion) return;
    m_core.setBotInfoVersion(botInfoVersion);
    Q_EMIT botInfoVersionChanged();
    Q_EMIT coreChanged();
}

inline qint32 UserObject::botInfoVersion() const {
    return m_core.botInfoVersion();
}

inline void UserObject::setBotInlineGeo(bool botInlineGeo) {
    if(m_core.botInlineGeo() == botInlineGeo) return;
    m_core.setBotInlineGeo(botInlineGeo);
    Q_EMIT botInlineGeoChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::botInlineGeo() const {
    return m_core.botInlineGeo();
}

inline void UserObject::setBotInlinePlaceholder(const QString &botInlinePlaceholder) {
    if(m_core.botInlinePlaceholder() == botInlinePlaceholder) return;
    m_core.setBotInlinePlaceholder(botInlinePlaceholder);
    Q_EMIT botInlinePlaceholderChanged();
    Q_EMIT coreChanged();
}

inline QString UserObject::botInlinePlaceholder() const {
    return m_core.botInlinePlaceholder();
}

inline void UserObject::setBotNochats(bool botNochats) {
    if(m_core.botNochats() == botNochats) return;
    m_core.setBotNochats(botNochats);
    Q_EMIT botNochatsChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::botNochats() const {
    return m_core.botNochats();
}

inline void UserObject::setContact(bool contact) {
    if(m_core.contact() == contact) return;
    m_core.setContact(contact);
    Q_EMIT contactChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::contact() const {
    return m_core.contact();
}

inline void UserObject::setDeleted(bool deleted) {
    if(m_core.deleted() == deleted) return;
    m_core.setDeleted(deleted);
    Q_EMIT deletedChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::deleted() const {
    return m_core.deleted();
}

inline void UserObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

inline QString UserObject::firstName() const {
    return m_core.firstName();
}

inline void UserObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 UserObject::flags() const {
    return m_core.flags();
}

inline void UserObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 UserObject::id() const {
    return m_core.id();
}

inline void UserObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

inline QString UserObject::lastName() const {
    return m_core.lastName();
}

inline void UserObject::setMin(bool min) {
    if(m_core.min() == min) return;
    m_core.setMin(min);
    Q_EMIT minChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::min() const {
    return m_core.min();
}

inline void UserObject::setMutualContact(bool mutualContact) {
    if(m_core.mutualContact() == mutualContact) return;
    m_core.setMutualContact(mutualContact);
    Q_EMIT mutualContactChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::mutualContact() const {
    return m_core.mutualContact();
}

inline void UserObject::setPhone(const QString &phone) {
    if(m_core.phone() == phone) return;
    m_core.setPhone(phone);
    Q_EMIT phoneChanged();
    Q_EMIT coreChanged();
}

inline QString UserObject::phone() const {
    return m_core.phone();
}

inline void UserObject::setPhoto(UserProfilePhotoObject* photo) {
    if(m_photo == photo) return;
    if(m_photo) delete m_photo;
    m_photo = photo;
    if(m_photo) {
        m_photo->setParent(this);
        m_core.setPhoto(m_photo->core());
        connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UserObject::corePhotoChanged);
    }
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

inline UserProfilePhotoObject*  UserObject::photo() const {
    return m_photo;
}

inline void UserObject::setRestricted(bool restricted) {
    if(m_core.restricted() == restricted) return;
    m_core.setRestricted(restricted);
    Q_EMIT restrictedChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::restricted() const {
    return m_core.restricted();
}

inline void UserObject::setRestrictionReason(const QString &restrictionReason) {
    if(m_core.restrictionReason() == restrictionReason) return;
    m_core.setRestrictionReason(restrictionReason);
    Q_EMIT restrictionReasonChanged();
    Q_EMIT coreChanged();
}

inline QString UserObject::restrictionReason() const {
    return m_core.restrictionReason();
}

inline void UserObject::setSelf(bool self) {
    if(m_core.self() == self) return;
    m_core.setSelf(self);
    Q_EMIT selfChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::self() const {
    return m_core.self();
}

inline void UserObject::setStatus(UserStatusObject* status) {
    if(m_status == status) return;
    if(m_status) delete m_status;
    m_status = status;
    if(m_status) {
        m_status->setParent(this);
        m_core.setStatus(m_status->core());
        connect(m_status.data(), &UserStatusObject::coreChanged, this, &UserObject::coreStatusChanged);
    }
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

inline UserStatusObject*  UserObject::status() const {
    return m_status;
}

inline void UserObject::setUsername(const QString &username) {
    if(m_core.username() == username) return;
    m_core.setUsername(username);
    Q_EMIT usernameChanged();
    Q_EMIT coreChanged();
}

inline QString UserObject::username() const {
    return m_core.username();
}

inline void UserObject::setVerified(bool verified) {
    if(m_core.verified() == verified) return;
    m_core.setVerified(verified);
    Q_EMIT verifiedChanged();
    Q_EMIT coreChanged();
}

inline bool UserObject::verified() const {
    return m_core.verified();
}

inline UserObject &UserObject::operator =(const User &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_photo->setCore(b.photo());
    m_status->setCore(b.status());

    Q_EMIT accessHashChanged();
    Q_EMIT botChanged();
    Q_EMIT botChatHistoryChanged();
    Q_EMIT botInfoVersionChanged();
    Q_EMIT botInlineGeoChanged();
    Q_EMIT botInlinePlaceholderChanged();
    Q_EMIT botNochatsChanged();
    Q_EMIT contactChanged();
    Q_EMIT deletedChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT flagsChanged();
    Q_EMIT idChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT minChanged();
    Q_EMIT mutualContactChanged();
    Q_EMIT phoneChanged();
    Q_EMIT photoChanged();
    Q_EMIT restrictedChanged();
    Q_EMIT restrictionReasonChanged();
    Q_EMIT selfChanged();
    Q_EMIT statusChanged();
    Q_EMIT usernameChanged();
    Q_EMIT verifiedChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool UserObject::operator ==(const User &b) const {
    return m_core == b;
}

inline void UserObject::setClassType(quint32 classType) {
    User::UserClassType result;
    switch(classType) {
    case TypeUserEmpty:
        result = User::typeUserEmpty;
        break;
    case TypeUser:
        result = User::typeUser;
        break;
    default:
        result = User::typeUserEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 UserObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case User::typeUserEmpty:
        result = TypeUserEmpty;
        break;
    case User::typeUser:
        result = TypeUser;
        break;
    default:
        result = TypeUserEmpty;
        break;
    }

    return result;
}

inline void UserObject::setCore(const User &core) {
    operator =(core);
}

inline User UserObject::core() const {
    return m_core;
}

inline void UserObject::corePhotoChanged() {
    if(m_core.photo() == m_photo->core()) return;
    m_core.setPhoto(m_photo->core());
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

inline void UserObject::coreStatusChanged() {
    if(m_core.status() == m_status->core()) return;
    m_core.setStatus(m_status->core());
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_USER_OBJECT
