// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHANNELPARTICIPANTROLE
#define LQTG_TYPE_CHANNELPARTICIPANTROLE

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>


class LIBQTELEGRAMSHARED_EXPORT ChannelParticipantRole : public TelegramTypeObject
{
public:
    enum ChannelParticipantRoleClassType {
        typeChannelRoleEmpty = 0xb285a0c6,
        typeChannelRoleModerator = 0x9618d975,
        typeChannelRoleEditor = 0x820bfe8c
    };

    ChannelParticipantRole(ChannelParticipantRoleClassType classType = typeChannelRoleEmpty, InboundPkt *in = 0);
    ChannelParticipantRole(InboundPkt *in);
    ChannelParticipantRole(const Null&);
    virtual ~ChannelParticipantRole();

    void setClassType(ChannelParticipantRoleClassType classType);
    ChannelParticipantRoleClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ChannelParticipantRole fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ChannelParticipantRole &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    ChannelParticipantRoleClassType m_classType;
};

Q_DECLARE_METATYPE(ChannelParticipantRole)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChannelParticipantRole &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChannelParticipantRole &item);

inline ChannelParticipantRole::ChannelParticipantRole(ChannelParticipantRoleClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

inline ChannelParticipantRole::ChannelParticipantRole(InboundPkt *in) :
    m_classType(typeChannelRoleEmpty)
{
    fetch(in);
}

inline ChannelParticipantRole::ChannelParticipantRole(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeChannelRoleEmpty)
{
}

inline ChannelParticipantRole::~ChannelParticipantRole() {
}

inline bool ChannelParticipantRole::operator ==(const ChannelParticipantRole &b) const {
    return m_classType == b.m_classType;
}

inline void ChannelParticipantRole::setClassType(ChannelParticipantRole::ChannelParticipantRoleClassType classType) {
    m_classType = classType;
}

inline ChannelParticipantRole::ChannelParticipantRoleClassType ChannelParticipantRole::classType() const {
    return m_classType;
}

inline bool ChannelParticipantRole::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelRoleEmpty: {
        m_classType = static_cast<ChannelParticipantRoleClassType>(x);
        return true;
    }
        break;
    
    case typeChannelRoleModerator: {
        m_classType = static_cast<ChannelParticipantRoleClassType>(x);
        return true;
    }
        break;
    
    case typeChannelRoleEditor: {
        m_classType = static_cast<ChannelParticipantRoleClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool ChannelParticipantRole::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelRoleEmpty: {
        return true;
    }
        break;
    
    case typeChannelRoleModerator: {
        return true;
    }
        break;
    
    case typeChannelRoleEditor: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> ChannelParticipantRole::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelRoleEmpty: {
        result["classType"] = "ChannelParticipantRole::typeChannelRoleEmpty";
        return result;
    }
        break;
    
    case typeChannelRoleModerator: {
        result["classType"] = "ChannelParticipantRole::typeChannelRoleModerator";
        return result;
    }
        break;
    
    case typeChannelRoleEditor: {
        result["classType"] = "ChannelParticipantRole::typeChannelRoleEditor";
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline ChannelParticipantRole ChannelParticipantRole::fromMap(const QMap<QString, QVariant> &map) {
    ChannelParticipantRole result;
    if(map.value("classType").toString() == "ChannelParticipantRole::typeChannelRoleEmpty") {
        result.setClassType(typeChannelRoleEmpty);
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipantRole::typeChannelRoleModerator") {
        result.setClassType(typeChannelRoleModerator);
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipantRole::typeChannelRoleEditor") {
        result.setClassType(typeChannelRoleEditor);
        return result;
    }
    return result;
}

inline QByteArray ChannelParticipantRole::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const ChannelParticipantRole &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelParticipantRole::typeChannelRoleEmpty:
        
        break;
    case ChannelParticipantRole::typeChannelRoleModerator:
        
        break;
    case ChannelParticipantRole::typeChannelRoleEditor:
        
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, ChannelParticipantRole &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelParticipantRole::ChannelParticipantRoleClassType>(type));
    switch(type) {
    case ChannelParticipantRole::typeChannelRoleEmpty: {
        
    }
        break;
    case ChannelParticipantRole::typeChannelRoleModerator: {
        
    }
        break;
    case ChannelParticipantRole::typeChannelRoleEditor: {
        
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_CHANNELPARTICIPANTROLE
