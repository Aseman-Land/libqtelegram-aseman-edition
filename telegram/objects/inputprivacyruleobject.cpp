// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputprivacyruleobject.h"

InputPrivacyRuleObject::InputPrivacyRuleObject(const InputPrivacyRule &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputPrivacyRuleObject::InputPrivacyRuleObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputPrivacyRuleObject::~InputPrivacyRuleObject() {
}

void InputPrivacyRuleObject::setUsers(const QList<InputUser> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<InputUser> InputPrivacyRuleObject::users() const {
    return m_core.users();
}

InputPrivacyRuleObject &InputPrivacyRuleObject::operator =(const InputPrivacyRule &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputPrivacyRuleObject::operator ==(const InputPrivacyRule &b) const {
    return m_core == b;
}

void InputPrivacyRuleObject::setClassType(quint32 classType) {
    InputPrivacyRule::InputPrivacyRuleClassType result;
    switch(classType) {
    case TypeInputPrivacyValueAllowContacts:
        result = InputPrivacyRule::typeInputPrivacyValueAllowContacts;
        break;
    case TypeInputPrivacyValueAllowAll:
        result = InputPrivacyRule::typeInputPrivacyValueAllowAll;
        break;
    case TypeInputPrivacyValueAllowUsers:
        result = InputPrivacyRule::typeInputPrivacyValueAllowUsers;
        break;
    case TypeInputPrivacyValueDisallowContacts:
        result = InputPrivacyRule::typeInputPrivacyValueDisallowContacts;
        break;
    case TypeInputPrivacyValueDisallowAll:
        result = InputPrivacyRule::typeInputPrivacyValueDisallowAll;
        break;
    case TypeInputPrivacyValueDisallowUsers:
        result = InputPrivacyRule::typeInputPrivacyValueDisallowUsers;
        break;
    default:
        result = InputPrivacyRule::typeInputPrivacyValueAllowContacts;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputPrivacyRuleObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputPrivacyRule::typeInputPrivacyValueAllowContacts:
        result = TypeInputPrivacyValueAllowContacts;
        break;
    case InputPrivacyRule::typeInputPrivacyValueAllowAll:
        result = TypeInputPrivacyValueAllowAll;
        break;
    case InputPrivacyRule::typeInputPrivacyValueAllowUsers:
        result = TypeInputPrivacyValueAllowUsers;
        break;
    case InputPrivacyRule::typeInputPrivacyValueDisallowContacts:
        result = TypeInputPrivacyValueDisallowContacts;
        break;
    case InputPrivacyRule::typeInputPrivacyValueDisallowAll:
        result = TypeInputPrivacyValueDisallowAll;
        break;
    case InputPrivacyRule::typeInputPrivacyValueDisallowUsers:
        result = TypeInputPrivacyValueDisallowUsers;
        break;
    default:
        result = TypeInputPrivacyValueAllowContacts;
        break;
    }

    return result;
}

void InputPrivacyRuleObject::setCore(const InputPrivacyRule &core) {
    operator =(core);
}

InputPrivacyRule InputPrivacyRuleObject::core() const {
    return m_core;
}

