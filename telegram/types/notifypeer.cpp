// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "notifypeer.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

NotifyPeer::NotifyPeer(NotifyPeerClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

NotifyPeer::NotifyPeer(InboundPkt *in) :
    m_classType(typeNotifyPeer)
{
    fetch(in);
}

NotifyPeer::NotifyPeer(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeNotifyPeer)
{
}

NotifyPeer::~NotifyPeer() {
}

void NotifyPeer::setPeer(const Peer &peer) {
    m_peer = peer;
}

Peer NotifyPeer::peer() const {
    return m_peer;
}

bool NotifyPeer::operator ==(const NotifyPeer &b) const {
    return m_classType == b.m_classType &&
           m_peer == b.m_peer;
}

void NotifyPeer::setClassType(NotifyPeer::NotifyPeerClassType classType) {
    m_classType = classType;
}

NotifyPeer::NotifyPeerClassType NotifyPeer::classType() const {
    return m_classType;
}

bool NotifyPeer::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeNotifyPeer: {
        m_peer.fetch(in);
        m_classType = static_cast<NotifyPeerClassType>(x);
        return true;
    }
        break;
    
    case typeNotifyUsers: {
        m_classType = static_cast<NotifyPeerClassType>(x);
        return true;
    }
        break;
    
    case typeNotifyChats: {
        m_classType = static_cast<NotifyPeerClassType>(x);
        return true;
    }
        break;
    
    case typeNotifyAll: {
        m_classType = static_cast<NotifyPeerClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool NotifyPeer::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeNotifyPeer: {
        m_peer.push(out);
        return true;
    }
        break;
    
    case typeNotifyUsers: {
        return true;
    }
        break;
    
    case typeNotifyChats: {
        return true;
    }
        break;
    
    case typeNotifyAll: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> NotifyPeer::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeNotifyPeer: {
        result["classType"] = "NotifyPeer::typeNotifyPeer";
        result["peer"] = m_peer.toMap();
        return result;
    }
        break;
    
    case typeNotifyUsers: {
        result["classType"] = "NotifyPeer::typeNotifyUsers";
        return result;
    }
        break;
    
    case typeNotifyChats: {
        result["classType"] = "NotifyPeer::typeNotifyChats";
        return result;
    }
        break;
    
    case typeNotifyAll: {
        result["classType"] = "NotifyPeer::typeNotifyAll";
        return result;
    }
        break;
    
    default:
        return result;
    }
}

NotifyPeer NotifyPeer::fromMap(const QMap<QString, QVariant> &map) {
    NotifyPeer result;
    if(map.value("classType").toString() == "NotifyPeer::typeNotifyPeer") {
        result.setClassType(typeNotifyPeer);
        result.setPeer( Peer::fromMap(map.value("peer").toMap()) );
        return result;
    }
    if(map.value("classType").toString() == "NotifyPeer::typeNotifyUsers") {
        result.setClassType(typeNotifyUsers);
        return result;
    }
    if(map.value("classType").toString() == "NotifyPeer::typeNotifyChats") {
        result.setClassType(typeNotifyChats);
        return result;
    }
    if(map.value("classType").toString() == "NotifyPeer::typeNotifyAll") {
        result.setClassType(typeNotifyAll);
        return result;
    }
    return result;
}

QByteArray NotifyPeer::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const NotifyPeer &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case NotifyPeer::typeNotifyPeer:
        stream << item.peer();
        break;
    case NotifyPeer::typeNotifyUsers:
        
        break;
    case NotifyPeer::typeNotifyChats:
        
        break;
    case NotifyPeer::typeNotifyAll:
        
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, NotifyPeer &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<NotifyPeer::NotifyPeerClassType>(type));
    switch(type) {
    case NotifyPeer::typeNotifyPeer: {
        Peer m_peer;
        stream >> m_peer;
        item.setPeer(m_peer);
    }
        break;
    case NotifyPeer::typeNotifyUsers: {
        
    }
        break;
    case NotifyPeer::typeNotifyChats: {
        
    }
        break;
    case NotifyPeer::typeNotifyAll: {
        
    }
        break;
    }
    return stream;
}

