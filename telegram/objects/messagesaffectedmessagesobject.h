// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESAFFECTEDMESSAGES_OBJECT
#define LQTG_TYPE_MESSAGESAFFECTEDMESSAGES_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/messagesaffectedmessages.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT MessagesAffectedMessagesObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(MessagesAffectedMessagesClassType)
    Q_PROPERTY(qint32 pts READ pts WRITE setPts NOTIFY ptsChanged)
    Q_PROPERTY(qint32 ptsCount READ ptsCount WRITE setPtsCount NOTIFY ptsCountChanged)
    Q_PROPERTY(MessagesAffectedMessages core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum MessagesAffectedMessagesClassType {
        TypeMessagesAffectedMessages
    };

    MessagesAffectedMessagesObject(const MessagesAffectedMessages &core, QObject *parent = 0);
    MessagesAffectedMessagesObject(QObject *parent = 0);
    virtual ~MessagesAffectedMessagesObject();

    void setPts(qint32 pts);
    qint32 pts() const;

    void setPtsCount(qint32 ptsCount);
    qint32 ptsCount() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const MessagesAffectedMessages &core);
    MessagesAffectedMessages core() const;

    MessagesAffectedMessagesObject &operator =(const MessagesAffectedMessages &b);
    bool operator ==(const MessagesAffectedMessages &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void ptsChanged();
    void ptsCountChanged();

private Q_SLOTS:

private:
    MessagesAffectedMessages m_core;
};

inline MessagesAffectedMessagesObject::MessagesAffectedMessagesObject(const MessagesAffectedMessages &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline MessagesAffectedMessagesObject::MessagesAffectedMessagesObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline MessagesAffectedMessagesObject::~MessagesAffectedMessagesObject() {
}

inline void MessagesAffectedMessagesObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessagesAffectedMessagesObject::pts() const {
    return m_core.pts();
}

inline void MessagesAffectedMessagesObject::setPtsCount(qint32 ptsCount) {
    if(m_core.ptsCount() == ptsCount) return;
    m_core.setPtsCount(ptsCount);
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessagesAffectedMessagesObject::ptsCount() const {
    return m_core.ptsCount();
}

inline MessagesAffectedMessagesObject &MessagesAffectedMessagesObject::operator =(const MessagesAffectedMessages &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT ptsChanged();
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool MessagesAffectedMessagesObject::operator ==(const MessagesAffectedMessages &b) const {
    return m_core == b;
}

inline void MessagesAffectedMessagesObject::setClassType(quint32 classType) {
    MessagesAffectedMessages::MessagesAffectedMessagesClassType result;
    switch(classType) {
    case TypeMessagesAffectedMessages:
        result = MessagesAffectedMessages::typeMessagesAffectedMessages;
        break;
    default:
        result = MessagesAffectedMessages::typeMessagesAffectedMessages;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 MessagesAffectedMessagesObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesAffectedMessages::typeMessagesAffectedMessages:
        result = TypeMessagesAffectedMessages;
        break;
    default:
        result = TypeMessagesAffectedMessages;
        break;
    }

    return result;
}

inline void MessagesAffectedMessagesObject::setCore(const MessagesAffectedMessages &core) {
    operator =(core);
}

inline MessagesAffectedMessages MessagesAffectedMessagesObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_MESSAGESAFFECTEDMESSAGES_OBJECT
