// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "reportreasonobject.h"

ReportReasonObject::ReportReasonObject(const ReportReason &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ReportReasonObject::ReportReasonObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ReportReasonObject::~ReportReasonObject() {
}

void ReportReasonObject::setText(const QString &text) {
    if(m_core.text() == text) return;
    m_core.setText(text);
    Q_EMIT textChanged();
    Q_EMIT coreChanged();
}

QString ReportReasonObject::text() const {
    return m_core.text();
}

ReportReasonObject &ReportReasonObject::operator =(const ReportReason &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT textChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ReportReasonObject::operator ==(const ReportReason &b) const {
    return m_core == b;
}

void ReportReasonObject::setClassType(quint32 classType) {
    ReportReason::ReportReasonClassType result;
    switch(classType) {
    case TypeInputReportReasonSpam:
        result = ReportReason::typeInputReportReasonSpam;
        break;
    case TypeInputReportReasonViolence:
        result = ReportReason::typeInputReportReasonViolence;
        break;
    case TypeInputReportReasonPornography:
        result = ReportReason::typeInputReportReasonPornography;
        break;
    case TypeInputReportReasonOther:
        result = ReportReason::typeInputReportReasonOther;
        break;
    default:
        result = ReportReason::typeInputReportReasonSpam;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ReportReasonObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ReportReason::typeInputReportReasonSpam:
        result = TypeInputReportReasonSpam;
        break;
    case ReportReason::typeInputReportReasonViolence:
        result = TypeInputReportReasonViolence;
        break;
    case ReportReason::typeInputReportReasonPornography:
        result = TypeInputReportReasonPornography;
        break;
    case ReportReason::typeInputReportReasonOther:
        result = TypeInputReportReasonOther;
        break;
    default:
        result = TypeInputReportReasonSpam;
        break;
    }

    return result;
}

void ReportReasonObject::setCore(const ReportReason &core) {
    operator =(core);
}

ReportReason ReportReasonObject::core() const {
    return m_core;
}

