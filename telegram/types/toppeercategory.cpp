// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "toppeercategory.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

TopPeerCategory::TopPeerCategory(TopPeerCategoryClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

TopPeerCategory::TopPeerCategory(InboundPkt *in) :
    m_classType(typeTopPeerCategoryBotsPM)
{
    fetch(in);
}

TopPeerCategory::TopPeerCategory(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeTopPeerCategoryBotsPM)
{
}

TopPeerCategory::~TopPeerCategory() {
}

bool TopPeerCategory::operator ==(const TopPeerCategory &b) const {
    return m_classType == b.m_classType;
}

void TopPeerCategory::setClassType(TopPeerCategory::TopPeerCategoryClassType classType) {
    m_classType = classType;
}

TopPeerCategory::TopPeerCategoryClassType TopPeerCategory::classType() const {
    return m_classType;
}

bool TopPeerCategory::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeTopPeerCategoryBotsPM: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    case typeTopPeerCategoryBotsInline: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    case typeTopPeerCategoryCorrespondents: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    case typeTopPeerCategoryGroups: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    case typeTopPeerCategoryChannels: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool TopPeerCategory::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeTopPeerCategoryBotsPM: {
        return true;
    }
        break;
    
    case typeTopPeerCategoryBotsInline: {
        return true;
    }
        break;
    
    case typeTopPeerCategoryCorrespondents: {
        return true;
    }
        break;
    
    case typeTopPeerCategoryGroups: {
        return true;
    }
        break;
    
    case typeTopPeerCategoryChannels: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray TopPeerCategory::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const TopPeerCategory &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case TopPeerCategory::typeTopPeerCategoryBotsPM:
        
        break;
    case TopPeerCategory::typeTopPeerCategoryBotsInline:
        
        break;
    case TopPeerCategory::typeTopPeerCategoryCorrespondents:
        
        break;
    case TopPeerCategory::typeTopPeerCategoryGroups:
        
        break;
    case TopPeerCategory::typeTopPeerCategoryChannels:
        
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, TopPeerCategory &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<TopPeerCategory::TopPeerCategoryClassType>(type));
    switch(type) {
    case TopPeerCategory::typeTopPeerCategoryBotsPM: {
        
    }
        break;
    case TopPeerCategory::typeTopPeerCategoryBotsInline: {
        
    }
        break;
    case TopPeerCategory::typeTopPeerCategoryCorrespondents: {
        
    }
        break;
    case TopPeerCategory::typeTopPeerCategoryGroups: {
        
    }
        break;
    case TopPeerCategory::typeTopPeerCategoryChannels: {
        
    }
        break;
    }
    return stream;
}

