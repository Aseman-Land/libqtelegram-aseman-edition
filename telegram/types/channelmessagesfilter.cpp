// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelmessagesfilter.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ChannelMessagesFilter::ChannelMessagesFilter(ChannelMessagesFilterType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ChannelMessagesFilter::ChannelMessagesFilter(InboundPkt *in) :
    m_flags(0),
    m_classType(typeChannelMessagesFilterEmpty)
{
    fetch(in);
}

ChannelMessagesFilter::ChannelMessagesFilter(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeChannelMessagesFilterEmpty)
{
}

ChannelMessagesFilter::~ChannelMessagesFilter() {
}

void ChannelMessagesFilter::setExcludeNewMessages(bool excludeNewMessages) {
    if(excludeNewMessages) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool ChannelMessagesFilter::excludeNewMessages() const {
    return (m_flags & 1<<1);
}

void ChannelMessagesFilter::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 ChannelMessagesFilter::flags() const {
    return m_flags;
}

void ChannelMessagesFilter::setImportantOnly(bool importantOnly) {
    if(importantOnly) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool ChannelMessagesFilter::importantOnly() const {
    return (m_flags & 1<<0);
}

void ChannelMessagesFilter::setRanges(const QList<MessageRange> &ranges) {
    m_ranges = ranges;
}

QList<MessageRange> ChannelMessagesFilter::ranges() const {
    return m_ranges;
}

bool ChannelMessagesFilter::operator ==(const ChannelMessagesFilter &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_ranges == b.m_ranges;
}

void ChannelMessagesFilter::setClassType(ChannelMessagesFilter::ChannelMessagesFilterType classType) {
    m_classType = classType;
}

ChannelMessagesFilter::ChannelMessagesFilterType ChannelMessagesFilter::classType() const {
    return m_classType;
}

bool ChannelMessagesFilter::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelMessagesFilterEmpty: {
        m_classType = static_cast<ChannelMessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeChannelMessagesFilter: {
        m_flags = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_ranges_length = in->fetchInt();
        m_ranges.clear();
        for (qint32 i = 0; i < m_ranges_length; i++) {
            MessageRange type;
            type.fetch(in);
            m_ranges.append(type);
        }
        m_classType = static_cast<ChannelMessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeChannelMessagesFilterCollapsed: {
        m_classType = static_cast<ChannelMessagesFilterType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ChannelMessagesFilter::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelMessagesFilterEmpty: {
        return true;
    }
        break;
    
    case typeChannelMessagesFilter: {
        out->appendInt(m_flags);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_ranges.count());
        for (qint32 i = 0; i < m_ranges.count(); i++) {
            m_ranges[i].push(out);
        }
        return true;
    }
        break;
    
    case typeChannelMessagesFilterCollapsed: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QDataStream &operator<<(QDataStream &stream, const ChannelMessagesFilter &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelMessagesFilter::typeChannelMessagesFilterEmpty:
        
        break;
    case ChannelMessagesFilter::typeChannelMessagesFilter:
        stream << item.flags();
        stream << item.ranges();
        break;
    case ChannelMessagesFilter::typeChannelMessagesFilterCollapsed:
        
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ChannelMessagesFilter &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelMessagesFilter::ChannelMessagesFilterType>(type));
    switch(type) {
    case ChannelMessagesFilter::typeChannelMessagesFilterEmpty: {
        
    }
        break;
    case ChannelMessagesFilter::typeChannelMessagesFilter: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QList<MessageRange> m_ranges;
        stream >> m_ranges;
        item.setRanges(m_ranges);
    }
        break;
    case ChannelMessagesFilter::typeChannelMessagesFilterCollapsed: {
        
    }
        break;
    }
    return stream;
}

