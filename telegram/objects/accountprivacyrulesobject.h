// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ACCOUNTPRIVACYRULES_OBJECT
#define LQTG_TYPE_ACCOUNTPRIVACYRULES_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/accountprivacyrules.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AccountPrivacyRulesObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AccountPrivacyRulesClassType)
    Q_PROPERTY(QList<PrivacyRule> rules READ rules WRITE setRules NOTIFY rulesChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(AccountPrivacyRules core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AccountPrivacyRulesClassType {
        TypeAccountPrivacyRules
    };

    AccountPrivacyRulesObject(const AccountPrivacyRules &core, QObject *parent = 0);
    AccountPrivacyRulesObject(QObject *parent = 0);
    virtual ~AccountPrivacyRulesObject();

    void setRules(const QList<PrivacyRule> &rules);
    QList<PrivacyRule> rules() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AccountPrivacyRules &core);
    AccountPrivacyRules core() const;

    AccountPrivacyRulesObject &operator =(const AccountPrivacyRules &b);
    bool operator ==(const AccountPrivacyRules &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void rulesChanged();
    void usersChanged();

private Q_SLOTS:

private:
    AccountPrivacyRules m_core;
};

inline AccountPrivacyRulesObject::AccountPrivacyRulesObject(const AccountPrivacyRules &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AccountPrivacyRulesObject::AccountPrivacyRulesObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AccountPrivacyRulesObject::~AccountPrivacyRulesObject() {
}

inline void AccountPrivacyRulesObject::setRules(const QList<PrivacyRule> &rules) {
    if(m_core.rules() == rules) return;
    m_core.setRules(rules);
    Q_EMIT rulesChanged();
    Q_EMIT coreChanged();
}

inline QList<PrivacyRule> AccountPrivacyRulesObject::rules() const {
    return m_core.rules();
}

inline void AccountPrivacyRulesObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> AccountPrivacyRulesObject::users() const {
    return m_core.users();
}

inline AccountPrivacyRulesObject &AccountPrivacyRulesObject::operator =(const AccountPrivacyRules &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT rulesChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AccountPrivacyRulesObject::operator ==(const AccountPrivacyRules &b) const {
    return m_core == b;
}

inline void AccountPrivacyRulesObject::setClassType(quint32 classType) {
    AccountPrivacyRules::AccountPrivacyRulesClassType result;
    switch(classType) {
    case TypeAccountPrivacyRules:
        result = AccountPrivacyRules::typeAccountPrivacyRules;
        break;
    default:
        result = AccountPrivacyRules::typeAccountPrivacyRules;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AccountPrivacyRulesObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AccountPrivacyRules::typeAccountPrivacyRules:
        result = TypeAccountPrivacyRules;
        break;
    default:
        result = TypeAccountPrivacyRules;
        break;
    }

    return result;
}

inline void AccountPrivacyRulesObject::setCore(const AccountPrivacyRules &core) {
    operator =(core);
}

inline AccountPrivacyRules AccountPrivacyRulesObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_ACCOUNTPRIVACYRULES_OBJECT
