// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "helpappchangelogobject.h"

HelpAppChangelogObject::HelpAppChangelogObject(const HelpAppChangelog &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

HelpAppChangelogObject::HelpAppChangelogObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

HelpAppChangelogObject::~HelpAppChangelogObject() {
}

void HelpAppChangelogObject::setText(const QString &text) {
    if(m_core.text() == text) return;
    m_core.setText(text);
    Q_EMIT textChanged();
    Q_EMIT coreChanged();
}

QString HelpAppChangelogObject::text() const {
    return m_core.text();
}

HelpAppChangelogObject &HelpAppChangelogObject::operator =(const HelpAppChangelog &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT textChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool HelpAppChangelogObject::operator ==(const HelpAppChangelog &b) const {
    return m_core == b;
}

void HelpAppChangelogObject::setClassType(quint32 classType) {
    HelpAppChangelog::HelpAppChangelogClassType result;
    switch(classType) {
    case TypeHelpAppChangelogEmpty:
        result = HelpAppChangelog::typeHelpAppChangelogEmpty;
        break;
    case TypeHelpAppChangelog:
        result = HelpAppChangelog::typeHelpAppChangelog;
        break;
    default:
        result = HelpAppChangelog::typeHelpAppChangelogEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 HelpAppChangelogObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case HelpAppChangelog::typeHelpAppChangelogEmpty:
        result = TypeHelpAppChangelogEmpty;
        break;
    case HelpAppChangelog::typeHelpAppChangelog:
        result = TypeHelpAppChangelog;
        break;
    default:
        result = TypeHelpAppChangelogEmpty;
        break;
    }

    return result;
}

void HelpAppChangelogObject::setCore(const HelpAppChangelog &core) {
    operator =(core);
}

HelpAppChangelog HelpAppChangelogObject::core() const {
    return m_core;
}

