// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_REPLYMARKUP
#define LQTG_TYPE_REPLYMARKUP

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include <QtGlobal>
#include <QList>
#include "keyboardbuttonrow.h"

class LIBQTELEGRAMSHARED_EXPORT ReplyMarkup : public TelegramTypeObject
{
public:
    enum ReplyMarkupClassType {
        typeReplyKeyboardHide = 0xa03e5b85,
        typeReplyKeyboardForceReply = 0xf4108aa0,
        typeReplyKeyboardMarkup = 0x3502758c,
        typeReplyInlineMarkup = 0x48a30254
    };

    ReplyMarkup(ReplyMarkupClassType classType = typeReplyKeyboardHide, InboundPkt *in = 0);
    ReplyMarkup(InboundPkt *in);
    ReplyMarkup(const Null&);
    virtual ~ReplyMarkup();

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setResize(bool resize);
    bool resize() const;

    void setRows(const QList<KeyboardButtonRow> &rows);
    QList<KeyboardButtonRow> rows() const;

    void setSelective(bool selective);
    bool selective() const;

    void setSingleUse(bool singleUse);
    bool singleUse() const;

    void setClassType(ReplyMarkupClassType classType);
    ReplyMarkupClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ReplyMarkup fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ReplyMarkup &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_flags;
    QList<KeyboardButtonRow> m_rows;
    ReplyMarkupClassType m_classType;
};

Q_DECLARE_METATYPE(ReplyMarkup)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ReplyMarkup &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ReplyMarkup &item);

#endif // LQTG_TYPE_REPLYMARKUP
