// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSCONTACTS_OBJECT
#define LQTG_TYPE_CONTACTSCONTACTS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactscontacts.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ContactsContactsObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactsContactsClassType)
    Q_PROPERTY(QList<Contact> contacts READ contacts WRITE setContacts NOTIFY contactsChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(ContactsContacts core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactsContactsClassType {
        TypeContactsContactsNotModified,
        TypeContactsContacts
    };

    ContactsContactsObject(const ContactsContacts &core, QObject *parent = 0);
    ContactsContactsObject(QObject *parent = 0);
    virtual ~ContactsContactsObject();

    void setContacts(const QList<Contact> &contacts);
    QList<Contact> contacts() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactsContacts &core);
    ContactsContacts core() const;

    ContactsContactsObject &operator =(const ContactsContacts &b);
    bool operator ==(const ContactsContacts &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void contactsChanged();
    void usersChanged();

private Q_SLOTS:

private:
    ContactsContacts m_core;
};

inline ContactsContactsObject::ContactsContactsObject(const ContactsContacts &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ContactsContactsObject::ContactsContactsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ContactsContactsObject::~ContactsContactsObject() {
}

inline void ContactsContactsObject::setContacts(const QList<Contact> &contacts) {
    if(m_core.contacts() == contacts) return;
    m_core.setContacts(contacts);
    Q_EMIT contactsChanged();
    Q_EMIT coreChanged();
}

inline QList<Contact> ContactsContactsObject::contacts() const {
    return m_core.contacts();
}

inline void ContactsContactsObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> ContactsContactsObject::users() const {
    return m_core.users();
}

inline ContactsContactsObject &ContactsContactsObject::operator =(const ContactsContacts &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT contactsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactsContactsObject::operator ==(const ContactsContacts &b) const {
    return m_core == b;
}

inline void ContactsContactsObject::setClassType(quint32 classType) {
    ContactsContacts::ContactsContactsClassType result;
    switch(classType) {
    case TypeContactsContactsNotModified:
        result = ContactsContacts::typeContactsContactsNotModified;
        break;
    case TypeContactsContacts:
        result = ContactsContacts::typeContactsContacts;
        break;
    default:
        result = ContactsContacts::typeContactsContactsNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactsContactsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsContacts::typeContactsContactsNotModified:
        result = TypeContactsContactsNotModified;
        break;
    case ContactsContacts::typeContactsContacts:
        result = TypeContactsContacts;
        break;
    default:
        result = TypeContactsContactsNotModified;
        break;
    }

    return result;
}

inline void ContactsContactsObject::setCore(const ContactsContacts &core) {
    operator =(core);
}

inline ContactsContacts ContactsContactsObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CONTACTSCONTACTS_OBJECT
