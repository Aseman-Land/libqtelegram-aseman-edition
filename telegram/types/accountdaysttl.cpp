// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "accountdaysttl.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

AccountDaysTTL::AccountDaysTTL(AccountDaysTTLClassType classType, InboundPkt *in) :
    m_days(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

AccountDaysTTL::AccountDaysTTL(InboundPkt *in) :
    m_days(0),
    m_classType(typeAccountDaysTTL)
{
    fetch(in);
}

AccountDaysTTL::AccountDaysTTL(const Null &null) :
    TelegramTypeObject(null),
    m_days(0),
    m_classType(typeAccountDaysTTL)
{
}

AccountDaysTTL::~AccountDaysTTL() {
}

void AccountDaysTTL::setDays(qint32 days) {
    m_days = days;
}

qint32 AccountDaysTTL::days() const {
    return m_days;
}

bool AccountDaysTTL::operator ==(const AccountDaysTTL &b) const {
    return m_classType == b.m_classType &&
           m_days == b.m_days;
}

void AccountDaysTTL::setClassType(AccountDaysTTL::AccountDaysTTLClassType classType) {
    m_classType = classType;
}

AccountDaysTTL::AccountDaysTTLClassType AccountDaysTTL::classType() const {
    return m_classType;
}

bool AccountDaysTTL::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAccountDaysTTL: {
        m_days = in->fetchInt();
        m_classType = static_cast<AccountDaysTTLClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool AccountDaysTTL::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAccountDaysTTL: {
        out->appendInt(m_days);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray AccountDaysTTL::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const AccountDaysTTL &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AccountDaysTTL::typeAccountDaysTTL:
        stream << item.days();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, AccountDaysTTL &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AccountDaysTTL::AccountDaysTTLClassType>(type));
    switch(type) {
    case AccountDaysTTL::typeAccountDaysTTL: {
        qint32 m_days;
        stream >> m_days;
        item.setDays(m_days);
    }
        break;
    }
    return stream;
}

