// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_PEERNOTIFYEVENTS_OBJECT
#define LQTG_TYPE_PEERNOTIFYEVENTS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/peernotifyevents.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT PeerNotifyEventsObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(PeerNotifyEventsClassType)
    Q_PROPERTY(PeerNotifyEvents core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum PeerNotifyEventsClassType {
        TypePeerNotifyEventsEmpty,
        TypePeerNotifyEventsAll
    };

    PeerNotifyEventsObject(const PeerNotifyEvents &core, QObject *parent = 0);
    PeerNotifyEventsObject(QObject *parent = 0);
    virtual ~PeerNotifyEventsObject();

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const PeerNotifyEvents &core);
    PeerNotifyEvents core() const;

    PeerNotifyEventsObject &operator =(const PeerNotifyEvents &b);
    bool operator ==(const PeerNotifyEvents &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();

private Q_SLOTS:

private:
    PeerNotifyEvents m_core;
};

inline PeerNotifyEventsObject::PeerNotifyEventsObject(const PeerNotifyEvents &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline PeerNotifyEventsObject::PeerNotifyEventsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline PeerNotifyEventsObject::~PeerNotifyEventsObject() {
}

inline PeerNotifyEventsObject &PeerNotifyEventsObject::operator =(const PeerNotifyEvents &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

inline bool PeerNotifyEventsObject::operator ==(const PeerNotifyEvents &b) const {
    return m_core == b;
}

inline void PeerNotifyEventsObject::setClassType(quint32 classType) {
    PeerNotifyEvents::PeerNotifyEventsClassType result;
    switch(classType) {
    case TypePeerNotifyEventsEmpty:
        result = PeerNotifyEvents::typePeerNotifyEventsEmpty;
        break;
    case TypePeerNotifyEventsAll:
        result = PeerNotifyEvents::typePeerNotifyEventsAll;
        break;
    default:
        result = PeerNotifyEvents::typePeerNotifyEventsEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 PeerNotifyEventsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PeerNotifyEvents::typePeerNotifyEventsEmpty:
        result = TypePeerNotifyEventsEmpty;
        break;
    case PeerNotifyEvents::typePeerNotifyEventsAll:
        result = TypePeerNotifyEventsAll;
        break;
    default:
        result = TypePeerNotifyEventsEmpty;
        break;
    }

    return result;
}

inline void PeerNotifyEventsObject::setCore(const PeerNotifyEvents &core) {
    operator =(core);
}

inline PeerNotifyEvents PeerNotifyEventsObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_PEERNOTIFYEVENTS_OBJECT
