// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputencryptedfileobject.h"

InputEncryptedFileObject::InputEncryptedFileObject(const InputEncryptedFile &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputEncryptedFileObject::InputEncryptedFileObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputEncryptedFileObject::~InputEncryptedFileObject() {
}

void InputEncryptedFileObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 InputEncryptedFileObject::accessHash() const {
    return m_core.accessHash();
}

void InputEncryptedFileObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 InputEncryptedFileObject::id() const {
    return m_core.id();
}

void InputEncryptedFileObject::setKeyFingerprint(qint32 keyFingerprint) {
    if(m_core.keyFingerprint() == keyFingerprint) return;
    m_core.setKeyFingerprint(keyFingerprint);
    Q_EMIT keyFingerprintChanged();
    Q_EMIT coreChanged();
}

qint32 InputEncryptedFileObject::keyFingerprint() const {
    return m_core.keyFingerprint();
}

void InputEncryptedFileObject::setMd5Checksum(const QString &md5Checksum) {
    if(m_core.md5Checksum() == md5Checksum) return;
    m_core.setMd5Checksum(md5Checksum);
    Q_EMIT md5ChecksumChanged();
    Q_EMIT coreChanged();
}

QString InputEncryptedFileObject::md5Checksum() const {
    return m_core.md5Checksum();
}

void InputEncryptedFileObject::setParts(qint32 parts) {
    if(m_core.parts() == parts) return;
    m_core.setParts(parts);
    Q_EMIT partsChanged();
    Q_EMIT coreChanged();
}

qint32 InputEncryptedFileObject::parts() const {
    return m_core.parts();
}

InputEncryptedFileObject &InputEncryptedFileObject::operator =(const InputEncryptedFile &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT idChanged();
    Q_EMIT keyFingerprintChanged();
    Q_EMIT md5ChecksumChanged();
    Q_EMIT partsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputEncryptedFileObject::operator ==(const InputEncryptedFile &b) const {
    return m_core == b;
}

void InputEncryptedFileObject::setClassType(quint32 classType) {
    InputEncryptedFile::InputEncryptedFileClassType result;
    switch(classType) {
    case TypeInputEncryptedFileEmpty:
        result = InputEncryptedFile::typeInputEncryptedFileEmpty;
        break;
    case TypeInputEncryptedFileUploaded:
        result = InputEncryptedFile::typeInputEncryptedFileUploaded;
        break;
    case TypeInputEncryptedFile:
        result = InputEncryptedFile::typeInputEncryptedFile;
        break;
    case TypeInputEncryptedFileBigUploaded:
        result = InputEncryptedFile::typeInputEncryptedFileBigUploaded;
        break;
    default:
        result = InputEncryptedFile::typeInputEncryptedFileEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputEncryptedFileObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputEncryptedFile::typeInputEncryptedFileEmpty:
        result = TypeInputEncryptedFileEmpty;
        break;
    case InputEncryptedFile::typeInputEncryptedFileUploaded:
        result = TypeInputEncryptedFileUploaded;
        break;
    case InputEncryptedFile::typeInputEncryptedFile:
        result = TypeInputEncryptedFile;
        break;
    case InputEncryptedFile::typeInputEncryptedFileBigUploaded:
        result = TypeInputEncryptedFileBigUploaded;
        break;
    default:
        result = TypeInputEncryptedFileEmpty;
        break;
    }

    return result;
}

void InputEncryptedFileObject::setCore(const InputEncryptedFile &core) {
    operator =(core);
}

InputEncryptedFile InputEncryptedFileObject::core() const {
    return m_core;
}

