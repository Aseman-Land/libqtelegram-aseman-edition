// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesfoundgifsobject.h"

MessagesFoundGifsObject::MessagesFoundGifsObject(const MessagesFoundGifs &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesFoundGifsObject::MessagesFoundGifsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesFoundGifsObject::~MessagesFoundGifsObject() {
}

void MessagesFoundGifsObject::setNextOffset(qint32 nextOffset) {
    if(m_core.nextOffset() == nextOffset) return;
    m_core.setNextOffset(nextOffset);
    Q_EMIT nextOffsetChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesFoundGifsObject::nextOffset() const {
    return m_core.nextOffset();
}

void MessagesFoundGifsObject::setResults(const QList<FoundGif> &results) {
    if(m_core.results() == results) return;
    m_core.setResults(results);
    Q_EMIT resultsChanged();
    Q_EMIT coreChanged();
}

QList<FoundGif> MessagesFoundGifsObject::results() const {
    return m_core.results();
}

MessagesFoundGifsObject &MessagesFoundGifsObject::operator =(const MessagesFoundGifs &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT nextOffsetChanged();
    Q_EMIT resultsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesFoundGifsObject::operator ==(const MessagesFoundGifs &b) const {
    return m_core == b;
}

void MessagesFoundGifsObject::setClassType(quint32 classType) {
    MessagesFoundGifs::MessagesFoundGifsType result;
    switch(classType) {
    case TypeMessagesFoundGifs:
        result = MessagesFoundGifs::typeMessagesFoundGifs;
        break;
    default:
        result = MessagesFoundGifs::typeMessagesFoundGifs;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesFoundGifsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesFoundGifs::typeMessagesFoundGifs:
        result = TypeMessagesFoundGifs;
        break;
    default:
        result = TypeMessagesFoundGifs;
        break;
    }

    return result;
}

void MessagesFoundGifsObject::setCore(const MessagesFoundGifs &core) {
    operator =(core);
}

MessagesFoundGifs MessagesFoundGifsObject::core() const {
    return m_core;
}

