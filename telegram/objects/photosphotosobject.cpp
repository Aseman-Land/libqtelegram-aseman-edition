// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "photosphotosobject.h"

PhotosPhotosObject::PhotosPhotosObject(const PhotosPhotos &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

PhotosPhotosObject::PhotosPhotosObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

PhotosPhotosObject::~PhotosPhotosObject() {
}

void PhotosPhotosObject::setCount(qint32 count) {
    if(m_core.count() == count) return;
    m_core.setCount(count);
    Q_EMIT countChanged();
    Q_EMIT coreChanged();
}

qint32 PhotosPhotosObject::count() const {
    return m_core.count();
}

void PhotosPhotosObject::setPhotos(const QList<Photo> &photos) {
    if(m_core.photos() == photos) return;
    m_core.setPhotos(photos);
    Q_EMIT photosChanged();
    Q_EMIT coreChanged();
}

QList<Photo> PhotosPhotosObject::photos() const {
    return m_core.photos();
}

void PhotosPhotosObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> PhotosPhotosObject::users() const {
    return m_core.users();
}

PhotosPhotosObject &PhotosPhotosObject::operator =(const PhotosPhotos &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT countChanged();
    Q_EMIT photosChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PhotosPhotosObject::operator ==(const PhotosPhotos &b) const {
    return m_core == b;
}

void PhotosPhotosObject::setClassType(quint32 classType) {
    PhotosPhotos::PhotosPhotosClassType result;
    switch(classType) {
    case TypePhotosPhotos:
        result = PhotosPhotos::typePhotosPhotos;
        break;
    case TypePhotosPhotosSlice:
        result = PhotosPhotos::typePhotosPhotosSlice;
        break;
    default:
        result = PhotosPhotos::typePhotosPhotos;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PhotosPhotosObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PhotosPhotos::typePhotosPhotos:
        result = TypePhotosPhotos;
        break;
    case PhotosPhotos::typePhotosPhotosSlice:
        result = TypePhotosPhotosSlice;
        break;
    default:
        result = TypePhotosPhotos;
        break;
    }

    return result;
}

void PhotosPhotosObject::setCore(const PhotosPhotos &core) {
    operator =(core);
}

PhotosPhotos PhotosPhotosObject::core() const {
    return m_core;
}

