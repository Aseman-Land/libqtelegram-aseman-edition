// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelsmessageeditdataobject.h"

ChannelsMessageEditDataObject::ChannelsMessageEditDataObject(const ChannelsMessageEditData &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ChannelsMessageEditDataObject::ChannelsMessageEditDataObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ChannelsMessageEditDataObject::~ChannelsMessageEditDataObject() {
}

void ChannelsMessageEditDataObject::setCaption(bool caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

bool ChannelsMessageEditDataObject::caption() const {
    return m_core.caption();
}

void ChannelsMessageEditDataObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 ChannelsMessageEditDataObject::flags() const {
    return m_core.flags();
}

ChannelsMessageEditDataObject &ChannelsMessageEditDataObject::operator =(const ChannelsMessageEditData &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT captionChanged();
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ChannelsMessageEditDataObject::operator ==(const ChannelsMessageEditData &b) const {
    return m_core == b;
}

void ChannelsMessageEditDataObject::setClassType(quint32 classType) {
    ChannelsMessageEditData::ChannelsMessageEditDataType result;
    switch(classType) {
    case TypeChannelsMessageEditData:
        result = ChannelsMessageEditData::typeChannelsMessageEditData;
        break;
    default:
        result = ChannelsMessageEditData::typeChannelsMessageEditData;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ChannelsMessageEditDataObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelsMessageEditData::typeChannelsMessageEditData:
        result = TypeChannelsMessageEditData;
        break;
    default:
        result = TypeChannelsMessageEditData;
        break;
    }

    return result;
}

void ChannelsMessageEditDataObject::setCore(const ChannelsMessageEditData &core) {
    operator =(core);
}

ChannelsMessageEditData ChannelsMessageEditDataObject::core() const {
    return m_core;
}

