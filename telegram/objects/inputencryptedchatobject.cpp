// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputencryptedchatobject.h"

InputEncryptedChatObject::InputEncryptedChatObject(const InputEncryptedChat &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputEncryptedChatObject::InputEncryptedChatObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputEncryptedChatObject::~InputEncryptedChatObject() {
}

void InputEncryptedChatObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 InputEncryptedChatObject::accessHash() const {
    return m_core.accessHash();
}

void InputEncryptedChatObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

qint32 InputEncryptedChatObject::chatId() const {
    return m_core.chatId();
}

InputEncryptedChatObject &InputEncryptedChatObject::operator =(const InputEncryptedChat &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputEncryptedChatObject::operator ==(const InputEncryptedChat &b) const {
    return m_core == b;
}

void InputEncryptedChatObject::setClassType(quint32 classType) {
    InputEncryptedChat::InputEncryptedChatType result;
    switch(classType) {
    case TypeInputEncryptedChat:
        result = InputEncryptedChat::typeInputEncryptedChat;
        break;
    default:
        result = InputEncryptedChat::typeInputEncryptedChat;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputEncryptedChatObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputEncryptedChat::typeInputEncryptedChat:
        result = TypeInputEncryptedChat;
        break;
    default:
        result = TypeInputEncryptedChat;
        break;
    }

    return result;
}

void InputEncryptedChatObject::setCore(const InputEncryptedChat &core) {
    operator =(core);
}

InputEncryptedChat InputEncryptedChatObject::core() const {
    return m_core;
}

