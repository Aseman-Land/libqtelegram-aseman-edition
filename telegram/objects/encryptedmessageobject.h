// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ENCRYPTEDMESSAGE_OBJECT
#define LQTG_TYPE_ENCRYPTEDMESSAGE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/encryptedmessage.h"

#include <QPointer>
#include "encryptedfileobject.h"

class LIBQTELEGRAMSHARED_EXPORT EncryptedMessageObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(EncryptedMessageType)
    Q_PROPERTY(QByteArray bytes READ bytes WRITE setBytes NOTIFY bytesChanged)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(EncryptedFileObject* file READ file WRITE setFile NOTIFY fileChanged)
    Q_PROPERTY(qint64 randomId READ randomId WRITE setRandomId NOTIFY randomIdChanged)
    Q_PROPERTY(EncryptedMessage core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum EncryptedMessageType {
        TypeEncryptedMessage,
        TypeEncryptedMessageService
    };

    EncryptedMessageObject(const EncryptedMessage &core, QObject *parent = 0);
    EncryptedMessageObject(QObject *parent = 0);
    virtual ~EncryptedMessageObject();

    void setBytes(const QByteArray &bytes);
    QByteArray bytes() const;

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setFile(EncryptedFileObject* file);
    EncryptedFileObject* file() const;

    void setRandomId(qint64 randomId);
    qint64 randomId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const EncryptedMessage &core);
    EncryptedMessage core() const;

    EncryptedMessageObject &operator =(const EncryptedMessage &b);
    bool operator ==(const EncryptedMessage &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void bytesChanged();
    void chatIdChanged();
    void dateChanged();
    void fileChanged();
    void randomIdChanged();

private Q_SLOTS:
    void coreFileChanged();

private:
    QPointer<EncryptedFileObject> m_file;
    EncryptedMessage m_core;
};

#endif // LQTG_TYPE_ENCRYPTEDMESSAGE_OBJECT
