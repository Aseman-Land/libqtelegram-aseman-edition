// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "exportedmessagelinkobject.h"

ExportedMessageLinkObject::ExportedMessageLinkObject(const ExportedMessageLink &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ExportedMessageLinkObject::ExportedMessageLinkObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ExportedMessageLinkObject::~ExportedMessageLinkObject() {
}

void ExportedMessageLinkObject::setLink(const QString &link) {
    if(m_core.link() == link) return;
    m_core.setLink(link);
    Q_EMIT linkChanged();
    Q_EMIT coreChanged();
}

QString ExportedMessageLinkObject::link() const {
    return m_core.link();
}

ExportedMessageLinkObject &ExportedMessageLinkObject::operator =(const ExportedMessageLink &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT linkChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ExportedMessageLinkObject::operator ==(const ExportedMessageLink &b) const {
    return m_core == b;
}

void ExportedMessageLinkObject::setClassType(quint32 classType) {
    ExportedMessageLink::ExportedMessageLinkType result;
    switch(classType) {
    case TypeExportedMessageLink:
        result = ExportedMessageLink::typeExportedMessageLink;
        break;
    default:
        result = ExportedMessageLink::typeExportedMessageLink;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ExportedMessageLinkObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ExportedMessageLink::typeExportedMessageLink:
        result = TypeExportedMessageLink;
        break;
    default:
        result = TypeExportedMessageLink;
        break;
    }

    return result;
}

void ExportedMessageLinkObject::setCore(const ExportedMessageLink &core) {
    operator =(core);
}

ExportedMessageLink ExportedMessageLinkObject::core() const {
    return m_core;
}

