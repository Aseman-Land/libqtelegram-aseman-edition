// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHANNELMESSAGESFILTER_OBJECT
#define LQTG_TYPE_CHANNELMESSAGESFILTER_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/channelmessagesfilter.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ChannelMessagesFilterObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ChannelMessagesFilterClassType)
    Q_PROPERTY(bool excludeNewMessages READ excludeNewMessages WRITE setExcludeNewMessages NOTIFY excludeNewMessagesChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(bool importantOnly READ importantOnly WRITE setImportantOnly NOTIFY importantOnlyChanged)
    Q_PROPERTY(QList<MessageRange> ranges READ ranges WRITE setRanges NOTIFY rangesChanged)
    Q_PROPERTY(ChannelMessagesFilter core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ChannelMessagesFilterClassType {
        TypeChannelMessagesFilterEmpty,
        TypeChannelMessagesFilter,
        TypeChannelMessagesFilterCollapsed
    };

    ChannelMessagesFilterObject(const ChannelMessagesFilter &core, QObject *parent = 0);
    ChannelMessagesFilterObject(QObject *parent = 0);
    virtual ~ChannelMessagesFilterObject();

    void setExcludeNewMessages(bool excludeNewMessages);
    bool excludeNewMessages() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setImportantOnly(bool importantOnly);
    bool importantOnly() const;

    void setRanges(const QList<MessageRange> &ranges);
    QList<MessageRange> ranges() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ChannelMessagesFilter &core);
    ChannelMessagesFilter core() const;

    ChannelMessagesFilterObject &operator =(const ChannelMessagesFilter &b);
    bool operator ==(const ChannelMessagesFilter &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void excludeNewMessagesChanged();
    void flagsChanged();
    void importantOnlyChanged();
    void rangesChanged();

private Q_SLOTS:

private:
    ChannelMessagesFilter m_core;
};

inline ChannelMessagesFilterObject::ChannelMessagesFilterObject(const ChannelMessagesFilter &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ChannelMessagesFilterObject::ChannelMessagesFilterObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ChannelMessagesFilterObject::~ChannelMessagesFilterObject() {
}

inline void ChannelMessagesFilterObject::setExcludeNewMessages(bool excludeNewMessages) {
    if(m_core.excludeNewMessages() == excludeNewMessages) return;
    m_core.setExcludeNewMessages(excludeNewMessages);
    Q_EMIT excludeNewMessagesChanged();
    Q_EMIT coreChanged();
}

inline bool ChannelMessagesFilterObject::excludeNewMessages() const {
    return m_core.excludeNewMessages();
}

inline void ChannelMessagesFilterObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ChannelMessagesFilterObject::flags() const {
    return m_core.flags();
}

inline void ChannelMessagesFilterObject::setImportantOnly(bool importantOnly) {
    if(m_core.importantOnly() == importantOnly) return;
    m_core.setImportantOnly(importantOnly);
    Q_EMIT importantOnlyChanged();
    Q_EMIT coreChanged();
}

inline bool ChannelMessagesFilterObject::importantOnly() const {
    return m_core.importantOnly();
}

inline void ChannelMessagesFilterObject::setRanges(const QList<MessageRange> &ranges) {
    if(m_core.ranges() == ranges) return;
    m_core.setRanges(ranges);
    Q_EMIT rangesChanged();
    Q_EMIT coreChanged();
}

inline QList<MessageRange> ChannelMessagesFilterObject::ranges() const {
    return m_core.ranges();
}

inline ChannelMessagesFilterObject &ChannelMessagesFilterObject::operator =(const ChannelMessagesFilter &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT excludeNewMessagesChanged();
    Q_EMIT flagsChanged();
    Q_EMIT importantOnlyChanged();
    Q_EMIT rangesChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ChannelMessagesFilterObject::operator ==(const ChannelMessagesFilter &b) const {
    return m_core == b;
}

inline void ChannelMessagesFilterObject::setClassType(quint32 classType) {
    ChannelMessagesFilter::ChannelMessagesFilterClassType result;
    switch(classType) {
    case TypeChannelMessagesFilterEmpty:
        result = ChannelMessagesFilter::typeChannelMessagesFilterEmpty;
        break;
    case TypeChannelMessagesFilter:
        result = ChannelMessagesFilter::typeChannelMessagesFilter;
        break;
    case TypeChannelMessagesFilterCollapsed:
        result = ChannelMessagesFilter::typeChannelMessagesFilterCollapsed;
        break;
    default:
        result = ChannelMessagesFilter::typeChannelMessagesFilterEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ChannelMessagesFilterObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelMessagesFilter::typeChannelMessagesFilterEmpty:
        result = TypeChannelMessagesFilterEmpty;
        break;
    case ChannelMessagesFilter::typeChannelMessagesFilter:
        result = TypeChannelMessagesFilter;
        break;
    case ChannelMessagesFilter::typeChannelMessagesFilterCollapsed:
        result = TypeChannelMessagesFilterCollapsed;
        break;
    default:
        result = TypeChannelMessagesFilterEmpty;
        break;
    }

    return result;
}

inline void ChannelMessagesFilterObject::setCore(const ChannelMessagesFilter &core) {
    operator =(core);
}

inline ChannelMessagesFilter ChannelMessagesFilterObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CHANNELMESSAGESFILTER_OBJECT
