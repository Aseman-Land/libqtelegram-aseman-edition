// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_DRAFTMESSAGE_OBJECT
#define LQTG_TYPE_DRAFTMESSAGE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/draftmessage.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT DraftMessageObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(DraftMessageClassType)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(QList<MessageEntity> entities READ entities WRITE setEntities NOTIFY entitiesChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(QString message READ message WRITE setMessage NOTIFY messageChanged)
    Q_PROPERTY(bool noWebpage READ noWebpage WRITE setNoWebpage NOTIFY noWebpageChanged)
    Q_PROPERTY(qint32 replyToMsgId READ replyToMsgId WRITE setReplyToMsgId NOTIFY replyToMsgIdChanged)
    Q_PROPERTY(DraftMessage core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum DraftMessageClassType {
        TypeDraftMessageEmpty,
        TypeDraftMessage
    };

    DraftMessageObject(const DraftMessage &core, QObject *parent = 0);
    DraftMessageObject(QObject *parent = 0);
    virtual ~DraftMessageObject();

    void setDate(qint32 date);
    qint32 date() const;

    void setEntities(const QList<MessageEntity> &entities);
    QList<MessageEntity> entities() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setMessage(const QString &message);
    QString message() const;

    void setNoWebpage(bool noWebpage);
    bool noWebpage() const;

    void setReplyToMsgId(qint32 replyToMsgId);
    qint32 replyToMsgId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const DraftMessage &core);
    DraftMessage core() const;

    DraftMessageObject &operator =(const DraftMessage &b);
    bool operator ==(const DraftMessage &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void dateChanged();
    void entitiesChanged();
    void flagsChanged();
    void messageChanged();
    void noWebpageChanged();
    void replyToMsgIdChanged();

private Q_SLOTS:

private:
    DraftMessage m_core;
};

inline DraftMessageObject::DraftMessageObject(const DraftMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline DraftMessageObject::DraftMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline DraftMessageObject::~DraftMessageObject() {
}

inline void DraftMessageObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 DraftMessageObject::date() const {
    return m_core.date();
}

inline void DraftMessageObject::setEntities(const QList<MessageEntity> &entities) {
    if(m_core.entities() == entities) return;
    m_core.setEntities(entities);
    Q_EMIT entitiesChanged();
    Q_EMIT coreChanged();
}

inline QList<MessageEntity> DraftMessageObject::entities() const {
    return m_core.entities();
}

inline void DraftMessageObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 DraftMessageObject::flags() const {
    return m_core.flags();
}

inline void DraftMessageObject::setMessage(const QString &message) {
    if(m_core.message() == message) return;
    m_core.setMessage(message);
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

inline QString DraftMessageObject::message() const {
    return m_core.message();
}

inline void DraftMessageObject::setNoWebpage(bool noWebpage) {
    if(m_core.noWebpage() == noWebpage) return;
    m_core.setNoWebpage(noWebpage);
    Q_EMIT noWebpageChanged();
    Q_EMIT coreChanged();
}

inline bool DraftMessageObject::noWebpage() const {
    return m_core.noWebpage();
}

inline void DraftMessageObject::setReplyToMsgId(qint32 replyToMsgId) {
    if(m_core.replyToMsgId() == replyToMsgId) return;
    m_core.setReplyToMsgId(replyToMsgId);
    Q_EMIT replyToMsgIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 DraftMessageObject::replyToMsgId() const {
    return m_core.replyToMsgId();
}

inline DraftMessageObject &DraftMessageObject::operator =(const DraftMessage &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT dateChanged();
    Q_EMIT entitiesChanged();
    Q_EMIT flagsChanged();
    Q_EMIT messageChanged();
    Q_EMIT noWebpageChanged();
    Q_EMIT replyToMsgIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool DraftMessageObject::operator ==(const DraftMessage &b) const {
    return m_core == b;
}

inline void DraftMessageObject::setClassType(quint32 classType) {
    DraftMessage::DraftMessageClassType result;
    switch(classType) {
    case TypeDraftMessageEmpty:
        result = DraftMessage::typeDraftMessageEmpty;
        break;
    case TypeDraftMessage:
        result = DraftMessage::typeDraftMessage;
        break;
    default:
        result = DraftMessage::typeDraftMessageEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 DraftMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case DraftMessage::typeDraftMessageEmpty:
        result = TypeDraftMessageEmpty;
        break;
    case DraftMessage::typeDraftMessage:
        result = TypeDraftMessage;
        break;
    default:
        result = TypeDraftMessageEmpty;
        break;
    }

    return result;
}

inline void DraftMessageObject::setCore(const DraftMessage &core) {
    operator =(core);
}

inline DraftMessage DraftMessageObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_DRAFTMESSAGE_OBJECT
