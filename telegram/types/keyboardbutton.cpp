// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "keyboardbutton.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

KeyboardButton::KeyboardButton(KeyboardButtonClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

KeyboardButton::KeyboardButton(InboundPkt *in) :
    m_classType(typeKeyboardButton)
{
    fetch(in);
}

KeyboardButton::KeyboardButton(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeKeyboardButton)
{
}

KeyboardButton::~KeyboardButton() {
}

void KeyboardButton::setData(const QByteArray &data) {
    m_data = data;
}

QByteArray KeyboardButton::data() const {
    return m_data;
}

void KeyboardButton::setQuery(const QString &query) {
    m_query = query;
}

QString KeyboardButton::query() const {
    return m_query;
}

void KeyboardButton::setText(const QString &text) {
    m_text = text;
}

QString KeyboardButton::text() const {
    return m_text;
}

void KeyboardButton::setUrl(const QString &url) {
    m_url = url;
}

QString KeyboardButton::url() const {
    return m_url;
}

bool KeyboardButton::operator ==(const KeyboardButton &b) const {
    return m_classType == b.m_classType &&
           m_data == b.m_data &&
           m_query == b.m_query &&
           m_text == b.m_text &&
           m_url == b.m_url;
}

void KeyboardButton::setClassType(KeyboardButton::KeyboardButtonClassType classType) {
    m_classType = classType;
}

KeyboardButton::KeyboardButtonClassType KeyboardButton::classType() const {
    return m_classType;
}

bool KeyboardButton::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeKeyboardButton: {
        m_text = in->fetchQString();
        m_classType = static_cast<KeyboardButtonClassType>(x);
        return true;
    }
        break;
    
    case typeKeyboardButtonUrl: {
        m_text = in->fetchQString();
        m_url = in->fetchQString();
        m_classType = static_cast<KeyboardButtonClassType>(x);
        return true;
    }
        break;
    
    case typeKeyboardButtonCallback: {
        m_text = in->fetchQString();
        m_data = in->fetchBytes();
        m_classType = static_cast<KeyboardButtonClassType>(x);
        return true;
    }
        break;
    
    case typeKeyboardButtonRequestPhone: {
        m_text = in->fetchQString();
        m_classType = static_cast<KeyboardButtonClassType>(x);
        return true;
    }
        break;
    
    case typeKeyboardButtonRequestGeoLocation: {
        m_text = in->fetchQString();
        m_classType = static_cast<KeyboardButtonClassType>(x);
        return true;
    }
        break;
    
    case typeKeyboardButtonSwitchInline: {
        m_text = in->fetchQString();
        m_query = in->fetchQString();
        m_classType = static_cast<KeyboardButtonClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool KeyboardButton::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeKeyboardButton: {
        out->appendQString(m_text);
        return true;
    }
        break;
    
    case typeKeyboardButtonUrl: {
        out->appendQString(m_text);
        out->appendQString(m_url);
        return true;
    }
        break;
    
    case typeKeyboardButtonCallback: {
        out->appendQString(m_text);
        out->appendBytes(m_data);
        return true;
    }
        break;
    
    case typeKeyboardButtonRequestPhone: {
        out->appendQString(m_text);
        return true;
    }
        break;
    
    case typeKeyboardButtonRequestGeoLocation: {
        out->appendQString(m_text);
        return true;
    }
        break;
    
    case typeKeyboardButtonSwitchInline: {
        out->appendQString(m_text);
        out->appendQString(m_query);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> KeyboardButton::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeKeyboardButton: {
        result["classType"] = "KeyboardButton::typeKeyboardButton";
        result["text"] = QVariant::fromValue<QString>(text());
        return result;
    }
        break;
    
    case typeKeyboardButtonUrl: {
        result["classType"] = "KeyboardButton::typeKeyboardButtonUrl";
        result["text"] = QVariant::fromValue<QString>(text());
        result["url"] = QVariant::fromValue<QString>(url());
        return result;
    }
        break;
    
    case typeKeyboardButtonCallback: {
        result["classType"] = "KeyboardButton::typeKeyboardButtonCallback";
        result["text"] = QVariant::fromValue<QString>(text());
        result["data"] = QVariant::fromValue<QByteArray>(data());
        return result;
    }
        break;
    
    case typeKeyboardButtonRequestPhone: {
        result["classType"] = "KeyboardButton::typeKeyboardButtonRequestPhone";
        result["text"] = QVariant::fromValue<QString>(text());
        return result;
    }
        break;
    
    case typeKeyboardButtonRequestGeoLocation: {
        result["classType"] = "KeyboardButton::typeKeyboardButtonRequestGeoLocation";
        result["text"] = QVariant::fromValue<QString>(text());
        return result;
    }
        break;
    
    case typeKeyboardButtonSwitchInline: {
        result["classType"] = "KeyboardButton::typeKeyboardButtonSwitchInline";
        result["text"] = QVariant::fromValue<QString>(text());
        result["query"] = QVariant::fromValue<QString>(query());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

KeyboardButton KeyboardButton::fromMap(const QMap<QString, QVariant> &map) {
    KeyboardButton result;
    if(map.value("classType").toString() == "KeyboardButton::typeKeyboardButton") {
        result.setClassType(typeKeyboardButton);
        result.setText( map.value("text").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "KeyboardButton::typeKeyboardButtonUrl") {
        result.setClassType(typeKeyboardButtonUrl);
        result.setText( map.value("text").value<QString>() );
        result.setUrl( map.value("url").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "KeyboardButton::typeKeyboardButtonCallback") {
        result.setClassType(typeKeyboardButtonCallback);
        result.setText( map.value("text").value<QString>() );
        result.setData( map.value("data").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "KeyboardButton::typeKeyboardButtonRequestPhone") {
        result.setClassType(typeKeyboardButtonRequestPhone);
        result.setText( map.value("text").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "KeyboardButton::typeKeyboardButtonRequestGeoLocation") {
        result.setClassType(typeKeyboardButtonRequestGeoLocation);
        result.setText( map.value("text").value<QString>() );
        return result;
    }
    if(map.value("classType").toString() == "KeyboardButton::typeKeyboardButtonSwitchInline") {
        result.setClassType(typeKeyboardButtonSwitchInline);
        result.setText( map.value("text").value<QString>() );
        result.setQuery( map.value("query").value<QString>() );
        return result;
    }
    return result;
}

QByteArray KeyboardButton::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const KeyboardButton &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case KeyboardButton::typeKeyboardButton:
        stream << item.text();
        break;
    case KeyboardButton::typeKeyboardButtonUrl:
        stream << item.text();
        stream << item.url();
        break;
    case KeyboardButton::typeKeyboardButtonCallback:
        stream << item.text();
        stream << item.data();
        break;
    case KeyboardButton::typeKeyboardButtonRequestPhone:
        stream << item.text();
        break;
    case KeyboardButton::typeKeyboardButtonRequestGeoLocation:
        stream << item.text();
        break;
    case KeyboardButton::typeKeyboardButtonSwitchInline:
        stream << item.text();
        stream << item.query();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, KeyboardButton &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<KeyboardButton::KeyboardButtonClassType>(type));
    switch(type) {
    case KeyboardButton::typeKeyboardButton: {
        QString m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case KeyboardButton::typeKeyboardButtonUrl: {
        QString m_text;
        stream >> m_text;
        item.setText(m_text);
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
    }
        break;
    case KeyboardButton::typeKeyboardButtonCallback: {
        QString m_text;
        stream >> m_text;
        item.setText(m_text);
        QByteArray m_data;
        stream >> m_data;
        item.setData(m_data);
    }
        break;
    case KeyboardButton::typeKeyboardButtonRequestPhone: {
        QString m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case KeyboardButton::typeKeyboardButtonRequestGeoLocation: {
        QString m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case KeyboardButton::typeKeyboardButtonSwitchInline: {
        QString m_text;
        stream >> m_text;
        item.setText(m_text);
        QString m_query;
        stream >> m_query;
        item.setQuery(m_query);
    }
        break;
    }
    return stream;
}

