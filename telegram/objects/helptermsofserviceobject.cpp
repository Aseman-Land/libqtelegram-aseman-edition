// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "helptermsofserviceobject.h"

HelpTermsOfServiceObject::HelpTermsOfServiceObject(const HelpTermsOfService &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

HelpTermsOfServiceObject::HelpTermsOfServiceObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

HelpTermsOfServiceObject::~HelpTermsOfServiceObject() {
}

void HelpTermsOfServiceObject::setText(const QString &text) {
    if(m_core.text() == text) return;
    m_core.setText(text);
    Q_EMIT textChanged();
    Q_EMIT coreChanged();
}

QString HelpTermsOfServiceObject::text() const {
    return m_core.text();
}

HelpTermsOfServiceObject &HelpTermsOfServiceObject::operator =(const HelpTermsOfService &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT textChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool HelpTermsOfServiceObject::operator ==(const HelpTermsOfService &b) const {
    return m_core == b;
}

void HelpTermsOfServiceObject::setClassType(quint32 classType) {
    HelpTermsOfService::HelpTermsOfServiceType result;
    switch(classType) {
    case TypeHelpTermsOfService:
        result = HelpTermsOfService::typeHelpTermsOfService;
        break;
    default:
        result = HelpTermsOfService::typeHelpTermsOfService;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 HelpTermsOfServiceObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case HelpTermsOfService::typeHelpTermsOfService:
        result = TypeHelpTermsOfService;
        break;
    default:
        result = TypeHelpTermsOfService;
        break;
    }

    return result;
}

void HelpTermsOfServiceObject::setCore(const HelpTermsOfService &core) {
    operator =(core);
}

HelpTermsOfService HelpTermsOfServiceObject::core() const {
    return m_core;
}

