// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagefwdheaderobject.h"

MessageFwdHeaderObject::MessageFwdHeaderObject(const MessageFwdHeader &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessageFwdHeaderObject::MessageFwdHeaderObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessageFwdHeaderObject::~MessageFwdHeaderObject() {
}

void MessageFwdHeaderObject::setChannelId(qint32 channelId) {
    if(m_core.channelId() == channelId) return;
    m_core.setChannelId(channelId);
    Q_EMIT channelIdChanged();
    Q_EMIT coreChanged();
}

qint32 MessageFwdHeaderObject::channelId() const {
    return m_core.channelId();
}

void MessageFwdHeaderObject::setChannelPost(qint32 channelPost) {
    if(m_core.channelPost() == channelPost) return;
    m_core.setChannelPost(channelPost);
    Q_EMIT channelPostChanged();
    Q_EMIT coreChanged();
}

qint32 MessageFwdHeaderObject::channelPost() const {
    return m_core.channelPost();
}

void MessageFwdHeaderObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 MessageFwdHeaderObject::date() const {
    return m_core.date();
}

void MessageFwdHeaderObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 MessageFwdHeaderObject::flags() const {
    return m_core.flags();
}

void MessageFwdHeaderObject::setFromId(qint32 fromId) {
    if(m_core.fromId() == fromId) return;
    m_core.setFromId(fromId);
    Q_EMIT fromIdChanged();
    Q_EMIT coreChanged();
}

qint32 MessageFwdHeaderObject::fromId() const {
    return m_core.fromId();
}

MessageFwdHeaderObject &MessageFwdHeaderObject::operator =(const MessageFwdHeader &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT channelIdChanged();
    Q_EMIT channelPostChanged();
    Q_EMIT dateChanged();
    Q_EMIT flagsChanged();
    Q_EMIT fromIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessageFwdHeaderObject::operator ==(const MessageFwdHeader &b) const {
    return m_core == b;
}

void MessageFwdHeaderObject::setClassType(quint32 classType) {
    MessageFwdHeader::MessageFwdHeaderType result;
    switch(classType) {
    case TypeMessageFwdHeader:
        result = MessageFwdHeader::typeMessageFwdHeader;
        break;
    default:
        result = MessageFwdHeader::typeMessageFwdHeader;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessageFwdHeaderObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessageFwdHeader::typeMessageFwdHeader:
        result = TypeMessageFwdHeader;
        break;
    default:
        result = TypeMessageFwdHeader;
        break;
    }

    return result;
}

void MessageFwdHeaderObject::setCore(const MessageFwdHeader &core) {
    operator =(core);
}

MessageFwdHeader MessageFwdHeaderObject::core() const {
    return m_core;
}

