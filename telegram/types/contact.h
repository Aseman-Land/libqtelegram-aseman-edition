// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACT
#define LQTG_TYPE_CONTACT

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>

class LIBQTELEGRAMSHARED_EXPORT Contact : public TelegramTypeObject
{
public:
    enum ContactClassType {
        typeContact = 0xf911c994
    };

    Contact(ContactClassType classType = typeContact, InboundPkt *in = 0);
    Contact(InboundPkt *in);
    Contact(const Null&);
    virtual ~Contact();

    void setMutual(bool mutual);
    bool mutual() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(ContactClassType classType);
    ContactClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static Contact fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const Contact &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    bool m_mutual;
    qint32 m_userId;
    ContactClassType m_classType;
};

Q_DECLARE_METATYPE(Contact)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const Contact &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, Contact &item);

inline Contact::Contact(ContactClassType classType, InboundPkt *in) :
    m_mutual(false),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline Contact::Contact(InboundPkt *in) :
    m_mutual(false),
    m_userId(0),
    m_classType(typeContact)
{
    fetch(in);
}

inline Contact::Contact(const Null &null) :
    TelegramTypeObject(null),
    m_mutual(false),
    m_userId(0),
    m_classType(typeContact)
{
}

inline Contact::~Contact() {
}

inline void Contact::setMutual(bool mutual) {
    m_mutual = mutual;
}

inline bool Contact::mutual() const {
    return m_mutual;
}

inline void Contact::setUserId(qint32 userId) {
    m_userId = userId;
}

inline qint32 Contact::userId() const {
    return m_userId;
}

inline bool Contact::operator ==(const Contact &b) const {
    return m_classType == b.m_classType &&
           m_mutual == b.m_mutual &&
           m_userId == b.m_userId;
}

inline void Contact::setClassType(Contact::ContactClassType classType) {
    m_classType = classType;
}

inline Contact::ContactClassType Contact::classType() const {
    return m_classType;
}

inline bool Contact::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeContact: {
        m_userId = in->fetchInt();
        m_mutual = in->fetchBool();
        m_classType = static_cast<ContactClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool Contact::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeContact: {
        out->appendInt(m_userId);
        out->appendBool(m_mutual);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> Contact::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeContact: {
        result["classType"] = "Contact::typeContact";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        result["mutual"] = QVariant::fromValue<bool>(mutual());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline Contact Contact::fromMap(const QMap<QString, QVariant> &map) {
    Contact result;
    if(map.value("classType").toString() == "Contact::typeContact") {
        result.setClassType(typeContact);
        result.setUserId( map.value("userId").value<qint32>() );
        result.setMutual( map.value("mutual").value<bool>() );
        return result;
    }
    return result;
}

inline QByteArray Contact::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const Contact &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Contact::typeContact:
        stream << item.userId();
        stream << item.mutual();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, Contact &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Contact::ContactClassType>(type));
    switch(type) {
    case Contact::typeContact: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        bool m_mutual;
        stream >> m_mutual;
        item.setMutual(m_mutual);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_CONTACT
