// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_AUTHEXPORTEDAUTHORIZATION_OBJECT
#define LQTG_TYPE_AUTHEXPORTEDAUTHORIZATION_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/authexportedauthorization.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AuthExportedAuthorizationObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AuthExportedAuthorizationClassType)
    Q_PROPERTY(QByteArray bytes READ bytes WRITE setBytes NOTIFY bytesChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(AuthExportedAuthorization core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AuthExportedAuthorizationClassType {
        TypeAuthExportedAuthorization
    };

    AuthExportedAuthorizationObject(const AuthExportedAuthorization &core, QObject *parent = 0);
    AuthExportedAuthorizationObject(QObject *parent = 0);
    virtual ~AuthExportedAuthorizationObject();

    void setBytes(const QByteArray &bytes);
    QByteArray bytes() const;

    void setId(qint32 id);
    qint32 id() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AuthExportedAuthorization &core);
    AuthExportedAuthorization core() const;

    AuthExportedAuthorizationObject &operator =(const AuthExportedAuthorization &b);
    bool operator ==(const AuthExportedAuthorization &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void bytesChanged();
    void idChanged();

private Q_SLOTS:

private:
    AuthExportedAuthorization m_core;
};

inline AuthExportedAuthorizationObject::AuthExportedAuthorizationObject(const AuthExportedAuthorization &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AuthExportedAuthorizationObject::AuthExportedAuthorizationObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AuthExportedAuthorizationObject::~AuthExportedAuthorizationObject() {
}

inline void AuthExportedAuthorizationObject::setBytes(const QByteArray &bytes) {
    if(m_core.bytes() == bytes) return;
    m_core.setBytes(bytes);
    Q_EMIT bytesChanged();
    Q_EMIT coreChanged();
}

inline QByteArray AuthExportedAuthorizationObject::bytes() const {
    return m_core.bytes();
}

inline void AuthExportedAuthorizationObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 AuthExportedAuthorizationObject::id() const {
    return m_core.id();
}

inline AuthExportedAuthorizationObject &AuthExportedAuthorizationObject::operator =(const AuthExportedAuthorization &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT bytesChanged();
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AuthExportedAuthorizationObject::operator ==(const AuthExportedAuthorization &b) const {
    return m_core == b;
}

inline void AuthExportedAuthorizationObject::setClassType(quint32 classType) {
    AuthExportedAuthorization::AuthExportedAuthorizationClassType result;
    switch(classType) {
    case TypeAuthExportedAuthorization:
        result = AuthExportedAuthorization::typeAuthExportedAuthorization;
        break;
    default:
        result = AuthExportedAuthorization::typeAuthExportedAuthorization;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AuthExportedAuthorizationObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthExportedAuthorization::typeAuthExportedAuthorization:
        result = TypeAuthExportedAuthorization;
        break;
    default:
        result = TypeAuthExportedAuthorization;
        break;
    }

    return result;
}

inline void AuthExportedAuthorizationObject::setCore(const AuthExportedAuthorization &core) {
    operator =(core);
}

inline AuthExportedAuthorization AuthExportedAuthorizationObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_AUTHEXPORTEDAUTHORIZATION_OBJECT
