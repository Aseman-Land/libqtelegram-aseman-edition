// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesbotresultsobject.h"

MessagesBotResultsObject::MessagesBotResultsObject(const MessagesBotResults &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesBotResultsObject::MessagesBotResultsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesBotResultsObject::~MessagesBotResultsObject() {
}

void MessagesBotResultsObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesBotResultsObject::flags() const {
    return m_core.flags();
}

void MessagesBotResultsObject::setGallery(bool gallery) {
    if(m_core.gallery() == gallery) return;
    m_core.setGallery(gallery);
    Q_EMIT galleryChanged();
    Q_EMIT coreChanged();
}

bool MessagesBotResultsObject::gallery() const {
    return m_core.gallery();
}

void MessagesBotResultsObject::setNextOffset(const QString &nextOffset) {
    if(m_core.nextOffset() == nextOffset) return;
    m_core.setNextOffset(nextOffset);
    Q_EMIT nextOffsetChanged();
    Q_EMIT coreChanged();
}

QString MessagesBotResultsObject::nextOffset() const {
    return m_core.nextOffset();
}

void MessagesBotResultsObject::setQueryId(qint64 queryId) {
    if(m_core.queryId() == queryId) return;
    m_core.setQueryId(queryId);
    Q_EMIT queryIdChanged();
    Q_EMIT coreChanged();
}

qint64 MessagesBotResultsObject::queryId() const {
    return m_core.queryId();
}

void MessagesBotResultsObject::setResults(const QList<BotInlineResult> &results) {
    if(m_core.results() == results) return;
    m_core.setResults(results);
    Q_EMIT resultsChanged();
    Q_EMIT coreChanged();
}

QList<BotInlineResult> MessagesBotResultsObject::results() const {
    return m_core.results();
}

MessagesBotResultsObject &MessagesBotResultsObject::operator =(const MessagesBotResults &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT flagsChanged();
    Q_EMIT galleryChanged();
    Q_EMIT nextOffsetChanged();
    Q_EMIT queryIdChanged();
    Q_EMIT resultsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesBotResultsObject::operator ==(const MessagesBotResults &b) const {
    return m_core == b;
}

void MessagesBotResultsObject::setClassType(quint32 classType) {
    MessagesBotResults::MessagesBotResultsType result;
    switch(classType) {
    case TypeMessagesBotResults:
        result = MessagesBotResults::typeMessagesBotResults;
        break;
    default:
        result = MessagesBotResults::typeMessagesBotResults;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesBotResultsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesBotResults::typeMessagesBotResults:
        result = TypeMessagesBotResults;
        break;
    default:
        result = TypeMessagesBotResults;
        break;
    }

    return result;
}

void MessagesBotResultsObject::setCore(const MessagesBotResults &core) {
    operator =(core);
}

MessagesBotResults MessagesBotResultsObject::core() const {
    return m_core;
}

