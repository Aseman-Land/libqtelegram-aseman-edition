// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTNOTIFYPEER_OBJECT
#define LQTG_TYPE_INPUTNOTIFYPEER_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputnotifypeer.h"

#include <QPointer>
#include "inputpeerobject.h"

class LIBQTELEGRAMSHARED_EXPORT InputNotifyPeerObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputNotifyPeerClassType)
    Q_PROPERTY(InputPeerObject* peer READ peer WRITE setPeer NOTIFY peerChanged)
    Q_PROPERTY(InputNotifyPeer core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputNotifyPeerClassType {
        TypeInputNotifyPeer,
        TypeInputNotifyUsers,
        TypeInputNotifyChats,
        TypeInputNotifyAll
    };

    InputNotifyPeerObject(const InputNotifyPeer &core, QObject *parent = 0);
    InputNotifyPeerObject(QObject *parent = 0);
    virtual ~InputNotifyPeerObject();

    void setPeer(InputPeerObject* peer);
    InputPeerObject* peer() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputNotifyPeer &core);
    InputNotifyPeer core() const;

    InputNotifyPeerObject &operator =(const InputNotifyPeer &b);
    bool operator ==(const InputNotifyPeer &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void peerChanged();

private Q_SLOTS:
    void corePeerChanged();

private:
    QPointer<InputPeerObject> m_peer;
    InputNotifyPeer m_core;
};

inline InputNotifyPeerObject::InputNotifyPeerObject(const InputNotifyPeer &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core(core)
{
    m_peer = new InputPeerObject(m_core.peer(), this);
    connect(m_peer.data(), &InputPeerObject::coreChanged, this, &InputNotifyPeerObject::corePeerChanged);
}

inline InputNotifyPeerObject::InputNotifyPeerObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_peer(0),
    m_core()
{
    m_peer = new InputPeerObject(m_core.peer(), this);
    connect(m_peer.data(), &InputPeerObject::coreChanged, this, &InputNotifyPeerObject::corePeerChanged);
}

inline InputNotifyPeerObject::~InputNotifyPeerObject() {
}

inline void InputNotifyPeerObject::setPeer(InputPeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), &InputPeerObject::coreChanged, this, &InputNotifyPeerObject::corePeerChanged);
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

inline InputPeerObject*  InputNotifyPeerObject::peer() const {
    return m_peer;
}

inline InputNotifyPeerObject &InputNotifyPeerObject::operator =(const InputNotifyPeer &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_peer->setCore(b.peer());

    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputNotifyPeerObject::operator ==(const InputNotifyPeer &b) const {
    return m_core == b;
}

inline void InputNotifyPeerObject::setClassType(quint32 classType) {
    InputNotifyPeer::InputNotifyPeerClassType result;
    switch(classType) {
    case TypeInputNotifyPeer:
        result = InputNotifyPeer::typeInputNotifyPeer;
        break;
    case TypeInputNotifyUsers:
        result = InputNotifyPeer::typeInputNotifyUsers;
        break;
    case TypeInputNotifyChats:
        result = InputNotifyPeer::typeInputNotifyChats;
        break;
    case TypeInputNotifyAll:
        result = InputNotifyPeer::typeInputNotifyAll;
        break;
    default:
        result = InputNotifyPeer::typeInputNotifyPeer;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputNotifyPeerObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputNotifyPeer::typeInputNotifyPeer:
        result = TypeInputNotifyPeer;
        break;
    case InputNotifyPeer::typeInputNotifyUsers:
        result = TypeInputNotifyUsers;
        break;
    case InputNotifyPeer::typeInputNotifyChats:
        result = TypeInputNotifyChats;
        break;
    case InputNotifyPeer::typeInputNotifyAll:
        result = TypeInputNotifyAll;
        break;
    default:
        result = TypeInputNotifyPeer;
        break;
    }

    return result;
}

inline void InputNotifyPeerObject::setCore(const InputNotifyPeer &core) {
    operator =(core);
}

inline InputNotifyPeer InputNotifyPeerObject::core() const {
    return m_core;
}

inline void InputNotifyPeerObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_INPUTNOTIFYPEER_OBJECT
