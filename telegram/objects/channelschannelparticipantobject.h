// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHANNELSCHANNELPARTICIPANT_OBJECT
#define LQTG_TYPE_CHANNELSCHANNELPARTICIPANT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/channelschannelparticipant.h"

#include <QPointer>
#include "channelparticipantobject.h"

class LIBQTELEGRAMSHARED_EXPORT ChannelsChannelParticipantObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ChannelsChannelParticipantClassType)
    Q_PROPERTY(ChannelParticipantObject* participant READ participant WRITE setParticipant NOTIFY participantChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(ChannelsChannelParticipant core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ChannelsChannelParticipantClassType {
        TypeChannelsChannelParticipant
    };

    ChannelsChannelParticipantObject(const ChannelsChannelParticipant &core, QObject *parent = 0);
    ChannelsChannelParticipantObject(QObject *parent = 0);
    virtual ~ChannelsChannelParticipantObject();

    void setParticipant(ChannelParticipantObject* participant);
    ChannelParticipantObject* participant() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ChannelsChannelParticipant &core);
    ChannelsChannelParticipant core() const;

    ChannelsChannelParticipantObject &operator =(const ChannelsChannelParticipant &b);
    bool operator ==(const ChannelsChannelParticipant &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void participantChanged();
    void usersChanged();

private Q_SLOTS:
    void coreParticipantChanged();

private:
    QPointer<ChannelParticipantObject> m_participant;
    ChannelsChannelParticipant m_core;
};

inline ChannelsChannelParticipantObject::ChannelsChannelParticipantObject(const ChannelsChannelParticipant &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_participant(0),
    m_core(core)
{
    m_participant = new ChannelParticipantObject(m_core.participant(), this);
    connect(m_participant.data(), &ChannelParticipantObject::coreChanged, this, &ChannelsChannelParticipantObject::coreParticipantChanged);
}

inline ChannelsChannelParticipantObject::ChannelsChannelParticipantObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_participant(0),
    m_core()
{
    m_participant = new ChannelParticipantObject(m_core.participant(), this);
    connect(m_participant.data(), &ChannelParticipantObject::coreChanged, this, &ChannelsChannelParticipantObject::coreParticipantChanged);
}

inline ChannelsChannelParticipantObject::~ChannelsChannelParticipantObject() {
}

inline void ChannelsChannelParticipantObject::setParticipant(ChannelParticipantObject* participant) {
    if(m_participant == participant) return;
    if(m_participant) delete m_participant;
    m_participant = participant;
    if(m_participant) {
        m_participant->setParent(this);
        m_core.setParticipant(m_participant->core());
        connect(m_participant.data(), &ChannelParticipantObject::coreChanged, this, &ChannelsChannelParticipantObject::coreParticipantChanged);
    }
    Q_EMIT participantChanged();
    Q_EMIT coreChanged();
}

inline ChannelParticipantObject*  ChannelsChannelParticipantObject::participant() const {
    return m_participant;
}

inline void ChannelsChannelParticipantObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> ChannelsChannelParticipantObject::users() const {
    return m_core.users();
}

inline ChannelsChannelParticipantObject &ChannelsChannelParticipantObject::operator =(const ChannelsChannelParticipant &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_participant->setCore(b.participant());

    Q_EMIT participantChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ChannelsChannelParticipantObject::operator ==(const ChannelsChannelParticipant &b) const {
    return m_core == b;
}

inline void ChannelsChannelParticipantObject::setClassType(quint32 classType) {
    ChannelsChannelParticipant::ChannelsChannelParticipantClassType result;
    switch(classType) {
    case TypeChannelsChannelParticipant:
        result = ChannelsChannelParticipant::typeChannelsChannelParticipant;
        break;
    default:
        result = ChannelsChannelParticipant::typeChannelsChannelParticipant;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ChannelsChannelParticipantObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChannelsChannelParticipant::typeChannelsChannelParticipant:
        result = TypeChannelsChannelParticipant;
        break;
    default:
        result = TypeChannelsChannelParticipant;
        break;
    }

    return result;
}

inline void ChannelsChannelParticipantObject::setCore(const ChannelsChannelParticipant &core) {
    operator =(core);
}

inline ChannelsChannelParticipant ChannelsChannelParticipantObject::core() const {
    return m_core;
}

inline void ChannelsChannelParticipantObject::coreParticipantChanged() {
    if(m_core.participant() == m_participant->core()) return;
    m_core.setParticipant(m_participant->core());
    Q_EMIT participantChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_CHANNELSCHANNELPARTICIPANT_OBJECT
