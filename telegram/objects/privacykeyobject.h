// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_PRIVACYKEY_OBJECT
#define LQTG_TYPE_PRIVACYKEY_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/privacykey.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT PrivacyKeyObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(PrivacyKeyClassType)
    Q_PROPERTY(PrivacyKey core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum PrivacyKeyClassType {
        TypePrivacyKeyStatusTimestamp,
        TypePrivacyKeyChatInvite
    };

    PrivacyKeyObject(const PrivacyKey &core, QObject *parent = 0);
    PrivacyKeyObject(QObject *parent = 0);
    virtual ~PrivacyKeyObject();

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const PrivacyKey &core);
    PrivacyKey core() const;

    PrivacyKeyObject &operator =(const PrivacyKey &b);
    bool operator ==(const PrivacyKey &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();

private Q_SLOTS:

private:
    PrivacyKey m_core;
};

inline PrivacyKeyObject::PrivacyKeyObject(const PrivacyKey &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline PrivacyKeyObject::PrivacyKeyObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline PrivacyKeyObject::~PrivacyKeyObject() {
}

inline PrivacyKeyObject &PrivacyKeyObject::operator =(const PrivacyKey &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

inline bool PrivacyKeyObject::operator ==(const PrivacyKey &b) const {
    return m_core == b;
}

inline void PrivacyKeyObject::setClassType(quint32 classType) {
    PrivacyKey::PrivacyKeyClassType result;
    switch(classType) {
    case TypePrivacyKeyStatusTimestamp:
        result = PrivacyKey::typePrivacyKeyStatusTimestamp;
        break;
    case TypePrivacyKeyChatInvite:
        result = PrivacyKey::typePrivacyKeyChatInvite;
        break;
    default:
        result = PrivacyKey::typePrivacyKeyStatusTimestamp;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 PrivacyKeyObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PrivacyKey::typePrivacyKeyStatusTimestamp:
        result = TypePrivacyKeyStatusTimestamp;
        break;
    case PrivacyKey::typePrivacyKeyChatInvite:
        result = TypePrivacyKeyChatInvite;
        break;
    default:
        result = TypePrivacyKeyStatusTimestamp;
        break;
    }

    return result;
}

inline void PrivacyKeyObject::setCore(const PrivacyKey &core) {
    operator =(core);
}

inline PrivacyKey PrivacyKeyObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_PRIVACYKEY_OBJECT
