// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "importedcontactobject.h"

ImportedContactObject::ImportedContactObject(const ImportedContact &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ImportedContactObject::ImportedContactObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ImportedContactObject::~ImportedContactObject() {
}

void ImportedContactObject::setClientId(qint64 clientId) {
    if(m_core.clientId() == clientId) return;
    m_core.setClientId(clientId);
    Q_EMIT clientIdChanged();
    Q_EMIT coreChanged();
}

qint64 ImportedContactObject::clientId() const {
    return m_core.clientId();
}

void ImportedContactObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 ImportedContactObject::userId() const {
    return m_core.userId();
}

ImportedContactObject &ImportedContactObject::operator =(const ImportedContact &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT clientIdChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ImportedContactObject::operator ==(const ImportedContact &b) const {
    return m_core == b;
}

void ImportedContactObject::setClassType(quint32 classType) {
    ImportedContact::ImportedContactType result;
    switch(classType) {
    case TypeImportedContact:
        result = ImportedContact::typeImportedContact;
        break;
    default:
        result = ImportedContact::typeImportedContact;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ImportedContactObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ImportedContact::typeImportedContact:
        result = TypeImportedContact;
        break;
    default:
        result = TypeImportedContact;
        break;
    }

    return result;
}

void ImportedContactObject::setCore(const ImportedContact &core) {
    operator =(core);
}

ImportedContact ImportedContactObject::core() const {
    return m_core;
}

