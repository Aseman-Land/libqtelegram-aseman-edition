// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "photo.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

Photo::Photo(PhotoType classType, InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_id(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

Photo::Photo(InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_id(0),
    m_classType(typePhotoEmpty)
{
    fetch(in);
}

Photo::Photo(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_date(0),
    m_id(0),
    m_classType(typePhotoEmpty)
{
}

Photo::~Photo() {
}

void Photo::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

qint64 Photo::accessHash() const {
    return m_accessHash;
}

void Photo::setDate(qint32 date) {
    m_date = date;
}

qint32 Photo::date() const {
    return m_date;
}

void Photo::setId(qint64 id) {
    m_id = id;
}

qint64 Photo::id() const {
    return m_id;
}

void Photo::setSizes(const QList<PhotoSize> &sizes) {
    m_sizes = sizes;
}

QList<PhotoSize> Photo::sizes() const {
    return m_sizes;
}

bool Photo::operator ==(const Photo &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_date == b.m_date &&
           m_id == b.m_id &&
           m_sizes == b.m_sizes;
}

void Photo::setClassType(Photo::PhotoType classType) {
    m_classType = classType;
}

Photo::PhotoType Photo::classType() const {
    return m_classType;
}

bool Photo::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePhotoEmpty: {
        m_id = in->fetchLong();
        m_classType = static_cast<PhotoType>(x);
        return true;
    }
        break;
    
    case typePhoto: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_sizes_length = in->fetchInt();
        m_sizes.clear();
        for (qint32 i = 0; i < m_sizes_length; i++) {
            PhotoSize type;
            type.fetch(in);
            m_sizes.append(type);
        }
        m_classType = static_cast<PhotoType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool Photo::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePhotoEmpty: {
        out->appendLong(m_id);
        return true;
    }
        break;
    
    case typePhoto: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_sizes.count());
        for (qint32 i = 0; i < m_sizes.count(); i++) {
            m_sizes[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray Photo::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const Photo &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case Photo::typePhotoEmpty:
        stream << item.id();
        break;
    case Photo::typePhoto:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.sizes();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, Photo &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<Photo::PhotoType>(type));
    switch(type) {
    case Photo::typePhotoEmpty: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
    }
        break;
    case Photo::typePhoto: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        QList<PhotoSize> m_sizes;
        stream >> m_sizes;
        item.setSizes(m_sizes);
    }
        break;
    }
    return stream;
}

