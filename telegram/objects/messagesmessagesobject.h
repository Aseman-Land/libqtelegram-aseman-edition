// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESMESSAGES_OBJECT
#define LQTG_TYPE_MESSAGESMESSAGES_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/messagesmessages.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT MessagesMessagesObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(MessagesMessagesClassType)
    Q_PROPERTY(QList<Chat> chats READ chats WRITE setChats NOTIFY chatsChanged)
    Q_PROPERTY(QList<MessageGroup> collapsed READ collapsed WRITE setCollapsed NOTIFY collapsedChanged)
    Q_PROPERTY(qint32 count READ count WRITE setCount NOTIFY countChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(QList<Message> messages READ messages WRITE setMessages NOTIFY messagesChanged)
    Q_PROPERTY(qint32 pts READ pts WRITE setPts NOTIFY ptsChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(MessagesMessages core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum MessagesMessagesClassType {
        TypeMessagesMessages,
        TypeMessagesMessagesSlice,
        TypeMessagesChannelMessages
    };

    MessagesMessagesObject(const MessagesMessages &core, QObject *parent = 0);
    MessagesMessagesObject(QObject *parent = 0);
    virtual ~MessagesMessagesObject();

    void setChats(const QList<Chat> &chats);
    QList<Chat> chats() const;

    void setCollapsed(const QList<MessageGroup> &collapsed);
    QList<MessageGroup> collapsed() const;

    void setCount(qint32 count);
    qint32 count() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setMessages(const QList<Message> &messages);
    QList<Message> messages() const;

    void setPts(qint32 pts);
    qint32 pts() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const MessagesMessages &core);
    MessagesMessages core() const;

    MessagesMessagesObject &operator =(const MessagesMessages &b);
    bool operator ==(const MessagesMessages &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatsChanged();
    void collapsedChanged();
    void countChanged();
    void flagsChanged();
    void messagesChanged();
    void ptsChanged();
    void usersChanged();

private Q_SLOTS:

private:
    MessagesMessages m_core;
};

#endif // LQTG_TYPE_MESSAGESMESSAGES_OBJECT
