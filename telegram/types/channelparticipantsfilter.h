// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHANNELPARTICIPANTSFILTER
#define LQTG_TYPE_CHANNELPARTICIPANTSFILTER

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>


class LIBQTELEGRAMSHARED_EXPORT ChannelParticipantsFilter : public TelegramTypeObject
{
public:
    enum ChannelParticipantsFilterClassType {
        typeChannelParticipantsRecent = 0xde3f3c79,
        typeChannelParticipantsAdmins = 0xb4608969,
        typeChannelParticipantsKicked = 0x3c37bb7a,
        typeChannelParticipantsBots = 0xb0d1865b
    };

    ChannelParticipantsFilter(ChannelParticipantsFilterClassType classType = typeChannelParticipantsRecent, InboundPkt *in = 0);
    ChannelParticipantsFilter(InboundPkt *in);
    ChannelParticipantsFilter(const Null&);
    virtual ~ChannelParticipantsFilter();

    void setClassType(ChannelParticipantsFilterClassType classType);
    ChannelParticipantsFilterClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ChannelParticipantsFilter fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ChannelParticipantsFilter &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    ChannelParticipantsFilterClassType m_classType;
};

Q_DECLARE_METATYPE(ChannelParticipantsFilter)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChannelParticipantsFilter &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChannelParticipantsFilter &item);

inline ChannelParticipantsFilter::ChannelParticipantsFilter(ChannelParticipantsFilterClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

inline ChannelParticipantsFilter::ChannelParticipantsFilter(InboundPkt *in) :
    m_classType(typeChannelParticipantsRecent)
{
    fetch(in);
}

inline ChannelParticipantsFilter::ChannelParticipantsFilter(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeChannelParticipantsRecent)
{
}

inline ChannelParticipantsFilter::~ChannelParticipantsFilter() {
}

inline bool ChannelParticipantsFilter::operator ==(const ChannelParticipantsFilter &b) const {
    return m_classType == b.m_classType;
}

inline void ChannelParticipantsFilter::setClassType(ChannelParticipantsFilter::ChannelParticipantsFilterClassType classType) {
    m_classType = classType;
}

inline ChannelParticipantsFilter::ChannelParticipantsFilterClassType ChannelParticipantsFilter::classType() const {
    return m_classType;
}

inline bool ChannelParticipantsFilter::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelParticipantsRecent: {
        m_classType = static_cast<ChannelParticipantsFilterClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantsAdmins: {
        m_classType = static_cast<ChannelParticipantsFilterClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantsKicked: {
        m_classType = static_cast<ChannelParticipantsFilterClassType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantsBots: {
        m_classType = static_cast<ChannelParticipantsFilterClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool ChannelParticipantsFilter::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelParticipantsRecent: {
        return true;
    }
        break;
    
    case typeChannelParticipantsAdmins: {
        return true;
    }
        break;
    
    case typeChannelParticipantsKicked: {
        return true;
    }
        break;
    
    case typeChannelParticipantsBots: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> ChannelParticipantsFilter::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelParticipantsRecent: {
        result["classType"] = "ChannelParticipantsFilter::typeChannelParticipantsRecent";
        return result;
    }
        break;
    
    case typeChannelParticipantsAdmins: {
        result["classType"] = "ChannelParticipantsFilter::typeChannelParticipantsAdmins";
        return result;
    }
        break;
    
    case typeChannelParticipantsKicked: {
        result["classType"] = "ChannelParticipantsFilter::typeChannelParticipantsKicked";
        return result;
    }
        break;
    
    case typeChannelParticipantsBots: {
        result["classType"] = "ChannelParticipantsFilter::typeChannelParticipantsBots";
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline ChannelParticipantsFilter ChannelParticipantsFilter::fromMap(const QMap<QString, QVariant> &map) {
    ChannelParticipantsFilter result;
    if(map.value("classType").toString() == "ChannelParticipantsFilter::typeChannelParticipantsRecent") {
        result.setClassType(typeChannelParticipantsRecent);
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipantsFilter::typeChannelParticipantsAdmins") {
        result.setClassType(typeChannelParticipantsAdmins);
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipantsFilter::typeChannelParticipantsKicked") {
        result.setClassType(typeChannelParticipantsKicked);
        return result;
    }
    if(map.value("classType").toString() == "ChannelParticipantsFilter::typeChannelParticipantsBots") {
        result.setClassType(typeChannelParticipantsBots);
        return result;
    }
    return result;
}

inline QByteArray ChannelParticipantsFilter::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const ChannelParticipantsFilter &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelParticipantsFilter::typeChannelParticipantsRecent:
        
        break;
    case ChannelParticipantsFilter::typeChannelParticipantsAdmins:
        
        break;
    case ChannelParticipantsFilter::typeChannelParticipantsKicked:
        
        break;
    case ChannelParticipantsFilter::typeChannelParticipantsBots:
        
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, ChannelParticipantsFilter &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelParticipantsFilter::ChannelParticipantsFilterClassType>(type));
    switch(type) {
    case ChannelParticipantsFilter::typeChannelParticipantsRecent: {
        
    }
        break;
    case ChannelParticipantsFilter::typeChannelParticipantsAdmins: {
        
    }
        break;
    case ChannelParticipantsFilter::typeChannelParticipantsKicked: {
        
    }
        break;
    case ChannelParticipantsFilter::typeChannelParticipantsBots: {
        
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_CHANNELPARTICIPANTSFILTER
