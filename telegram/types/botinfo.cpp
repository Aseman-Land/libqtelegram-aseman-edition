// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "botinfo.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

BotInfo::BotInfo(BotInfoClassType classType, InboundPkt *in) :
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

BotInfo::BotInfo(InboundPkt *in) :
    m_userId(0),
    m_classType(typeBotInfo)
{
    fetch(in);
}

BotInfo::BotInfo(const Null &null) :
    TelegramTypeObject(null),
    m_userId(0),
    m_classType(typeBotInfo)
{
}

BotInfo::~BotInfo() {
}

void BotInfo::setCommands(const QList<BotCommand> &commands) {
    m_commands = commands;
}

QList<BotCommand> BotInfo::commands() const {
    return m_commands;
}

void BotInfo::setDescription(const QString &description) {
    m_description = description;
}

QString BotInfo::description() const {
    return m_description;
}

void BotInfo::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 BotInfo::userId() const {
    return m_userId;
}

bool BotInfo::operator ==(const BotInfo &b) const {
    return m_classType == b.m_classType &&
           m_commands == b.m_commands &&
           m_description == b.m_description &&
           m_userId == b.m_userId;
}

void BotInfo::setClassType(BotInfo::BotInfoClassType classType) {
    m_classType = classType;
}

BotInfo::BotInfoClassType BotInfo::classType() const {
    return m_classType;
}

bool BotInfo::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeBotInfo: {
        m_userId = in->fetchInt();
        m_description = in->fetchQString();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_commands_length = in->fetchInt();
        m_commands.clear();
        for (qint32 i = 0; i < m_commands_length; i++) {
            BotCommand type;
            type.fetch(in);
            m_commands.append(type);
        }
        m_classType = static_cast<BotInfoClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool BotInfo::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeBotInfo: {
        out->appendInt(m_userId);
        out->appendQString(m_description);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_commands.count());
        for (qint32 i = 0; i < m_commands.count(); i++) {
            m_commands[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray BotInfo::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const BotInfo &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case BotInfo::typeBotInfo:
        stream << item.userId();
        stream << item.description();
        stream << item.commands();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, BotInfo &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<BotInfo::BotInfoClassType>(type));
    switch(type) {
    case BotInfo::typeBotInfo: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_description;
        stream >> m_description;
        item.setDescription(m_description);
        QList<BotCommand> m_commands;
        stream >> m_commands;
        item.setCommands(m_commands);
    }
        break;
    }
    return stream;
}

