// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "stickersetobject.h"

StickerSetObject::StickerSetObject(const StickerSet &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

StickerSetObject::StickerSetObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

StickerSetObject::~StickerSetObject() {
}

void StickerSetObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 StickerSetObject::accessHash() const {
    return m_core.accessHash();
}

void StickerSetObject::setCount(qint32 count) {
    if(m_core.count() == count) return;
    m_core.setCount(count);
    Q_EMIT countChanged();
    Q_EMIT coreChanged();
}

qint32 StickerSetObject::count() const {
    return m_core.count();
}

void StickerSetObject::setDisabled(bool disabled) {
    if(m_core.disabled() == disabled) return;
    m_core.setDisabled(disabled);
    Q_EMIT disabledChanged();
    Q_EMIT coreChanged();
}

bool StickerSetObject::disabled() const {
    return m_core.disabled();
}

void StickerSetObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 StickerSetObject::flags() const {
    return m_core.flags();
}

void StickerSetObject::setHash(qint32 hash) {
    if(m_core.hash() == hash) return;
    m_core.setHash(hash);
    Q_EMIT hashChanged();
    Q_EMIT coreChanged();
}

qint32 StickerSetObject::hash() const {
    return m_core.hash();
}

void StickerSetObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 StickerSetObject::id() const {
    return m_core.id();
}

void StickerSetObject::setInstalled(bool installed) {
    if(m_core.installed() == installed) return;
    m_core.setInstalled(installed);
    Q_EMIT installedChanged();
    Q_EMIT coreChanged();
}

bool StickerSetObject::installed() const {
    return m_core.installed();
}

void StickerSetObject::setOfficial(bool official) {
    if(m_core.official() == official) return;
    m_core.setOfficial(official);
    Q_EMIT officialChanged();
    Q_EMIT coreChanged();
}

bool StickerSetObject::official() const {
    return m_core.official();
}

void StickerSetObject::setShortName(const QString &shortName) {
    if(m_core.shortName() == shortName) return;
    m_core.setShortName(shortName);
    Q_EMIT shortNameChanged();
    Q_EMIT coreChanged();
}

QString StickerSetObject::shortName() const {
    return m_core.shortName();
}

void StickerSetObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

QString StickerSetObject::title() const {
    return m_core.title();
}

StickerSetObject &StickerSetObject::operator =(const StickerSet &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT countChanged();
    Q_EMIT disabledChanged();
    Q_EMIT flagsChanged();
    Q_EMIT hashChanged();
    Q_EMIT idChanged();
    Q_EMIT installedChanged();
    Q_EMIT officialChanged();
    Q_EMIT shortNameChanged();
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool StickerSetObject::operator ==(const StickerSet &b) const {
    return m_core == b;
}

void StickerSetObject::setClassType(quint32 classType) {
    StickerSet::StickerSetType result;
    switch(classType) {
    case TypeStickerSet:
        result = StickerSet::typeStickerSet;
        break;
    default:
        result = StickerSet::typeStickerSet;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 StickerSetObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case StickerSet::typeStickerSet:
        result = TypeStickerSet;
        break;
    default:
        result = TypeStickerSet;
        break;
    }

    return result;
}

void StickerSetObject::setCore(const StickerSet &core) {
    operator =(core);
}

StickerSet StickerSetObject::core() const {
    return m_core;
}

