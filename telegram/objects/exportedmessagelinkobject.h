// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_EXPORTEDMESSAGELINK_OBJECT
#define LQTG_TYPE_EXPORTEDMESSAGELINK_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/exportedmessagelink.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ExportedMessageLinkObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ExportedMessageLinkClassType)
    Q_PROPERTY(QString link READ link WRITE setLink NOTIFY linkChanged)
    Q_PROPERTY(ExportedMessageLink core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ExportedMessageLinkClassType {
        TypeExportedMessageLink
    };

    ExportedMessageLinkObject(const ExportedMessageLink &core, QObject *parent = 0);
    ExportedMessageLinkObject(QObject *parent = 0);
    virtual ~ExportedMessageLinkObject();

    void setLink(const QString &link);
    QString link() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ExportedMessageLink &core);
    ExportedMessageLink core() const;

    ExportedMessageLinkObject &operator =(const ExportedMessageLink &b);
    bool operator ==(const ExportedMessageLink &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void linkChanged();

private Q_SLOTS:

private:
    ExportedMessageLink m_core;
};

inline ExportedMessageLinkObject::ExportedMessageLinkObject(const ExportedMessageLink &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ExportedMessageLinkObject::ExportedMessageLinkObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ExportedMessageLinkObject::~ExportedMessageLinkObject() {
}

inline void ExportedMessageLinkObject::setLink(const QString &link) {
    if(m_core.link() == link) return;
    m_core.setLink(link);
    Q_EMIT linkChanged();
    Q_EMIT coreChanged();
}

inline QString ExportedMessageLinkObject::link() const {
    return m_core.link();
}

inline ExportedMessageLinkObject &ExportedMessageLinkObject::operator =(const ExportedMessageLink &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT linkChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ExportedMessageLinkObject::operator ==(const ExportedMessageLink &b) const {
    return m_core == b;
}

inline void ExportedMessageLinkObject::setClassType(quint32 classType) {
    ExportedMessageLink::ExportedMessageLinkClassType result;
    switch(classType) {
    case TypeExportedMessageLink:
        result = ExportedMessageLink::typeExportedMessageLink;
        break;
    default:
        result = ExportedMessageLink::typeExportedMessageLink;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ExportedMessageLinkObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ExportedMessageLink::typeExportedMessageLink:
        result = TypeExportedMessageLink;
        break;
    default:
        result = TypeExportedMessageLink;
        break;
    }

    return result;
}

inline void ExportedMessageLinkObject::setCore(const ExportedMessageLink &core) {
    operator =(core);
}

inline ExportedMessageLink ExportedMessageLinkObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_EXPORTEDMESSAGELINK_OBJECT
