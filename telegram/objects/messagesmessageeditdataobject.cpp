// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesmessageeditdataobject.h"

MessagesMessageEditDataObject::MessagesMessageEditDataObject(const MessagesMessageEditData &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

MessagesMessageEditDataObject::MessagesMessageEditDataObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

MessagesMessageEditDataObject::~MessagesMessageEditDataObject() {
}

void MessagesMessageEditDataObject::setCaption(bool caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

bool MessagesMessageEditDataObject::caption() const {
    return m_core.caption();
}

void MessagesMessageEditDataObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 MessagesMessageEditDataObject::flags() const {
    return m_core.flags();
}

MessagesMessageEditDataObject &MessagesMessageEditDataObject::operator =(const MessagesMessageEditData &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT captionChanged();
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool MessagesMessageEditDataObject::operator ==(const MessagesMessageEditData &b) const {
    return m_core == b;
}

void MessagesMessageEditDataObject::setClassType(quint32 classType) {
    MessagesMessageEditData::MessagesMessageEditDataClassType result;
    switch(classType) {
    case TypeMessagesMessageEditData:
        result = MessagesMessageEditData::typeMessagesMessageEditData;
        break;
    default:
        result = MessagesMessageEditData::typeMessagesMessageEditData;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 MessagesMessageEditDataObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesMessageEditData::typeMessagesMessageEditData:
        result = TypeMessagesMessageEditData;
        break;
    default:
        result = TypeMessagesMessageEditData;
        break;
    }

    return result;
}

void MessagesMessageEditDataObject::setCore(const MessagesMessageEditData &core) {
    operator =(core);
}

MessagesMessageEditData MessagesMessageEditDataObject::core() const {
    return m_core;
}

