// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ACCOUNTPASSWORDSETTINGS_OBJECT
#define LQTG_TYPE_ACCOUNTPASSWORDSETTINGS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/accountpasswordsettings.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AccountPasswordSettingsObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AccountPasswordSettingsClassType)
    Q_PROPERTY(QString email READ email WRITE setEmail NOTIFY emailChanged)
    Q_PROPERTY(AccountPasswordSettings core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AccountPasswordSettingsClassType {
        TypeAccountPasswordSettings
    };

    AccountPasswordSettingsObject(const AccountPasswordSettings &core, QObject *parent = 0);
    AccountPasswordSettingsObject(QObject *parent = 0);
    virtual ~AccountPasswordSettingsObject();

    void setEmail(const QString &email);
    QString email() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AccountPasswordSettings &core);
    AccountPasswordSettings core() const;

    AccountPasswordSettingsObject &operator =(const AccountPasswordSettings &b);
    bool operator ==(const AccountPasswordSettings &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void emailChanged();

private Q_SLOTS:

private:
    AccountPasswordSettings m_core;
};

inline AccountPasswordSettingsObject::AccountPasswordSettingsObject(const AccountPasswordSettings &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AccountPasswordSettingsObject::AccountPasswordSettingsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AccountPasswordSettingsObject::~AccountPasswordSettingsObject() {
}

inline void AccountPasswordSettingsObject::setEmail(const QString &email) {
    if(m_core.email() == email) return;
    m_core.setEmail(email);
    Q_EMIT emailChanged();
    Q_EMIT coreChanged();
}

inline QString AccountPasswordSettingsObject::email() const {
    return m_core.email();
}

inline AccountPasswordSettingsObject &AccountPasswordSettingsObject::operator =(const AccountPasswordSettings &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT emailChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AccountPasswordSettingsObject::operator ==(const AccountPasswordSettings &b) const {
    return m_core == b;
}

inline void AccountPasswordSettingsObject::setClassType(quint32 classType) {
    AccountPasswordSettings::AccountPasswordSettingsClassType result;
    switch(classType) {
    case TypeAccountPasswordSettings:
        result = AccountPasswordSettings::typeAccountPasswordSettings;
        break;
    default:
        result = AccountPasswordSettings::typeAccountPasswordSettings;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AccountPasswordSettingsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AccountPasswordSettings::typeAccountPasswordSettings:
        result = TypeAccountPasswordSettings;
        break;
    default:
        result = TypeAccountPasswordSettings;
        break;
    }

    return result;
}

inline void AccountPasswordSettingsObject::setCore(const AccountPasswordSettings &core) {
    operator =(core);
}

inline AccountPasswordSettings AccountPasswordSettingsObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_ACCOUNTPASSWORDSETTINGS_OBJECT
