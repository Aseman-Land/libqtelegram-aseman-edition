// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authsentcodeobject.h"

AuthSentCodeObject::AuthSentCodeObject(const AuthSentCode &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

AuthSentCodeObject::AuthSentCodeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

AuthSentCodeObject::~AuthSentCodeObject() {
}

void AuthSentCodeObject::setIsPassword(bool isPassword) {
    if(m_core.isPassword() == isPassword) return;
    m_core.setIsPassword(isPassword);
    Q_EMIT isPasswordChanged();
    Q_EMIT coreChanged();
}

bool AuthSentCodeObject::isPassword() const {
    return m_core.isPassword();
}

void AuthSentCodeObject::setPhoneCodeHash(const QString &phoneCodeHash) {
    if(m_core.phoneCodeHash() == phoneCodeHash) return;
    m_core.setPhoneCodeHash(phoneCodeHash);
    Q_EMIT phoneCodeHashChanged();
    Q_EMIT coreChanged();
}

QString AuthSentCodeObject::phoneCodeHash() const {
    return m_core.phoneCodeHash();
}

void AuthSentCodeObject::setPhoneRegistered(bool phoneRegistered) {
    if(m_core.phoneRegistered() == phoneRegistered) return;
    m_core.setPhoneRegistered(phoneRegistered);
    Q_EMIT phoneRegisteredChanged();
    Q_EMIT coreChanged();
}

bool AuthSentCodeObject::phoneRegistered() const {
    return m_core.phoneRegistered();
}

void AuthSentCodeObject::setSendCallTimeout(qint32 sendCallTimeout) {
    if(m_core.sendCallTimeout() == sendCallTimeout) return;
    m_core.setSendCallTimeout(sendCallTimeout);
    Q_EMIT sendCallTimeoutChanged();
    Q_EMIT coreChanged();
}

qint32 AuthSentCodeObject::sendCallTimeout() const {
    return m_core.sendCallTimeout();
}

AuthSentCodeObject &AuthSentCodeObject::operator =(const AuthSentCode &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT isPasswordChanged();
    Q_EMIT phoneCodeHashChanged();
    Q_EMIT phoneRegisteredChanged();
    Q_EMIT sendCallTimeoutChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool AuthSentCodeObject::operator ==(const AuthSentCode &b) const {
    return m_core == b;
}

void AuthSentCodeObject::setClassType(quint32 classType) {
    AuthSentCode::AuthSentCodeType result;
    switch(classType) {
    case TypeAuthSentCode:
        result = AuthSentCode::typeAuthSentCode;
        break;
    case TypeAuthSentAppCode:
        result = AuthSentCode::typeAuthSentAppCode;
        break;
    default:
        result = AuthSentCode::typeAuthSentCode;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AuthSentCodeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthSentCode::typeAuthSentCode:
        result = TypeAuthSentCode;
        break;
    case AuthSentCode::typeAuthSentAppCode:
        result = TypeAuthSentAppCode;
        break;
    default:
        result = TypeAuthSentCode;
        break;
    }

    return result;
}

void AuthSentCodeObject::setCore(const AuthSentCode &core) {
    operator =(core);
}

AuthSentCode AuthSentCodeObject::core() const {
    return m_core;
}

