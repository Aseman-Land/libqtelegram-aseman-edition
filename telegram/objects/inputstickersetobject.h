// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTSTICKERSET_OBJECT
#define LQTG_TYPE_INPUTSTICKERSET_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputstickerset.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputStickerSetObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputStickerSetClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QString shortName READ shortName WRITE setShortName NOTIFY shortNameChanged)
    Q_PROPERTY(InputStickerSet core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputStickerSetClassType {
        TypeInputStickerSetEmpty,
        TypeInputStickerSetID,
        TypeInputStickerSetShortName
    };

    InputStickerSetObject(const InputStickerSet &core, QObject *parent = 0);
    InputStickerSetObject(QObject *parent = 0);
    virtual ~InputStickerSetObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setId(qint64 id);
    qint64 id() const;

    void setShortName(const QString &shortName);
    QString shortName() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputStickerSet &core);
    InputStickerSet core() const;

    InputStickerSetObject &operator =(const InputStickerSet &b);
    bool operator ==(const InputStickerSet &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void idChanged();
    void shortNameChanged();

private Q_SLOTS:

private:
    InputStickerSet m_core;
};

inline InputStickerSetObject::InputStickerSetObject(const InputStickerSet &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputStickerSetObject::InputStickerSetObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputStickerSetObject::~InputStickerSetObject() {
}

inline void InputStickerSetObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputStickerSetObject::accessHash() const {
    return m_core.accessHash();
}

inline void InputStickerSetObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputStickerSetObject::id() const {
    return m_core.id();
}

inline void InputStickerSetObject::setShortName(const QString &shortName) {
    if(m_core.shortName() == shortName) return;
    m_core.setShortName(shortName);
    Q_EMIT shortNameChanged();
    Q_EMIT coreChanged();
}

inline QString InputStickerSetObject::shortName() const {
    return m_core.shortName();
}

inline InputStickerSetObject &InputStickerSetObject::operator =(const InputStickerSet &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT idChanged();
    Q_EMIT shortNameChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputStickerSetObject::operator ==(const InputStickerSet &b) const {
    return m_core == b;
}

inline void InputStickerSetObject::setClassType(quint32 classType) {
    InputStickerSet::InputStickerSetClassType result;
    switch(classType) {
    case TypeInputStickerSetEmpty:
        result = InputStickerSet::typeInputStickerSetEmpty;
        break;
    case TypeInputStickerSetID:
        result = InputStickerSet::typeInputStickerSetID;
        break;
    case TypeInputStickerSetShortName:
        result = InputStickerSet::typeInputStickerSetShortName;
        break;
    default:
        result = InputStickerSet::typeInputStickerSetEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputStickerSetObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputStickerSet::typeInputStickerSetEmpty:
        result = TypeInputStickerSetEmpty;
        break;
    case InputStickerSet::typeInputStickerSetID:
        result = TypeInputStickerSetID;
        break;
    case InputStickerSet::typeInputStickerSetShortName:
        result = TypeInputStickerSetShortName;
        break;
    default:
        result = TypeInputStickerSetEmpty;
        break;
    }

    return result;
}

inline void InputStickerSetObject::setCore(const InputStickerSet &core) {
    operator =(core);
}

inline InputStickerSet InputStickerSetObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTSTICKERSET_OBJECT
