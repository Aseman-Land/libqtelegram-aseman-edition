// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactslinkobject.h"

ContactsLinkObject::ContactsLinkObject(const ContactsLink &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_foreignLink(0),
    m_myLink(0),
    m_user(0),
    m_core(core)
{
    m_foreignLink = new ContactLinkObject(m_core.foreignLink(), this);
    connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &ContactsLinkObject::coreForeignLinkChanged);
    m_myLink = new ContactLinkObject(m_core.myLink(), this);
    connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &ContactsLinkObject::coreMyLinkChanged);
    m_user = new UserObject(m_core.user(), this);
    connect(m_user.data(), &UserObject::coreChanged, this, &ContactsLinkObject::coreUserChanged);
}

ContactsLinkObject::ContactsLinkObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_foreignLink(0),
    m_myLink(0),
    m_user(0),
    m_core()
{
    m_foreignLink = new ContactLinkObject(m_core.foreignLink(), this);
    connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &ContactsLinkObject::coreForeignLinkChanged);
    m_myLink = new ContactLinkObject(m_core.myLink(), this);
    connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &ContactsLinkObject::coreMyLinkChanged);
    m_user = new UserObject(m_core.user(), this);
    connect(m_user.data(), &UserObject::coreChanged, this, &ContactsLinkObject::coreUserChanged);
}

ContactsLinkObject::~ContactsLinkObject() {
}

void ContactsLinkObject::setForeignLink(ContactLinkObject* foreignLink) {
    if(m_foreignLink == foreignLink) return;
    if(m_foreignLink) delete m_foreignLink;
    m_foreignLink = foreignLink;
    if(m_foreignLink) {
        m_foreignLink->setParent(this);
        m_core.setForeignLink(m_foreignLink->core());
        connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &ContactsLinkObject::coreForeignLinkChanged);
    }
    Q_EMIT foreignLinkChanged();
    Q_EMIT coreChanged();
}

ContactLinkObject*  ContactsLinkObject::foreignLink() const {
    return m_foreignLink;
}

void ContactsLinkObject::setMyLink(ContactLinkObject* myLink) {
    if(m_myLink == myLink) return;
    if(m_myLink) delete m_myLink;
    m_myLink = myLink;
    if(m_myLink) {
        m_myLink->setParent(this);
        m_core.setMyLink(m_myLink->core());
        connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &ContactsLinkObject::coreMyLinkChanged);
    }
    Q_EMIT myLinkChanged();
    Q_EMIT coreChanged();
}

ContactLinkObject*  ContactsLinkObject::myLink() const {
    return m_myLink;
}

void ContactsLinkObject::setUser(UserObject* user) {
    if(m_user == user) return;
    if(m_user) delete m_user;
    m_user = user;
    if(m_user) {
        m_user->setParent(this);
        m_core.setUser(m_user->core());
        connect(m_user.data(), &UserObject::coreChanged, this, &ContactsLinkObject::coreUserChanged);
    }
    Q_EMIT userChanged();
    Q_EMIT coreChanged();
}

UserObject*  ContactsLinkObject::user() const {
    return m_user;
}

ContactsLinkObject &ContactsLinkObject::operator =(const ContactsLink &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_foreignLink->setCore(b.foreignLink());
    m_myLink->setCore(b.myLink());
    m_user->setCore(b.user());

    Q_EMIT foreignLinkChanged();
    Q_EMIT myLinkChanged();
    Q_EMIT userChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ContactsLinkObject::operator ==(const ContactsLink &b) const {
    return m_core == b;
}

void ContactsLinkObject::setClassType(quint32 classType) {
    ContactsLink::ContactsLinkType result;
    switch(classType) {
    case TypeContactsLink:
        result = ContactsLink::typeContactsLink;
        break;
    default:
        result = ContactsLink::typeContactsLink;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactsLinkObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsLink::typeContactsLink:
        result = TypeContactsLink;
        break;
    default:
        result = TypeContactsLink;
        break;
    }

    return result;
}

void ContactsLinkObject::setCore(const ContactsLink &core) {
    operator =(core);
}

ContactsLink ContactsLinkObject::core() const {
    return m_core;
}

void ContactsLinkObject::coreForeignLinkChanged() {
    if(m_core.foreignLink() == m_foreignLink->core()) return;
    m_core.setForeignLink(m_foreignLink->core());
    Q_EMIT foreignLinkChanged();
    Q_EMIT coreChanged();
}

void ContactsLinkObject::coreMyLinkChanged() {
    if(m_core.myLink() == m_myLink->core()) return;
    m_core.setMyLink(m_myLink->core());
    Q_EMIT myLinkChanged();
    Q_EMIT coreChanged();
}

void ContactsLinkObject::coreUserChanged() {
    if(m_core.user() == m_user->core()) return;
    m_core.setUser(m_user->core());
    Q_EMIT userChanged();
    Q_EMIT coreChanged();
}

