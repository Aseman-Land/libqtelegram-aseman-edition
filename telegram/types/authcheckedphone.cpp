// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authcheckedphone.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

AuthCheckedPhone::AuthCheckedPhone(AuthCheckedPhoneType classType, InboundPkt *in) :
    m_phoneRegistered(false),
    m_classType(classType)
{
    if(in) fetch(in);
}

AuthCheckedPhone::AuthCheckedPhone(InboundPkt *in) :
    m_phoneRegistered(false),
    m_classType(typeAuthCheckedPhone)
{
    fetch(in);
}

AuthCheckedPhone::AuthCheckedPhone(const Null &null) :
    TelegramTypeObject(null),
    m_phoneRegistered(false),
    m_classType(typeAuthCheckedPhone)
{
}

AuthCheckedPhone::~AuthCheckedPhone() {
}

void AuthCheckedPhone::setPhoneRegistered(bool phoneRegistered) {
    m_phoneRegistered = phoneRegistered;
}

bool AuthCheckedPhone::phoneRegistered() const {
    return m_phoneRegistered;
}

bool AuthCheckedPhone::operator ==(const AuthCheckedPhone &b) const {
    return m_classType == b.m_classType &&
           m_phoneRegistered == b.m_phoneRegistered;
}

void AuthCheckedPhone::setClassType(AuthCheckedPhone::AuthCheckedPhoneType classType) {
    m_classType = classType;
}

AuthCheckedPhone::AuthCheckedPhoneType AuthCheckedPhone::classType() const {
    return m_classType;
}

bool AuthCheckedPhone::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAuthCheckedPhone: {
        m_phoneRegistered = in->fetchBool();
        m_classType = static_cast<AuthCheckedPhoneType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool AuthCheckedPhone::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAuthCheckedPhone: {
        out->appendBool(m_phoneRegistered);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QDataStream &operator<<(QDataStream &stream, const AuthCheckedPhone &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AuthCheckedPhone::typeAuthCheckedPhone:
        stream << item.phoneRegistered();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, AuthCheckedPhone &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AuthCheckedPhone::AuthCheckedPhoneType>(type));
    switch(type) {
    case AuthCheckedPhone::typeAuthCheckedPhone: {
        bool m_phone_registered;
        stream >> m_phone_registered;
        item.setPhoneRegistered(m_phone_registered);
    }
        break;
    }
    return stream;
}

