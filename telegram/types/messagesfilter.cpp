// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagesfilter.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

MessagesFilter::MessagesFilter(MessagesFilterType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesFilter::MessagesFilter(InboundPkt *in) :
    m_classType(typeInputMessagesFilterEmpty)
{
    fetch(in);
}

MessagesFilter::MessagesFilter(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeInputMessagesFilterEmpty)
{
}

MessagesFilter::~MessagesFilter() {
}

bool MessagesFilter::operator ==(const MessagesFilter &b) const {
    return m_classType == b.m_classType;
}

void MessagesFilter::setClassType(MessagesFilter::MessagesFilterType classType) {
    m_classType = classType;
}

MessagesFilter::MessagesFilterType MessagesFilter::classType() const {
    return m_classType;
}

bool MessagesFilter::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeInputMessagesFilterEmpty: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterPhotos: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterVideo: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterPhotoVideo: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterPhotoVideoDocuments: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterDocument: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterUrl: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterGif: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterVoice: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    case typeInputMessagesFilterMusic: {
        m_classType = static_cast<MessagesFilterType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesFilter::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeInputMessagesFilterEmpty: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterPhotos: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterVideo: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterPhotoVideo: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterPhotoVideoDocuments: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterDocument: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterUrl: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterGif: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterVoice: {
        return true;
    }
        break;
    
    case typeInputMessagesFilterMusic: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

