// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "inputgeopointobject.h"

InputGeoPointObject::InputGeoPointObject(const InputGeoPoint &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

InputGeoPointObject::InputGeoPointObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

InputGeoPointObject::~InputGeoPointObject() {
}

void InputGeoPointObject::setLat(qreal lat) {
    if(m_core.lat() == lat) return;
    m_core.setLat(lat);
    Q_EMIT latChanged();
    Q_EMIT coreChanged();
}

qreal InputGeoPointObject::lat() const {
    return m_core.lat();
}

void InputGeoPointObject::setLongValue(qreal longValue) {
    if(m_core.longValue() == longValue) return;
    m_core.setLongValue(longValue);
    Q_EMIT longValueChanged();
    Q_EMIT coreChanged();
}

qreal InputGeoPointObject::longValue() const {
    return m_core.longValue();
}

InputGeoPointObject &InputGeoPointObject::operator =(const InputGeoPoint &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT latChanged();
    Q_EMIT longValueChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool InputGeoPointObject::operator ==(const InputGeoPoint &b) const {
    return m_core == b;
}

void InputGeoPointObject::setClassType(quint32 classType) {
    InputGeoPoint::InputGeoPointClassType result;
    switch(classType) {
    case TypeInputGeoPointEmpty:
        result = InputGeoPoint::typeInputGeoPointEmpty;
        break;
    case TypeInputGeoPoint:
        result = InputGeoPoint::typeInputGeoPoint;
        break;
    default:
        result = InputGeoPoint::typeInputGeoPointEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 InputGeoPointObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputGeoPoint::typeInputGeoPointEmpty:
        result = TypeInputGeoPointEmpty;
        break;
    case InputGeoPoint::typeInputGeoPoint:
        result = TypeInputGeoPoint;
        break;
    default:
        result = TypeInputGeoPointEmpty;
        break;
    }

    return result;
}

void InputGeoPointObject::setCore(const InputGeoPoint &core) {
    operator =(core);
}

InputGeoPoint InputGeoPointObject::core() const {
    return m_core;
}

