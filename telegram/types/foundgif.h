// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_FOUNDGIF
#define LQTG_TYPE_FOUNDGIF

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QString>
#include "document.h"
#include <QtGlobal>
#include "photo.h"

class LIBQTELEGRAMSHARED_EXPORT FoundGif : public TelegramTypeObject
{
public:
    enum FoundGifClassType {
        typeFoundGif = 0x162ecc1f,
        typeFoundGifCached = 0x9c750409
    };

    FoundGif(FoundGifClassType classType = typeFoundGif, InboundPkt *in = 0);
    FoundGif(InboundPkt *in);
    FoundGif(const Null&);
    virtual ~FoundGif();

    void setContentType(const QString &contentType);
    QString contentType() const;

    void setContentUrl(const QString &contentUrl);
    QString contentUrl() const;

    void setDocument(const Document &document);
    Document document() const;

    void setH(qint32 h);
    qint32 h() const;

    void setPhoto(const Photo &photo);
    Photo photo() const;

    void setThumbUrl(const QString &thumbUrl);
    QString thumbUrl() const;

    void setUrl(const QString &url);
    QString url() const;

    void setW(qint32 w);
    qint32 w() const;

    void setClassType(FoundGifClassType classType);
    FoundGifClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static FoundGif fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const FoundGif &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_contentType;
    QString m_contentUrl;
    Document m_document;
    qint32 m_h;
    Photo m_photo;
    QString m_thumbUrl;
    QString m_url;
    qint32 m_w;
    FoundGifClassType m_classType;
};

Q_DECLARE_METATYPE(FoundGif)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const FoundGif &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, FoundGif &item);

inline FoundGif::FoundGif(FoundGifClassType classType, InboundPkt *in) :
    m_h(0),
    m_w(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline FoundGif::FoundGif(InboundPkt *in) :
    m_h(0),
    m_w(0),
    m_classType(typeFoundGif)
{
    fetch(in);
}

inline FoundGif::FoundGif(const Null &null) :
    TelegramTypeObject(null),
    m_h(0),
    m_w(0),
    m_classType(typeFoundGif)
{
}

inline FoundGif::~FoundGif() {
}

inline void FoundGif::setContentType(const QString &contentType) {
    m_contentType = contentType;
}

inline QString FoundGif::contentType() const {
    return m_contentType;
}

inline void FoundGif::setContentUrl(const QString &contentUrl) {
    m_contentUrl = contentUrl;
}

inline QString FoundGif::contentUrl() const {
    return m_contentUrl;
}

inline void FoundGif::setDocument(const Document &document) {
    m_document = document;
}

inline Document FoundGif::document() const {
    return m_document;
}

inline void FoundGif::setH(qint32 h) {
    m_h = h;
}

inline qint32 FoundGif::h() const {
    return m_h;
}

inline void FoundGif::setPhoto(const Photo &photo) {
    m_photo = photo;
}

inline Photo FoundGif::photo() const {
    return m_photo;
}

inline void FoundGif::setThumbUrl(const QString &thumbUrl) {
    m_thumbUrl = thumbUrl;
}

inline QString FoundGif::thumbUrl() const {
    return m_thumbUrl;
}

inline void FoundGif::setUrl(const QString &url) {
    m_url = url;
}

inline QString FoundGif::url() const {
    return m_url;
}

inline void FoundGif::setW(qint32 w) {
    m_w = w;
}

inline qint32 FoundGif::w() const {
    return m_w;
}

inline bool FoundGif::operator ==(const FoundGif &b) const {
    return m_classType == b.m_classType &&
           m_contentType == b.m_contentType &&
           m_contentUrl == b.m_contentUrl &&
           m_document == b.m_document &&
           m_h == b.m_h &&
           m_photo == b.m_photo &&
           m_thumbUrl == b.m_thumbUrl &&
           m_url == b.m_url &&
           m_w == b.m_w;
}

inline void FoundGif::setClassType(FoundGif::FoundGifClassType classType) {
    m_classType = classType;
}

inline FoundGif::FoundGifClassType FoundGif::classType() const {
    return m_classType;
}

inline bool FoundGif::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeFoundGif: {
        m_url = in->fetchQString();
        m_thumbUrl = in->fetchQString();
        m_contentUrl = in->fetchQString();
        m_contentType = in->fetchQString();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_classType = static_cast<FoundGifClassType>(x);
        return true;
    }
        break;
    
    case typeFoundGifCached: {
        m_url = in->fetchQString();
        m_photo.fetch(in);
        m_document.fetch(in);
        m_classType = static_cast<FoundGifClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool FoundGif::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeFoundGif: {
        out->appendQString(m_url);
        out->appendQString(m_thumbUrl);
        out->appendQString(m_contentUrl);
        out->appendQString(m_contentType);
        out->appendInt(m_w);
        out->appendInt(m_h);
        return true;
    }
        break;
    
    case typeFoundGifCached: {
        out->appendQString(m_url);
        m_photo.push(out);
        m_document.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> FoundGif::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeFoundGif: {
        result["classType"] = "FoundGif::typeFoundGif";
        result["url"] = QVariant::fromValue<QString>(url());
        result["thumbUrl"] = QVariant::fromValue<QString>(thumbUrl());
        result["contentUrl"] = QVariant::fromValue<QString>(contentUrl());
        result["contentType"] = QVariant::fromValue<QString>(contentType());
        result["w"] = QVariant::fromValue<qint32>(w());
        result["h"] = QVariant::fromValue<qint32>(h());
        return result;
    }
        break;
    
    case typeFoundGifCached: {
        result["classType"] = "FoundGif::typeFoundGifCached";
        result["url"] = QVariant::fromValue<QString>(url());
        result["photo"] = m_photo.toMap();
        result["document"] = m_document.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline FoundGif FoundGif::fromMap(const QMap<QString, QVariant> &map) {
    FoundGif result;
    if(map.value("classType").toString() == "FoundGif::typeFoundGif") {
        result.setClassType(typeFoundGif);
        result.setUrl( map.value("url").value<QString>() );
        result.setThumbUrl( map.value("thumbUrl").value<QString>() );
        result.setContentUrl( map.value("contentUrl").value<QString>() );
        result.setContentType( map.value("contentType").value<QString>() );
        result.setW( map.value("w").value<qint32>() );
        result.setH( map.value("h").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "FoundGif::typeFoundGifCached") {
        result.setClassType(typeFoundGifCached);
        result.setUrl( map.value("url").value<QString>() );
        result.setPhoto( Photo::fromMap(map.value("photo").toMap()) );
        result.setDocument( Document::fromMap(map.value("document").toMap()) );
        return result;
    }
    return result;
}

inline QByteArray FoundGif::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const FoundGif &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case FoundGif::typeFoundGif:
        stream << item.url();
        stream << item.thumbUrl();
        stream << item.contentUrl();
        stream << item.contentType();
        stream << item.w();
        stream << item.h();
        break;
    case FoundGif::typeFoundGifCached:
        stream << item.url();
        stream << item.photo();
        stream << item.document();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, FoundGif &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<FoundGif::FoundGifClassType>(type));
    switch(type) {
    case FoundGif::typeFoundGif: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_thumb_url;
        stream >> m_thumb_url;
        item.setThumbUrl(m_thumb_url);
        QString m_content_url;
        stream >> m_content_url;
        item.setContentUrl(m_content_url);
        QString m_content_type;
        stream >> m_content_type;
        item.setContentType(m_content_type);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
    }
        break;
    case FoundGif::typeFoundGifCached: {
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        Photo m_photo;
        stream >> m_photo;
        item.setPhoto(m_photo);
        Document m_document;
        stream >> m_document;
        item.setDocument(m_document);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_FOUNDGIF
