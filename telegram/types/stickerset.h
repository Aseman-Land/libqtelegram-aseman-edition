// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_STICKERSET
#define LQTG_TYPE_STICKERSET

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QString>

class LIBQTELEGRAMSHARED_EXPORT StickerSet : public TelegramTypeObject
{
public:
    enum StickerSetClassType {
        typeStickerSet = 0xcd303b41
    };

    StickerSet(StickerSetClassType classType = typeStickerSet, InboundPkt *in = 0);
    StickerSet(InboundPkt *in);
    StickerSet(const Null&);
    virtual ~StickerSet();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setCount(qint32 count);
    qint32 count() const;

    void setDisabled(bool disabled);
    bool disabled() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setHash(qint32 hash);
    qint32 hash() const;

    void setId(qint64 id);
    qint64 id() const;

    void setInstalled(bool installed);
    bool installed() const;

    void setOfficial(bool official);
    bool official() const;

    void setShortName(const QString &shortName);
    QString shortName() const;

    void setTitle(const QString &title);
    QString title() const;

    void setClassType(StickerSetClassType classType);
    StickerSetClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static StickerSet fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const StickerSet &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint64 m_accessHash;
    qint32 m_count;
    qint32 m_flags;
    qint32 m_hash;
    qint64 m_id;
    QString m_shortName;
    QString m_title;
    StickerSetClassType m_classType;
};

Q_DECLARE_METATYPE(StickerSet)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const StickerSet &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, StickerSet &item);

inline StickerSet::StickerSet(StickerSetClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_count(0),
    m_flags(0),
    m_hash(0),
    m_id(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline StickerSet::StickerSet(InboundPkt *in) :
    m_accessHash(0),
    m_count(0),
    m_flags(0),
    m_hash(0),
    m_id(0),
    m_classType(typeStickerSet)
{
    fetch(in);
}

inline StickerSet::StickerSet(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_count(0),
    m_flags(0),
    m_hash(0),
    m_id(0),
    m_classType(typeStickerSet)
{
}

inline StickerSet::~StickerSet() {
}

inline void StickerSet::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

inline qint64 StickerSet::accessHash() const {
    return m_accessHash;
}

inline void StickerSet::setCount(qint32 count) {
    m_count = count;
}

inline qint32 StickerSet::count() const {
    return m_count;
}

inline void StickerSet::setDisabled(bool disabled) {
    if(disabled) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

inline bool StickerSet::disabled() const {
    return (m_flags & 1<<1);
}

inline void StickerSet::setFlags(qint32 flags) {
    m_flags = flags;
}

inline qint32 StickerSet::flags() const {
    return m_flags;
}

inline void StickerSet::setHash(qint32 hash) {
    m_hash = hash;
}

inline qint32 StickerSet::hash() const {
    return m_hash;
}

inline void StickerSet::setId(qint64 id) {
    m_id = id;
}

inline qint64 StickerSet::id() const {
    return m_id;
}

inline void StickerSet::setInstalled(bool installed) {
    if(installed) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

inline bool StickerSet::installed() const {
    return (m_flags & 1<<0);
}

inline void StickerSet::setOfficial(bool official) {
    if(official) m_flags = (m_flags | (1<<2));
    else m_flags = (m_flags & ~(1<<2));
}

inline bool StickerSet::official() const {
    return (m_flags & 1<<2);
}

inline void StickerSet::setShortName(const QString &shortName) {
    m_shortName = shortName;
}

inline QString StickerSet::shortName() const {
    return m_shortName;
}

inline void StickerSet::setTitle(const QString &title) {
    m_title = title;
}

inline QString StickerSet::title() const {
    return m_title;
}

inline bool StickerSet::operator ==(const StickerSet &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_count == b.m_count &&
           m_flags == b.m_flags &&
           m_hash == b.m_hash &&
           m_id == b.m_id &&
           m_shortName == b.m_shortName &&
           m_title == b.m_title;
}

inline void StickerSet::setClassType(StickerSet::StickerSetClassType classType) {
    m_classType = classType;
}

inline StickerSet::StickerSetClassType StickerSet::classType() const {
    return m_classType;
}

inline bool StickerSet::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeStickerSet: {
        m_flags = in->fetchInt();
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_title = in->fetchQString();
        m_shortName = in->fetchQString();
        m_count = in->fetchInt();
        m_hash = in->fetchInt();
        m_classType = static_cast<StickerSetClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool StickerSet::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeStickerSet: {
        out->appendInt(m_flags);
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendQString(m_title);
        out->appendQString(m_shortName);
        out->appendInt(m_count);
        out->appendInt(m_hash);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> StickerSet::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeStickerSet: {
        result["classType"] = "StickerSet::typeStickerSet";
        result["installed"] = QVariant::fromValue<bool>(installed());
        result["disabled"] = QVariant::fromValue<bool>(disabled());
        result["official"] = QVariant::fromValue<bool>(official());
        result["id"] = QVariant::fromValue<qint64>(id());
        result["accessHash"] = QVariant::fromValue<qint64>(accessHash());
        result["title"] = QVariant::fromValue<QString>(title());
        result["shortName"] = QVariant::fromValue<QString>(shortName());
        result["count"] = QVariant::fromValue<qint32>(count());
        result["hash"] = QVariant::fromValue<qint32>(hash());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline StickerSet StickerSet::fromMap(const QMap<QString, QVariant> &map) {
    StickerSet result;
    if(map.value("classType").toString() == "StickerSet::typeStickerSet") {
        result.setClassType(typeStickerSet);
        result.setInstalled( map.value("installed").value<bool>() );
        result.setDisabled( map.value("disabled").value<bool>() );
        result.setOfficial( map.value("official").value<bool>() );
        result.setId( map.value("id").value<qint64>() );
        result.setAccessHash( map.value("accessHash").value<qint64>() );
        result.setTitle( map.value("title").value<QString>() );
        result.setShortName( map.value("shortName").value<QString>() );
        result.setCount( map.value("count").value<qint32>() );
        result.setHash( map.value("hash").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray StickerSet::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const StickerSet &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case StickerSet::typeStickerSet:
        stream << item.flags();
        stream << item.id();
        stream << item.accessHash();
        stream << item.title();
        stream << item.shortName();
        stream << item.count();
        stream << item.hash();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, StickerSet &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<StickerSet::StickerSetClassType>(type));
    switch(type) {
    case StickerSet::typeStickerSet: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        QString m_title;
        stream >> m_title;
        item.setTitle(m_title);
        QString m_short_name;
        stream >> m_short_name;
        item.setShortName(m_short_name);
        qint32 m_count;
        stream >> m_count;
        item.setCount(m_count);
        qint32 m_hash;
        stream >> m_hash;
        item.setHash(m_hash);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_STICKERSET
