// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_TOPPEERCATEGORY
#define LQTG_TYPE_TOPPEERCATEGORY

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>


class LIBQTELEGRAMSHARED_EXPORT TopPeerCategory : public TelegramTypeObject
{
public:
    enum TopPeerCategoryClassType {
        typeTopPeerCategoryBotsPM = 0xab661b5b,
        typeTopPeerCategoryBotsInline = 0x148677e2,
        typeTopPeerCategoryCorrespondents = 0x637b7ed,
        typeTopPeerCategoryGroups = 0xbd17a14a,
        typeTopPeerCategoryChannels = 0x161d9628
    };

    TopPeerCategory(TopPeerCategoryClassType classType = typeTopPeerCategoryBotsPM, InboundPkt *in = 0);
    TopPeerCategory(InboundPkt *in);
    TopPeerCategory(const Null&);
    virtual ~TopPeerCategory();

    void setClassType(TopPeerCategoryClassType classType);
    TopPeerCategoryClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static TopPeerCategory fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const TopPeerCategory &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    TopPeerCategoryClassType m_classType;
};

Q_DECLARE_METATYPE(TopPeerCategory)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const TopPeerCategory &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, TopPeerCategory &item);

inline TopPeerCategory::TopPeerCategory(TopPeerCategoryClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

inline TopPeerCategory::TopPeerCategory(InboundPkt *in) :
    m_classType(typeTopPeerCategoryBotsPM)
{
    fetch(in);
}

inline TopPeerCategory::TopPeerCategory(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeTopPeerCategoryBotsPM)
{
}

inline TopPeerCategory::~TopPeerCategory() {
}

inline bool TopPeerCategory::operator ==(const TopPeerCategory &b) const {
    return m_classType == b.m_classType;
}

inline void TopPeerCategory::setClassType(TopPeerCategory::TopPeerCategoryClassType classType) {
    m_classType = classType;
}

inline TopPeerCategory::TopPeerCategoryClassType TopPeerCategory::classType() const {
    return m_classType;
}

inline bool TopPeerCategory::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeTopPeerCategoryBotsPM: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    case typeTopPeerCategoryBotsInline: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    case typeTopPeerCategoryCorrespondents: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    case typeTopPeerCategoryGroups: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    case typeTopPeerCategoryChannels: {
        m_classType = static_cast<TopPeerCategoryClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool TopPeerCategory::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeTopPeerCategoryBotsPM: {
        return true;
    }
        break;
    
    case typeTopPeerCategoryBotsInline: {
        return true;
    }
        break;
    
    case typeTopPeerCategoryCorrespondents: {
        return true;
    }
        break;
    
    case typeTopPeerCategoryGroups: {
        return true;
    }
        break;
    
    case typeTopPeerCategoryChannels: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> TopPeerCategory::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeTopPeerCategoryBotsPM: {
        result["classType"] = "TopPeerCategory::typeTopPeerCategoryBotsPM";
        return result;
    }
        break;
    
    case typeTopPeerCategoryBotsInline: {
        result["classType"] = "TopPeerCategory::typeTopPeerCategoryBotsInline";
        return result;
    }
        break;
    
    case typeTopPeerCategoryCorrespondents: {
        result["classType"] = "TopPeerCategory::typeTopPeerCategoryCorrespondents";
        return result;
    }
        break;
    
    case typeTopPeerCategoryGroups: {
        result["classType"] = "TopPeerCategory::typeTopPeerCategoryGroups";
        return result;
    }
        break;
    
    case typeTopPeerCategoryChannels: {
        result["classType"] = "TopPeerCategory::typeTopPeerCategoryChannels";
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline TopPeerCategory TopPeerCategory::fromMap(const QMap<QString, QVariant> &map) {
    TopPeerCategory result;
    if(map.value("classType").toString() == "TopPeerCategory::typeTopPeerCategoryBotsPM") {
        result.setClassType(typeTopPeerCategoryBotsPM);
        return result;
    }
    if(map.value("classType").toString() == "TopPeerCategory::typeTopPeerCategoryBotsInline") {
        result.setClassType(typeTopPeerCategoryBotsInline);
        return result;
    }
    if(map.value("classType").toString() == "TopPeerCategory::typeTopPeerCategoryCorrespondents") {
        result.setClassType(typeTopPeerCategoryCorrespondents);
        return result;
    }
    if(map.value("classType").toString() == "TopPeerCategory::typeTopPeerCategoryGroups") {
        result.setClassType(typeTopPeerCategoryGroups);
        return result;
    }
    if(map.value("classType").toString() == "TopPeerCategory::typeTopPeerCategoryChannels") {
        result.setClassType(typeTopPeerCategoryChannels);
        return result;
    }
    return result;
}

inline QByteArray TopPeerCategory::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const TopPeerCategory &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case TopPeerCategory::typeTopPeerCategoryBotsPM:
        
        break;
    case TopPeerCategory::typeTopPeerCategoryBotsInline:
        
        break;
    case TopPeerCategory::typeTopPeerCategoryCorrespondents:
        
        break;
    case TopPeerCategory::typeTopPeerCategoryGroups:
        
        break;
    case TopPeerCategory::typeTopPeerCategoryChannels:
        
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, TopPeerCategory &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<TopPeerCategory::TopPeerCategoryClassType>(type));
    switch(type) {
    case TopPeerCategory::typeTopPeerCategoryBotsPM: {
        
    }
        break;
    case TopPeerCategory::typeTopPeerCategoryBotsInline: {
        
    }
        break;
    case TopPeerCategory::typeTopPeerCategoryCorrespondents: {
        
    }
        break;
    case TopPeerCategory::typeTopPeerCategoryGroups: {
        
    }
        break;
    case TopPeerCategory::typeTopPeerCategoryChannels: {
        
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_TOPPEERCATEGORY
