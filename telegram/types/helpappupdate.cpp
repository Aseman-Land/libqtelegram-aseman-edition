// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "helpappupdate.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

HelpAppUpdate::HelpAppUpdate(HelpAppUpdateType classType, InboundPkt *in) :
    m_critical(false),
    m_id(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

HelpAppUpdate::HelpAppUpdate(InboundPkt *in) :
    m_critical(false),
    m_id(0),
    m_classType(typeHelpAppUpdate)
{
    fetch(in);
}

HelpAppUpdate::HelpAppUpdate(const Null &null) :
    TelegramTypeObject(null),
    m_critical(false),
    m_id(0),
    m_classType(typeHelpAppUpdate)
{
}

HelpAppUpdate::~HelpAppUpdate() {
}

void HelpAppUpdate::setCritical(bool critical) {
    m_critical = critical;
}

bool HelpAppUpdate::critical() const {
    return m_critical;
}

void HelpAppUpdate::setId(qint32 id) {
    m_id = id;
}

qint32 HelpAppUpdate::id() const {
    return m_id;
}

void HelpAppUpdate::setText(const QString &text) {
    m_text = text;
}

QString HelpAppUpdate::text() const {
    return m_text;
}

void HelpAppUpdate::setUrl(const QString &url) {
    m_url = url;
}

QString HelpAppUpdate::url() const {
    return m_url;
}

bool HelpAppUpdate::operator ==(const HelpAppUpdate &b) const {
    return m_classType == b.m_classType &&
           m_critical == b.m_critical &&
           m_id == b.m_id &&
           m_text == b.m_text &&
           m_url == b.m_url;
}

void HelpAppUpdate::setClassType(HelpAppUpdate::HelpAppUpdateType classType) {
    m_classType = classType;
}

HelpAppUpdate::HelpAppUpdateType HelpAppUpdate::classType() const {
    return m_classType;
}

bool HelpAppUpdate::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeHelpAppUpdate: {
        m_id = in->fetchInt();
        m_critical = in->fetchBool();
        m_url = in->fetchQString();
        m_text = in->fetchQString();
        m_classType = static_cast<HelpAppUpdateType>(x);
        return true;
    }
        break;
    
    case typeHelpNoAppUpdate: {
        m_classType = static_cast<HelpAppUpdateType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool HelpAppUpdate::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeHelpAppUpdate: {
        out->appendInt(m_id);
        out->appendBool(m_critical);
        out->appendQString(m_url);
        out->appendQString(m_text);
        return true;
    }
        break;
    
    case typeHelpNoAppUpdate: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QDataStream &operator<<(QDataStream &stream, const HelpAppUpdate &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case HelpAppUpdate::typeHelpAppUpdate:
        stream << item.id();
        stream << item.critical();
        stream << item.url();
        stream << item.text();
        break;
    case HelpAppUpdate::typeHelpNoAppUpdate:
        
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, HelpAppUpdate &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<HelpAppUpdate::HelpAppUpdateType>(type));
    switch(type) {
    case HelpAppUpdate::typeHelpAppUpdate: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        bool m_critical;
        stream >> m_critical;
        item.setCritical(m_critical);
        QString m_url;
        stream >> m_url;
        item.setUrl(m_url);
        QString m_text;
        stream >> m_text;
        item.setText(m_text);
    }
        break;
    case HelpAppUpdate::typeHelpNoAppUpdate: {
        
    }
        break;
    }
    return stream;
}

