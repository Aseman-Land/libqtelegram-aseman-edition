// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "updateobject.h"

UpdateObject::UpdateObject(const Update &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_action(0),
    m_chat(0),
    m_foreignLink(0),
    m_group(0),
    m_key(0),
    m_media(0),
    m_messageEncrypted(0),
    m_message(0),
    m_myLink(0),
    m_notifySettings(0),
    m_participants(0),
    m_peerNotify(0),
    m_peer(0),
    m_photo(0),
    m_status(0),
    m_stickerset(0),
    m_webpage(0),
    m_core(core)
{
    m_action = new SendMessageActionObject(m_core.action(), this);
    connect(m_action.data(), &SendMessageActionObject::coreChanged, this, &UpdateObject::coreActionChanged);
    m_chat = new EncryptedChatObject(m_core.chat(), this);
    connect(m_chat.data(), &EncryptedChatObject::coreChanged, this, &UpdateObject::coreChatChanged);
    m_foreignLink = new ContactLinkObject(m_core.foreignLink(), this);
    connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreForeignLinkChanged);
    m_group = new MessageGroupObject(m_core.group(), this);
    connect(m_group.data(), &MessageGroupObject::coreChanged, this, &UpdateObject::coreGroupChanged);
    m_key = new PrivacyKeyObject(m_core.key(), this);
    connect(m_key.data(), &PrivacyKeyObject::coreChanged, this, &UpdateObject::coreKeyChanged);
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), &MessageMediaObject::coreChanged, this, &UpdateObject::coreMediaChanged);
    m_messageEncrypted = new EncryptedMessageObject(m_core.messageEncrypted(), this);
    connect(m_messageEncrypted.data(), &EncryptedMessageObject::coreChanged, this, &UpdateObject::coreMessageEncryptedChanged);
    m_message = new MessageObject(m_core.message(), this);
    connect(m_message.data(), &MessageObject::coreChanged, this, &UpdateObject::coreMessageChanged);
    m_myLink = new ContactLinkObject(m_core.myLink(), this);
    connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreMyLinkChanged);
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &UpdateObject::coreNotifySettingsChanged);
    m_participants = new ChatParticipantsObject(m_core.participants(), this);
    connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &UpdateObject::coreParticipantsChanged);
    m_peerNotify = new NotifyPeerObject(m_core.peerNotify(), this);
    connect(m_peerNotify.data(), &NotifyPeerObject::coreChanged, this, &UpdateObject::corePeerNotifyChanged);
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &UpdateObject::corePeerChanged);
    m_photo = new UserProfilePhotoObject(m_core.photo(), this);
    connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UpdateObject::corePhotoChanged);
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), &UserStatusObject::coreChanged, this, &UpdateObject::coreStatusChanged);
    m_stickerset = new MessagesStickerSetObject(m_core.stickerset(), this);
    connect(m_stickerset.data(), &MessagesStickerSetObject::coreChanged, this, &UpdateObject::coreStickersetChanged);
    m_webpage = new WebPageObject(m_core.webpage(), this);
    connect(m_webpage.data(), &WebPageObject::coreChanged, this, &UpdateObject::coreWebpageChanged);
}

UpdateObject::UpdateObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_action(0),
    m_chat(0),
    m_foreignLink(0),
    m_group(0),
    m_key(0),
    m_media(0),
    m_messageEncrypted(0),
    m_message(0),
    m_myLink(0),
    m_notifySettings(0),
    m_participants(0),
    m_peerNotify(0),
    m_peer(0),
    m_photo(0),
    m_status(0),
    m_stickerset(0),
    m_webpage(0),
    m_core()
{
    m_action = new SendMessageActionObject(m_core.action(), this);
    connect(m_action.data(), &SendMessageActionObject::coreChanged, this, &UpdateObject::coreActionChanged);
    m_chat = new EncryptedChatObject(m_core.chat(), this);
    connect(m_chat.data(), &EncryptedChatObject::coreChanged, this, &UpdateObject::coreChatChanged);
    m_foreignLink = new ContactLinkObject(m_core.foreignLink(), this);
    connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreForeignLinkChanged);
    m_group = new MessageGroupObject(m_core.group(), this);
    connect(m_group.data(), &MessageGroupObject::coreChanged, this, &UpdateObject::coreGroupChanged);
    m_key = new PrivacyKeyObject(m_core.key(), this);
    connect(m_key.data(), &PrivacyKeyObject::coreChanged, this, &UpdateObject::coreKeyChanged);
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), &MessageMediaObject::coreChanged, this, &UpdateObject::coreMediaChanged);
    m_messageEncrypted = new EncryptedMessageObject(m_core.messageEncrypted(), this);
    connect(m_messageEncrypted.data(), &EncryptedMessageObject::coreChanged, this, &UpdateObject::coreMessageEncryptedChanged);
    m_message = new MessageObject(m_core.message(), this);
    connect(m_message.data(), &MessageObject::coreChanged, this, &UpdateObject::coreMessageChanged);
    m_myLink = new ContactLinkObject(m_core.myLink(), this);
    connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreMyLinkChanged);
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &UpdateObject::coreNotifySettingsChanged);
    m_participants = new ChatParticipantsObject(m_core.participants(), this);
    connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &UpdateObject::coreParticipantsChanged);
    m_peerNotify = new NotifyPeerObject(m_core.peerNotify(), this);
    connect(m_peerNotify.data(), &NotifyPeerObject::coreChanged, this, &UpdateObject::corePeerNotifyChanged);
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &UpdateObject::corePeerChanged);
    m_photo = new UserProfilePhotoObject(m_core.photo(), this);
    connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UpdateObject::corePhotoChanged);
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), &UserStatusObject::coreChanged, this, &UpdateObject::coreStatusChanged);
    m_stickerset = new MessagesStickerSetObject(m_core.stickerset(), this);
    connect(m_stickerset.data(), &MessagesStickerSetObject::coreChanged, this, &UpdateObject::coreStickersetChanged);
    m_webpage = new WebPageObject(m_core.webpage(), this);
    connect(m_webpage.data(), &WebPageObject::coreChanged, this, &UpdateObject::coreWebpageChanged);
}

UpdateObject::~UpdateObject() {
}

void UpdateObject::setAction(SendMessageActionObject* action) {
    if(m_action == action) return;
    if(m_action) delete m_action;
    m_action = action;
    if(m_action) {
        m_action->setParent(this);
        m_core.setAction(m_action->core());
        connect(m_action.data(), &SendMessageActionObject::coreChanged, this, &UpdateObject::coreActionChanged);
    }
    Q_EMIT actionChanged();
    Q_EMIT coreChanged();
}

SendMessageActionObject*  UpdateObject::action() const {
    return m_action;
}

void UpdateObject::setAuthKeyId(qint64 authKeyId) {
    if(m_core.authKeyId() == authKeyId) return;
    m_core.setAuthKeyId(authKeyId);
    Q_EMIT authKeyIdChanged();
    Q_EMIT coreChanged();
}

qint64 UpdateObject::authKeyId() const {
    return m_core.authKeyId();
}

void UpdateObject::setBlocked(bool blocked) {
    if(m_core.blocked() == blocked) return;
    m_core.setBlocked(blocked);
    Q_EMIT blockedChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::blocked() const {
    return m_core.blocked();
}

void UpdateObject::setChannelId(qint32 channelId) {
    if(m_core.channelId() == channelId) return;
    m_core.setChannelId(channelId);
    Q_EMIT channelIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::channelId() const {
    return m_core.channelId();
}

void UpdateObject::setChat(EncryptedChatObject* chat) {
    if(m_chat == chat) return;
    if(m_chat) delete m_chat;
    m_chat = chat;
    if(m_chat) {
        m_chat->setParent(this);
        m_core.setChat(m_chat->core());
        connect(m_chat.data(), &EncryptedChatObject::coreChanged, this, &UpdateObject::coreChatChanged);
    }
    Q_EMIT chatChanged();
    Q_EMIT coreChanged();
}

EncryptedChatObject*  UpdateObject::chat() const {
    return m_chat;
}

void UpdateObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::chatId() const {
    return m_core.chatId();
}

void UpdateObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::date() const {
    return m_core.date();
}

void UpdateObject::setDcOptions(const QList<DcOption> &dcOptions) {
    if(m_core.dcOptions() == dcOptions) return;
    m_core.setDcOptions(dcOptions);
    Q_EMIT dcOptionsChanged();
    Q_EMIT coreChanged();
}

QList<DcOption> UpdateObject::dcOptions() const {
    return m_core.dcOptions();
}

void UpdateObject::setDevice(const QString &device) {
    if(m_core.device() == device) return;
    m_core.setDevice(device);
    Q_EMIT deviceChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::device() const {
    return m_core.device();
}

void UpdateObject::setEnabled(bool enabled) {
    if(m_core.enabled() == enabled) return;
    m_core.setEnabled(enabled);
    Q_EMIT enabledChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::enabled() const {
    return m_core.enabled();
}

void UpdateObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::firstName() const {
    return m_core.firstName();
}

void UpdateObject::setForeignLink(ContactLinkObject* foreignLink) {
    if(m_foreignLink == foreignLink) return;
    if(m_foreignLink) delete m_foreignLink;
    m_foreignLink = foreignLink;
    if(m_foreignLink) {
        m_foreignLink->setParent(this);
        m_core.setForeignLink(m_foreignLink->core());
        connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreForeignLinkChanged);
    }
    Q_EMIT foreignLinkChanged();
    Q_EMIT coreChanged();
}

ContactLinkObject*  UpdateObject::foreignLink() const {
    return m_foreignLink;
}

void UpdateObject::setGroup(MessageGroupObject* group) {
    if(m_group == group) return;
    if(m_group) delete m_group;
    m_group = group;
    if(m_group) {
        m_group->setParent(this);
        m_core.setGroup(m_group->core());
        connect(m_group.data(), &MessageGroupObject::coreChanged, this, &UpdateObject::coreGroupChanged);
    }
    Q_EMIT groupChanged();
    Q_EMIT coreChanged();
}

MessageGroupObject*  UpdateObject::group() const {
    return m_group;
}

void UpdateObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::id() const {
    return m_core.id();
}

void UpdateObject::setInviterId(qint32 inviterId) {
    if(m_core.inviterId() == inviterId) return;
    m_core.setInviterId(inviterId);
    Q_EMIT inviterIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::inviterId() const {
    return m_core.inviterId();
}

void UpdateObject::setIsAdmin(bool isAdmin) {
    if(m_core.isAdmin() == isAdmin) return;
    m_core.setIsAdmin(isAdmin);
    Q_EMIT isAdminChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::isAdmin() const {
    return m_core.isAdmin();
}

void UpdateObject::setKey(PrivacyKeyObject* key) {
    if(m_key == key) return;
    if(m_key) delete m_key;
    m_key = key;
    if(m_key) {
        m_key->setParent(this);
        m_core.setKey(m_key->core());
        connect(m_key.data(), &PrivacyKeyObject::coreChanged, this, &UpdateObject::coreKeyChanged);
    }
    Q_EMIT keyChanged();
    Q_EMIT coreChanged();
}

PrivacyKeyObject*  UpdateObject::key() const {
    return m_key;
}

void UpdateObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::lastName() const {
    return m_core.lastName();
}

void UpdateObject::setLocation(const QString &location) {
    if(m_core.location() == location) return;
    m_core.setLocation(location);
    Q_EMIT locationChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::location() const {
    return m_core.location();
}

void UpdateObject::setMaxDate(qint32 maxDate) {
    if(m_core.maxDate() == maxDate) return;
    m_core.setMaxDate(maxDate);
    Q_EMIT maxDateChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::maxDate() const {
    return m_core.maxDate();
}

void UpdateObject::setMaxId(qint32 maxId) {
    if(m_core.maxId() == maxId) return;
    m_core.setMaxId(maxId);
    Q_EMIT maxIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::maxId() const {
    return m_core.maxId();
}

void UpdateObject::setMedia(MessageMediaObject* media) {
    if(m_media == media) return;
    if(m_media) delete m_media;
    m_media = media;
    if(m_media) {
        m_media->setParent(this);
        m_core.setMedia(m_media->core());
        connect(m_media.data(), &MessageMediaObject::coreChanged, this, &UpdateObject::coreMediaChanged);
    }
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

MessageMediaObject*  UpdateObject::media() const {
    return m_media;
}

void UpdateObject::setMessageEncrypted(EncryptedMessageObject* messageEncrypted) {
    if(m_messageEncrypted == messageEncrypted) return;
    if(m_messageEncrypted) delete m_messageEncrypted;
    m_messageEncrypted = messageEncrypted;
    if(m_messageEncrypted) {
        m_messageEncrypted->setParent(this);
        m_core.setMessageEncrypted(m_messageEncrypted->core());
        connect(m_messageEncrypted.data(), &EncryptedMessageObject::coreChanged, this, &UpdateObject::coreMessageEncryptedChanged);
    }
    Q_EMIT messageEncryptedChanged();
    Q_EMIT coreChanged();
}

EncryptedMessageObject*  UpdateObject::messageEncrypted() const {
    return m_messageEncrypted;
}

void UpdateObject::setMessage(MessageObject* message) {
    if(m_message == message) return;
    if(m_message) delete m_message;
    m_message = message;
    if(m_message) {
        m_message->setParent(this);
        m_core.setMessage(m_message->core());
        connect(m_message.data(), &MessageObject::coreChanged, this, &UpdateObject::coreMessageChanged);
    }
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

MessageObject*  UpdateObject::message() const {
    return m_message;
}

void UpdateObject::setMessageString(const QString &messageString) {
    if(m_core.messageString() == messageString) return;
    m_core.setMessageString(messageString);
    Q_EMIT messageStringChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::messageString() const {
    return m_core.messageString();
}

void UpdateObject::setMessages(const QList<qint32> &messages) {
    if(m_core.messages() == messages) return;
    m_core.setMessages(messages);
    Q_EMIT messagesChanged();
    Q_EMIT coreChanged();
}

QList<qint32> UpdateObject::messages() const {
    return m_core.messages();
}

void UpdateObject::setMyLink(ContactLinkObject* myLink) {
    if(m_myLink == myLink) return;
    if(m_myLink) delete m_myLink;
    m_myLink = myLink;
    if(m_myLink) {
        m_myLink->setParent(this);
        m_core.setMyLink(m_myLink->core());
        connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreMyLinkChanged);
    }
    Q_EMIT myLinkChanged();
    Q_EMIT coreChanged();
}

ContactLinkObject*  UpdateObject::myLink() const {
    return m_myLink;
}

void UpdateObject::setNotifySettings(PeerNotifySettingsObject* notifySettings) {
    if(m_notifySettings == notifySettings) return;
    if(m_notifySettings) delete m_notifySettings;
    m_notifySettings = notifySettings;
    if(m_notifySettings) {
        m_notifySettings->setParent(this);
        m_core.setNotifySettings(m_notifySettings->core());
        connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &UpdateObject::coreNotifySettingsChanged);
    }
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

PeerNotifySettingsObject*  UpdateObject::notifySettings() const {
    return m_notifySettings;
}

void UpdateObject::setOffset(const QString &offset) {
    if(m_core.offset() == offset) return;
    m_core.setOffset(offset);
    Q_EMIT offsetChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::offset() const {
    return m_core.offset();
}

void UpdateObject::setOrder(const QList<qint64> &order) {
    if(m_core.order() == order) return;
    m_core.setOrder(order);
    Q_EMIT orderChanged();
    Q_EMIT coreChanged();
}

QList<qint64> UpdateObject::order() const {
    return m_core.order();
}

void UpdateObject::setParticipants(ChatParticipantsObject* participants) {
    if(m_participants == participants) return;
    if(m_participants) delete m_participants;
    m_participants = participants;
    if(m_participants) {
        m_participants->setParent(this);
        m_core.setParticipants(m_participants->core());
        connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &UpdateObject::coreParticipantsChanged);
    }
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

ChatParticipantsObject*  UpdateObject::participants() const {
    return m_participants;
}

void UpdateObject::setPeerNotify(NotifyPeerObject* peerNotify) {
    if(m_peerNotify == peerNotify) return;
    if(m_peerNotify) delete m_peerNotify;
    m_peerNotify = peerNotify;
    if(m_peerNotify) {
        m_peerNotify->setParent(this);
        m_core.setPeerNotify(m_peerNotify->core());
        connect(m_peerNotify.data(), &NotifyPeerObject::coreChanged, this, &UpdateObject::corePeerNotifyChanged);
    }
    Q_EMIT peerNotifyChanged();
    Q_EMIT coreChanged();
}

NotifyPeerObject*  UpdateObject::peerNotify() const {
    return m_peerNotify;
}

void UpdateObject::setPeer(PeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), &PeerObject::coreChanged, this, &UpdateObject::corePeerChanged);
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

PeerObject*  UpdateObject::peer() const {
    return m_peer;
}

void UpdateObject::setPhone(const QString &phone) {
    if(m_core.phone() == phone) return;
    m_core.setPhone(phone);
    Q_EMIT phoneChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::phone() const {
    return m_core.phone();
}

void UpdateObject::setPhoto(UserProfilePhotoObject* photo) {
    if(m_photo == photo) return;
    if(m_photo) delete m_photo;
    m_photo = photo;
    if(m_photo) {
        m_photo->setParent(this);
        m_core.setPhoto(m_photo->core());
        connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UpdateObject::corePhotoChanged);
    }
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

UserProfilePhotoObject*  UpdateObject::photo() const {
    return m_photo;
}

void UpdateObject::setPopup(bool popup) {
    if(m_core.popup() == popup) return;
    m_core.setPopup(popup);
    Q_EMIT popupChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::popup() const {
    return m_core.popup();
}

void UpdateObject::setPrevious(bool previous) {
    if(m_core.previous() == previous) return;
    m_core.setPrevious(previous);
    Q_EMIT previousChanged();
    Q_EMIT coreChanged();
}

bool UpdateObject::previous() const {
    return m_core.previous();
}

void UpdateObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::pts() const {
    return m_core.pts();
}

void UpdateObject::setPtsCount(qint32 ptsCount) {
    if(m_core.ptsCount() == ptsCount) return;
    m_core.setPtsCount(ptsCount);
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::ptsCount() const {
    return m_core.ptsCount();
}

void UpdateObject::setQts(qint32 qts) {
    if(m_core.qts() == qts) return;
    m_core.setQts(qts);
    Q_EMIT qtsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::qts() const {
    return m_core.qts();
}

void UpdateObject::setQuery(const QString &query) {
    if(m_core.query() == query) return;
    m_core.setQuery(query);
    Q_EMIT queryChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::query() const {
    return m_core.query();
}

void UpdateObject::setQueryId(qint64 queryId) {
    if(m_core.queryId() == queryId) return;
    m_core.setQueryId(queryId);
    Q_EMIT queryIdChanged();
    Q_EMIT coreChanged();
}

qint64 UpdateObject::queryId() const {
    return m_core.queryId();
}

void UpdateObject::setRandomId(qint64 randomId) {
    if(m_core.randomId() == randomId) return;
    m_core.setRandomId(randomId);
    Q_EMIT randomIdChanged();
    Q_EMIT coreChanged();
}

qint64 UpdateObject::randomId() const {
    return m_core.randomId();
}

void UpdateObject::setRules(const QList<PrivacyRule> &rules) {
    if(m_core.rules() == rules) return;
    m_core.setRules(rules);
    Q_EMIT rulesChanged();
    Q_EMIT coreChanged();
}

QList<PrivacyRule> UpdateObject::rules() const {
    return m_core.rules();
}

void UpdateObject::setStatus(UserStatusObject* status) {
    if(m_status == status) return;
    if(m_status) delete m_status;
    m_status = status;
    if(m_status) {
        m_status->setParent(this);
        m_core.setStatus(m_status->core());
        connect(m_status.data(), &UserStatusObject::coreChanged, this, &UpdateObject::coreStatusChanged);
    }
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

UserStatusObject*  UpdateObject::status() const {
    return m_status;
}

void UpdateObject::setStickerset(MessagesStickerSetObject* stickerset) {
    if(m_stickerset == stickerset) return;
    if(m_stickerset) delete m_stickerset;
    m_stickerset = stickerset;
    if(m_stickerset) {
        m_stickerset->setParent(this);
        m_core.setStickerset(m_stickerset->core());
        connect(m_stickerset.data(), &MessagesStickerSetObject::coreChanged, this, &UpdateObject::coreStickersetChanged);
    }
    Q_EMIT stickersetChanged();
    Q_EMIT coreChanged();
}

MessagesStickerSetObject*  UpdateObject::stickerset() const {
    return m_stickerset;
}

void UpdateObject::setType(const QString &type) {
    if(m_core.type() == type) return;
    m_core.setType(type);
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::type() const {
    return m_core.type();
}

void UpdateObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::userId() const {
    return m_core.userId();
}

void UpdateObject::setUsername(const QString &username) {
    if(m_core.username() == username) return;
    m_core.setUsername(username);
    Q_EMIT usernameChanged();
    Q_EMIT coreChanged();
}

QString UpdateObject::username() const {
    return m_core.username();
}

void UpdateObject::setVersion(qint32 version) {
    if(m_core.version() == version) return;
    m_core.setVersion(version);
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::version() const {
    return m_core.version();
}

void UpdateObject::setViews(qint32 views) {
    if(m_core.views() == views) return;
    m_core.setViews(views);
    Q_EMIT viewsChanged();
    Q_EMIT coreChanged();
}

qint32 UpdateObject::views() const {
    return m_core.views();
}

void UpdateObject::setWebpage(WebPageObject* webpage) {
    if(m_webpage == webpage) return;
    if(m_webpage) delete m_webpage;
    m_webpage = webpage;
    if(m_webpage) {
        m_webpage->setParent(this);
        m_core.setWebpage(m_webpage->core());
        connect(m_webpage.data(), &WebPageObject::coreChanged, this, &UpdateObject::coreWebpageChanged);
    }
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
}

WebPageObject*  UpdateObject::webpage() const {
    return m_webpage;
}

UpdateObject &UpdateObject::operator =(const Update &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_action->setCore(b.action());
    m_chat->setCore(b.chat());
    m_foreignLink->setCore(b.foreignLink());
    m_group->setCore(b.group());
    m_key->setCore(b.key());
    m_media->setCore(b.media());
    m_messageEncrypted->setCore(b.messageEncrypted());
    m_message->setCore(b.message());
    m_myLink->setCore(b.myLink());
    m_notifySettings->setCore(b.notifySettings());
    m_participants->setCore(b.participants());
    m_peerNotify->setCore(b.peerNotify());
    m_peer->setCore(b.peer());
    m_photo->setCore(b.photo());
    m_status->setCore(b.status());
    m_stickerset->setCore(b.stickerset());
    m_webpage->setCore(b.webpage());

    Q_EMIT actionChanged();
    Q_EMIT authKeyIdChanged();
    Q_EMIT blockedChanged();
    Q_EMIT channelIdChanged();
    Q_EMIT chatChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcOptionsChanged();
    Q_EMIT deviceChanged();
    Q_EMIT enabledChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT foreignLinkChanged();
    Q_EMIT groupChanged();
    Q_EMIT idChanged();
    Q_EMIT inviterIdChanged();
    Q_EMIT isAdminChanged();
    Q_EMIT keyChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT locationChanged();
    Q_EMIT maxDateChanged();
    Q_EMIT maxIdChanged();
    Q_EMIT mediaChanged();
    Q_EMIT messageEncryptedChanged();
    Q_EMIT messageChanged();
    Q_EMIT messageStringChanged();
    Q_EMIT messagesChanged();
    Q_EMIT myLinkChanged();
    Q_EMIT notifySettingsChanged();
    Q_EMIT offsetChanged();
    Q_EMIT orderChanged();
    Q_EMIT participantsChanged();
    Q_EMIT peerNotifyChanged();
    Q_EMIT peerChanged();
    Q_EMIT phoneChanged();
    Q_EMIT photoChanged();
    Q_EMIT popupChanged();
    Q_EMIT previousChanged();
    Q_EMIT ptsChanged();
    Q_EMIT ptsCountChanged();
    Q_EMIT qtsChanged();
    Q_EMIT queryChanged();
    Q_EMIT queryIdChanged();
    Q_EMIT randomIdChanged();
    Q_EMIT rulesChanged();
    Q_EMIT statusChanged();
    Q_EMIT stickersetChanged();
    Q_EMIT typeChanged();
    Q_EMIT userIdChanged();
    Q_EMIT usernameChanged();
    Q_EMIT versionChanged();
    Q_EMIT viewsChanged();
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool UpdateObject::operator ==(const Update &b) const {
    return m_core == b;
}

void UpdateObject::setClassType(quint32 classType) {
    Update::UpdateType result;
    switch(classType) {
    case TypeUpdateNewMessage:
        result = Update::typeUpdateNewMessage;
        break;
    case TypeUpdateMessageID:
        result = Update::typeUpdateMessageID;
        break;
    case TypeUpdateDeleteMessages:
        result = Update::typeUpdateDeleteMessages;
        break;
    case TypeUpdateUserTyping:
        result = Update::typeUpdateUserTyping;
        break;
    case TypeUpdateChatUserTyping:
        result = Update::typeUpdateChatUserTyping;
        break;
    case TypeUpdateChatParticipants:
        result = Update::typeUpdateChatParticipants;
        break;
    case TypeUpdateUserStatus:
        result = Update::typeUpdateUserStatus;
        break;
    case TypeUpdateUserName:
        result = Update::typeUpdateUserName;
        break;
    case TypeUpdateUserPhoto:
        result = Update::typeUpdateUserPhoto;
        break;
    case TypeUpdateContactRegistered:
        result = Update::typeUpdateContactRegistered;
        break;
    case TypeUpdateContactLink:
        result = Update::typeUpdateContactLink;
        break;
    case TypeUpdateNewAuthorization:
        result = Update::typeUpdateNewAuthorization;
        break;
    case TypeUpdateNewEncryptedMessage:
        result = Update::typeUpdateNewEncryptedMessage;
        break;
    case TypeUpdateEncryptedChatTyping:
        result = Update::typeUpdateEncryptedChatTyping;
        break;
    case TypeUpdateEncryption:
        result = Update::typeUpdateEncryption;
        break;
    case TypeUpdateEncryptedMessagesRead:
        result = Update::typeUpdateEncryptedMessagesRead;
        break;
    case TypeUpdateChatParticipantAdd:
        result = Update::typeUpdateChatParticipantAdd;
        break;
    case TypeUpdateChatParticipantDelete:
        result = Update::typeUpdateChatParticipantDelete;
        break;
    case TypeUpdateDcOptions:
        result = Update::typeUpdateDcOptions;
        break;
    case TypeUpdateUserBlocked:
        result = Update::typeUpdateUserBlocked;
        break;
    case TypeUpdateNotifySettings:
        result = Update::typeUpdateNotifySettings;
        break;
    case TypeUpdateServiceNotification:
        result = Update::typeUpdateServiceNotification;
        break;
    case TypeUpdatePrivacy:
        result = Update::typeUpdatePrivacy;
        break;
    case TypeUpdateUserPhone:
        result = Update::typeUpdateUserPhone;
        break;
    case TypeUpdateReadHistoryInbox:
        result = Update::typeUpdateReadHistoryInbox;
        break;
    case TypeUpdateReadHistoryOutbox:
        result = Update::typeUpdateReadHistoryOutbox;
        break;
    case TypeUpdateWebPage:
        result = Update::typeUpdateWebPage;
        break;
    case TypeUpdateReadMessagesContents:
        result = Update::typeUpdateReadMessagesContents;
        break;
    case TypeUpdateChannelTooLong:
        result = Update::typeUpdateChannelTooLong;
        break;
    case TypeUpdateChannel:
        result = Update::typeUpdateChannel;
        break;
    case TypeUpdateChannelGroup:
        result = Update::typeUpdateChannelGroup;
        break;
    case TypeUpdateNewChannelMessage:
        result = Update::typeUpdateNewChannelMessage;
        break;
    case TypeUpdateReadChannelInbox:
        result = Update::typeUpdateReadChannelInbox;
        break;
    case TypeUpdateDeleteChannelMessages:
        result = Update::typeUpdateDeleteChannelMessages;
        break;
    case TypeUpdateChannelMessageViews:
        result = Update::typeUpdateChannelMessageViews;
        break;
    case TypeUpdateChatAdmins:
        result = Update::typeUpdateChatAdmins;
        break;
    case TypeUpdateChatParticipantAdmin:
        result = Update::typeUpdateChatParticipantAdmin;
        break;
    case TypeUpdateNewStickerSet:
        result = Update::typeUpdateNewStickerSet;
        break;
    case TypeUpdateStickerSetsOrder:
        result = Update::typeUpdateStickerSetsOrder;
        break;
    case TypeUpdateStickerSets:
        result = Update::typeUpdateStickerSets;
        break;
    case TypeUpdateSavedGifs:
        result = Update::typeUpdateSavedGifs;
        break;
    case TypeUpdateBotInlineQuery:
        result = Update::typeUpdateBotInlineQuery;
        break;
    default:
        result = Update::typeUpdateNewMessage;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 UpdateObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Update::typeUpdateNewMessage:
        result = TypeUpdateNewMessage;
        break;
    case Update::typeUpdateMessageID:
        result = TypeUpdateMessageID;
        break;
    case Update::typeUpdateDeleteMessages:
        result = TypeUpdateDeleteMessages;
        break;
    case Update::typeUpdateUserTyping:
        result = TypeUpdateUserTyping;
        break;
    case Update::typeUpdateChatUserTyping:
        result = TypeUpdateChatUserTyping;
        break;
    case Update::typeUpdateChatParticipants:
        result = TypeUpdateChatParticipants;
        break;
    case Update::typeUpdateUserStatus:
        result = TypeUpdateUserStatus;
        break;
    case Update::typeUpdateUserName:
        result = TypeUpdateUserName;
        break;
    case Update::typeUpdateUserPhoto:
        result = TypeUpdateUserPhoto;
        break;
    case Update::typeUpdateContactRegistered:
        result = TypeUpdateContactRegistered;
        break;
    case Update::typeUpdateContactLink:
        result = TypeUpdateContactLink;
        break;
    case Update::typeUpdateNewAuthorization:
        result = TypeUpdateNewAuthorization;
        break;
    case Update::typeUpdateNewEncryptedMessage:
        result = TypeUpdateNewEncryptedMessage;
        break;
    case Update::typeUpdateEncryptedChatTyping:
        result = TypeUpdateEncryptedChatTyping;
        break;
    case Update::typeUpdateEncryption:
        result = TypeUpdateEncryption;
        break;
    case Update::typeUpdateEncryptedMessagesRead:
        result = TypeUpdateEncryptedMessagesRead;
        break;
    case Update::typeUpdateChatParticipantAdd:
        result = TypeUpdateChatParticipantAdd;
        break;
    case Update::typeUpdateChatParticipantDelete:
        result = TypeUpdateChatParticipantDelete;
        break;
    case Update::typeUpdateDcOptions:
        result = TypeUpdateDcOptions;
        break;
    case Update::typeUpdateUserBlocked:
        result = TypeUpdateUserBlocked;
        break;
    case Update::typeUpdateNotifySettings:
        result = TypeUpdateNotifySettings;
        break;
    case Update::typeUpdateServiceNotification:
        result = TypeUpdateServiceNotification;
        break;
    case Update::typeUpdatePrivacy:
        result = TypeUpdatePrivacy;
        break;
    case Update::typeUpdateUserPhone:
        result = TypeUpdateUserPhone;
        break;
    case Update::typeUpdateReadHistoryInbox:
        result = TypeUpdateReadHistoryInbox;
        break;
    case Update::typeUpdateReadHistoryOutbox:
        result = TypeUpdateReadHistoryOutbox;
        break;
    case Update::typeUpdateWebPage:
        result = TypeUpdateWebPage;
        break;
    case Update::typeUpdateReadMessagesContents:
        result = TypeUpdateReadMessagesContents;
        break;
    case Update::typeUpdateChannelTooLong:
        result = TypeUpdateChannelTooLong;
        break;
    case Update::typeUpdateChannel:
        result = TypeUpdateChannel;
        break;
    case Update::typeUpdateChannelGroup:
        result = TypeUpdateChannelGroup;
        break;
    case Update::typeUpdateNewChannelMessage:
        result = TypeUpdateNewChannelMessage;
        break;
    case Update::typeUpdateReadChannelInbox:
        result = TypeUpdateReadChannelInbox;
        break;
    case Update::typeUpdateDeleteChannelMessages:
        result = TypeUpdateDeleteChannelMessages;
        break;
    case Update::typeUpdateChannelMessageViews:
        result = TypeUpdateChannelMessageViews;
        break;
    case Update::typeUpdateChatAdmins:
        result = TypeUpdateChatAdmins;
        break;
    case Update::typeUpdateChatParticipantAdmin:
        result = TypeUpdateChatParticipantAdmin;
        break;
    case Update::typeUpdateNewStickerSet:
        result = TypeUpdateNewStickerSet;
        break;
    case Update::typeUpdateStickerSetsOrder:
        result = TypeUpdateStickerSetsOrder;
        break;
    case Update::typeUpdateStickerSets:
        result = TypeUpdateStickerSets;
        break;
    case Update::typeUpdateSavedGifs:
        result = TypeUpdateSavedGifs;
        break;
    case Update::typeUpdateBotInlineQuery:
        result = TypeUpdateBotInlineQuery;
        break;
    default:
        result = TypeUpdateNewMessage;
        break;
    }

    return result;
}

void UpdateObject::setCore(const Update &core) {
    operator =(core);
}

Update UpdateObject::core() const {
    return m_core;
}

void UpdateObject::coreActionChanged() {
    if(m_core.action() == m_action->core()) return;
    m_core.setAction(m_action->core());
    Q_EMIT actionChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreChatChanged() {
    if(m_core.chat() == m_chat->core()) return;
    m_core.setChat(m_chat->core());
    Q_EMIT chatChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreForeignLinkChanged() {
    if(m_core.foreignLink() == m_foreignLink->core()) return;
    m_core.setForeignLink(m_foreignLink->core());
    Q_EMIT foreignLinkChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreGroupChanged() {
    if(m_core.group() == m_group->core()) return;
    m_core.setGroup(m_group->core());
    Q_EMIT groupChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreKeyChanged() {
    if(m_core.key() == m_key->core()) return;
    m_core.setKey(m_key->core());
    Q_EMIT keyChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMediaChanged() {
    if(m_core.media() == m_media->core()) return;
    m_core.setMedia(m_media->core());
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMessageEncryptedChanged() {
    if(m_core.messageEncrypted() == m_messageEncrypted->core()) return;
    m_core.setMessageEncrypted(m_messageEncrypted->core());
    Q_EMIT messageEncryptedChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMessageChanged() {
    if(m_core.message() == m_message->core()) return;
    m_core.setMessage(m_message->core());
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreMyLinkChanged() {
    if(m_core.myLink() == m_myLink->core()) return;
    m_core.setMyLink(m_myLink->core());
    Q_EMIT myLinkChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreNotifySettingsChanged() {
    if(m_core.notifySettings() == m_notifySettings->core()) return;
    m_core.setNotifySettings(m_notifySettings->core());
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreParticipantsChanged() {
    if(m_core.participants() == m_participants->core()) return;
    m_core.setParticipants(m_participants->core());
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::corePeerNotifyChanged() {
    if(m_core.peerNotify() == m_peerNotify->core()) return;
    m_core.setPeerNotify(m_peerNotify->core());
    Q_EMIT peerNotifyChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::corePhotoChanged() {
    if(m_core.photo() == m_photo->core()) return;
    m_core.setPhoto(m_photo->core());
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreStatusChanged() {
    if(m_core.status() == m_status->core()) return;
    m_core.setStatus(m_status->core());
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreStickersetChanged() {
    if(m_core.stickerset() == m_stickerset->core()) return;
    m_core.setStickerset(m_stickerset->core());
    Q_EMIT stickersetChanged();
    Q_EMIT coreChanged();
}

void UpdateObject::coreWebpageChanged() {
    if(m_core.webpage() == m_webpage->core()) return;
    m_core.setWebpage(m_webpage->core());
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
}

