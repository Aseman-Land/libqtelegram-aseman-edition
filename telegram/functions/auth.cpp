// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "auth.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

using namespace Tg;

Functions::Auth::Auth() {
}

Functions::Auth::~Auth() {
}

bool Functions::Auth::checkPhone(OutboundPkt *out, const QString &phoneNumber) {
    out->appendInt(fncAuthCheckPhone);
    out->appendQString(phoneNumber);
    return true;
}

AuthCheckedPhone Functions::Auth::checkPhoneResult(InboundPkt *in) {
    AuthCheckedPhone result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::sendCode(OutboundPkt *out, bool allowFlashcall, const QString &phoneNumber, bool currentNumber, qint32 apiId, const QString &apiHash, const QString &langCode) {
    out->appendInt(fncAuthSendCode);
    
    qint32 flags = 0;
    if(allowFlashcall != 0) flags = (1<<0 | flags);
    if(currentNumber != 0) flags = (1<<0 | flags);
    
    out->appendInt(flags);
    out->appendQString(phoneNumber);
    if(flags & 1<<0) out->appendBool(currentNumber);
    out->appendInt(apiId);
    out->appendQString(apiHash);
    out->appendQString(langCode);
    return true;
}

AuthSentCode Functions::Auth::sendCodeResult(InboundPkt *in) {
    AuthSentCode result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::signUp(OutboundPkt *out, const QString &phoneNumber, const QString &phoneCodeHash, const QString &phoneCode, const QString &firstName, const QString &lastName) {
    out->appendInt(fncAuthSignUp);
    out->appendQString(phoneNumber);
    out->appendQString(phoneCodeHash);
    out->appendQString(phoneCode);
    out->appendQString(firstName);
    out->appendQString(lastName);
    return true;
}

AuthAuthorization Functions::Auth::signUpResult(InboundPkt *in) {
    AuthAuthorization result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::signIn(OutboundPkt *out, const QString &phoneNumber, const QString &phoneCodeHash, const QString &phoneCode) {
    out->appendInt(fncAuthSignIn);
    out->appendQString(phoneNumber);
    out->appendQString(phoneCodeHash);
    out->appendQString(phoneCode);
    return true;
}

AuthAuthorization Functions::Auth::signInResult(InboundPkt *in) {
    AuthAuthorization result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::logOut(OutboundPkt *out) {
    out->appendInt(fncAuthLogOut);
    return true;
}

bool Functions::Auth::logOutResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Auth::resetAuthorizations(OutboundPkt *out) {
    out->appendInt(fncAuthResetAuthorizations);
    return true;
}

bool Functions::Auth::resetAuthorizationsResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Auth::sendInvites(OutboundPkt *out, const QList<QString> &phoneNumbers, const QString &message) {
    out->appendInt(fncAuthSendInvites);
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(phoneNumbers.count());
    for (qint32 i = 0; i < phoneNumbers.count(); i++) {
        out->appendQString(phoneNumbers[i]);
    }
    out->appendQString(message);
    return true;
}

bool Functions::Auth::sendInvitesResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Auth::exportAuthorization(OutboundPkt *out, qint32 dcId) {
    out->appendInt(fncAuthExportAuthorization);
    out->appendInt(dcId);
    return true;
}

AuthExportedAuthorization Functions::Auth::exportAuthorizationResult(InboundPkt *in) {
    AuthExportedAuthorization result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::importAuthorization(OutboundPkt *out, qint32 id, const QByteArray &bytes) {
    out->appendInt(fncAuthImportAuthorization);
    out->appendInt(id);
    out->appendBytes(bytes);
    return true;
}

AuthAuthorization Functions::Auth::importAuthorizationResult(InboundPkt *in) {
    AuthAuthorization result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::bindTempAuthKey(OutboundPkt *out, qint64 permAuthKeyId, qint64 nonce, qint32 expiresAt, const QByteArray &encryptedMessage) {
    out->appendInt(fncAuthBindTempAuthKey);
    out->appendLong(permAuthKeyId);
    out->appendLong(nonce);
    out->appendInt(expiresAt);
    out->appendBytes(encryptedMessage);
    return true;
}

bool Functions::Auth::bindTempAuthKeyResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

bool Functions::Auth::importBotAuthorization(OutboundPkt *out, qint32 flags, qint32 apiId, const QString &apiHash, const QString &botAuthToken) {
    out->appendInt(fncAuthImportBotAuthorization);
    out->appendInt(flags);
    out->appendInt(apiId);
    out->appendQString(apiHash);
    out->appendQString(botAuthToken);
    return true;
}

AuthAuthorization Functions::Auth::importBotAuthorizationResult(InboundPkt *in) {
    AuthAuthorization result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::checkPassword(OutboundPkt *out, const QByteArray &passwordHash) {
    out->appendInt(fncAuthCheckPassword);
    out->appendBytes(passwordHash);
    return true;
}

AuthAuthorization Functions::Auth::checkPasswordResult(InboundPkt *in) {
    AuthAuthorization result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::requestPasswordRecovery(OutboundPkt *out) {
    out->appendInt(fncAuthRequestPasswordRecovery);
    return true;
}

AuthPasswordRecovery Functions::Auth::requestPasswordRecoveryResult(InboundPkt *in) {
    AuthPasswordRecovery result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::recoverPassword(OutboundPkt *out, const QString &code) {
    out->appendInt(fncAuthRecoverPassword);
    out->appendQString(code);
    return true;
}

AuthAuthorization Functions::Auth::recoverPasswordResult(InboundPkt *in) {
    AuthAuthorization result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::resendCode(OutboundPkt *out, const QString &phoneNumber, const QString &phoneCodeHash) {
    out->appendInt(fncAuthResendCode);
    out->appendQString(phoneNumber);
    out->appendQString(phoneCodeHash);
    return true;
}

AuthSentCode Functions::Auth::resendCodeResult(InboundPkt *in) {
    AuthSentCode result;
    if(!result.fetch(in)) return result;
    return result;
}

bool Functions::Auth::cancelCode(OutboundPkt *out, const QString &phoneNumber, const QString &phoneCodeHash) {
    out->appendInt(fncAuthCancelCode);
    out->appendQString(phoneNumber);
    out->appendQString(phoneCodeHash);
    return true;
}

bool Functions::Auth::cancelCodeResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

