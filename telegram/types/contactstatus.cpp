// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactstatus.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ContactStatus::ContactStatus(ContactStatusClassType classType, InboundPkt *in) :
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ContactStatus::ContactStatus(InboundPkt *in) :
    m_userId(0),
    m_classType(typeContactStatus)
{
    fetch(in);
}

ContactStatus::ContactStatus(const Null &null) :
    TelegramTypeObject(null),
    m_userId(0),
    m_classType(typeContactStatus)
{
}

ContactStatus::~ContactStatus() {
}

void ContactStatus::setStatus(const UserStatus &status) {
    m_status = status;
}

UserStatus ContactStatus::status() const {
    return m_status;
}

void ContactStatus::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 ContactStatus::userId() const {
    return m_userId;
}

bool ContactStatus::operator ==(const ContactStatus &b) const {
    return m_classType == b.m_classType &&
           m_status == b.m_status &&
           m_userId == b.m_userId;
}

void ContactStatus::setClassType(ContactStatus::ContactStatusClassType classType) {
    m_classType = classType;
}

ContactStatus::ContactStatusClassType ContactStatus::classType() const {
    return m_classType;
}

bool ContactStatus::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeContactStatus: {
        m_userId = in->fetchInt();
        m_status.fetch(in);
        m_classType = static_cast<ContactStatusClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ContactStatus::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeContactStatus: {
        out->appendInt(m_userId);
        m_status.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray ContactStatus::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ContactStatus &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ContactStatus::typeContactStatus:
        stream << item.userId();
        stream << item.status();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ContactStatus &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ContactStatus::ContactStatusClassType>(type));
    switch(type) {
    case ContactStatus::typeContactStatus: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        UserStatus m_status;
        stream >> m_status;
        item.setStatus(m_status);
    }
        break;
    }
    return stream;
}

