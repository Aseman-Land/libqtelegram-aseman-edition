// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "peersettingsobject.h"

PeerSettingsObject::PeerSettingsObject(const PeerSettings &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

PeerSettingsObject::PeerSettingsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

PeerSettingsObject::~PeerSettingsObject() {
}

void PeerSettingsObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 PeerSettingsObject::flags() const {
    return m_core.flags();
}

void PeerSettingsObject::setReportSpam(bool reportSpam) {
    if(m_core.reportSpam() == reportSpam) return;
    m_core.setReportSpam(reportSpam);
    Q_EMIT reportSpamChanged();
    Q_EMIT coreChanged();
}

bool PeerSettingsObject::reportSpam() const {
    return m_core.reportSpam();
}

PeerSettingsObject &PeerSettingsObject::operator =(const PeerSettings &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT flagsChanged();
    Q_EMIT reportSpamChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool PeerSettingsObject::operator ==(const PeerSettings &b) const {
    return m_core == b;
}

void PeerSettingsObject::setClassType(quint32 classType) {
    PeerSettings::PeerSettingsClassType result;
    switch(classType) {
    case TypePeerSettings:
        result = PeerSettings::typePeerSettings;
        break;
    default:
        result = PeerSettings::typePeerSettings;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 PeerSettingsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PeerSettings::typePeerSettings:
        result = TypePeerSettings;
        break;
    default:
        result = TypePeerSettings;
        break;
    }

    return result;
}

void PeerSettingsObject::setCore(const PeerSettings &core) {
    operator =(core);
}

PeerSettings PeerSettingsObject::core() const {
    return m_core;
}

