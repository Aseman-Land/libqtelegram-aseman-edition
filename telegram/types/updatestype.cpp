// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "updatestype.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

UpdatesType::UpdatesType(UpdatesTypeType classType, InboundPkt *in) :
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_viaBotId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

UpdatesType::UpdatesType(InboundPkt *in) :
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_viaBotId(0),
    m_classType(typeUpdatesTooLong)
{
    fetch(in);
}

UpdatesType::UpdatesType(const Null &null) :
    TelegramTypeObject(null),
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_viaBotId(0),
    m_classType(typeUpdatesTooLong)
{
}

UpdatesType::~UpdatesType() {
}

void UpdatesType::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

qint32 UpdatesType::chatId() const {
    return m_chatId;
}

void UpdatesType::setChats(const QList<Chat> &chats) {
    m_chats = chats;
}

QList<Chat> UpdatesType::chats() const {
    return m_chats;
}

void UpdatesType::setDate(qint32 date) {
    m_date = date;
}

qint32 UpdatesType::date() const {
    return m_date;
}

void UpdatesType::setEntities(const QList<MessageEntity> &entities) {
    m_entities = entities;
}

QList<MessageEntity> UpdatesType::entities() const {
    return m_entities;
}

void UpdatesType::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 UpdatesType::flags() const {
    return m_flags;
}

void UpdatesType::setFromId(qint32 fromId) {
    m_fromId = fromId;
}

qint32 UpdatesType::fromId() const {
    return m_fromId;
}

void UpdatesType::setFwdFrom(const MessageFwdHeader &fwdFrom) {
    m_fwdFrom = fwdFrom;
}

MessageFwdHeader UpdatesType::fwdFrom() const {
    return m_fwdFrom;
}

void UpdatesType::setId(qint32 id) {
    m_id = id;
}

qint32 UpdatesType::id() const {
    return m_id;
}

void UpdatesType::setMedia(const MessageMedia &media) {
    m_media = media;
}

MessageMedia UpdatesType::media() const {
    return m_media;
}

void UpdatesType::setMediaUnread(bool mediaUnread) {
    if(mediaUnread) m_flags = (m_flags | (1<<5));
    else m_flags = (m_flags & ~(1<<5));
}

bool UpdatesType::mediaUnread() const {
    return (m_flags & 1<<5);
}

void UpdatesType::setMentioned(bool mentioned) {
    if(mentioned) m_flags = (m_flags | (1<<4));
    else m_flags = (m_flags & ~(1<<4));
}

bool UpdatesType::mentioned() const {
    return (m_flags & 1<<4);
}

void UpdatesType::setMessage(const QString &message) {
    m_message = message;
}

QString UpdatesType::message() const {
    return m_message;
}

void UpdatesType::setOut(bool out) {
    if(out) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool UpdatesType::out() const {
    return (m_flags & 1<<1);
}

void UpdatesType::setPts(qint32 pts) {
    m_pts = pts;
}

qint32 UpdatesType::pts() const {
    return m_pts;
}

void UpdatesType::setPtsCount(qint32 ptsCount) {
    m_ptsCount = ptsCount;
}

qint32 UpdatesType::ptsCount() const {
    return m_ptsCount;
}

void UpdatesType::setReplyToMsgId(qint32 replyToMsgId) {
    m_replyToMsgId = replyToMsgId;
}

qint32 UpdatesType::replyToMsgId() const {
    return m_replyToMsgId;
}

void UpdatesType::setSeq(qint32 seq) {
    m_seq = seq;
}

qint32 UpdatesType::seq() const {
    return m_seq;
}

void UpdatesType::setSeqStart(qint32 seqStart) {
    m_seqStart = seqStart;
}

qint32 UpdatesType::seqStart() const {
    return m_seqStart;
}

void UpdatesType::setSilent(bool silent) {
    if(silent) m_flags = (m_flags | (1<<13));
    else m_flags = (m_flags & ~(1<<13));
}

bool UpdatesType::silent() const {
    return (m_flags & 1<<13);
}

void UpdatesType::setUnread(bool unread) {
    if(unread) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool UpdatesType::unread() const {
    return (m_flags & 1<<0);
}

void UpdatesType::setUpdate(const Update &update) {
    m_update = update;
}

Update UpdatesType::update() const {
    return m_update;
}

void UpdatesType::setUpdates(const QList<Update> &updates) {
    m_updates = updates;
}

QList<Update> UpdatesType::updates() const {
    return m_updates;
}

void UpdatesType::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 UpdatesType::userId() const {
    return m_userId;
}

void UpdatesType::setUsers(const QList<User> &users) {
    m_users = users;
}

QList<User> UpdatesType::users() const {
    return m_users;
}

void UpdatesType::setViaBotId(qint32 viaBotId) {
    m_viaBotId = viaBotId;
}

qint32 UpdatesType::viaBotId() const {
    return m_viaBotId;
}

bool UpdatesType::operator ==(const UpdatesType &b) const {
    return m_classType == b.m_classType &&
           m_chatId == b.m_chatId &&
           m_chats == b.m_chats &&
           m_date == b.m_date &&
           m_entities == b.m_entities &&
           m_flags == b.m_flags &&
           m_fromId == b.m_fromId &&
           m_fwdFrom == b.m_fwdFrom &&
           m_id == b.m_id &&
           m_media == b.m_media &&
           m_message == b.m_message &&
           m_pts == b.m_pts &&
           m_ptsCount == b.m_ptsCount &&
           m_replyToMsgId == b.m_replyToMsgId &&
           m_seq == b.m_seq &&
           m_seqStart == b.m_seqStart &&
           m_update == b.m_update &&
           m_updates == b.m_updates &&
           m_userId == b.m_userId &&
           m_users == b.m_users &&
           m_viaBotId == b.m_viaBotId;
}

void UpdatesType::setClassType(UpdatesType::UpdatesTypeType classType) {
    m_classType = classType;
}

UpdatesType::UpdatesTypeType UpdatesType::classType() const {
    return m_classType;
}

bool UpdatesType::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUpdatesTooLong: {
        m_classType = static_cast<UpdatesTypeType>(x);
        return true;
    }
        break;
    
    case typeUpdateShortMessage: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_userId = in->fetchInt();
        m_message = in->fetchQString();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_date = in->fetchInt();
        if(m_flags & 1<<2) {
            m_fwdFrom.fetch(in);
        }
        if(m_flags & 1<<11) {
            m_viaBotId = in->fetchInt();
        }
        if(m_flags & 1<<3) {
            m_replyToMsgId = in->fetchInt();
        }
        if(m_flags & 1<<7) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<7) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        m_classType = static_cast<UpdatesTypeType>(x);
        return true;
    }
        break;
    
    case typeUpdateShortChatMessage: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_fromId = in->fetchInt();
        m_chatId = in->fetchInt();
        m_message = in->fetchQString();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_date = in->fetchInt();
        if(m_flags & 1<<2) {
            m_fwdFrom.fetch(in);
        }
        if(m_flags & 1<<11) {
            m_viaBotId = in->fetchInt();
        }
        if(m_flags & 1<<3) {
            m_replyToMsgId = in->fetchInt();
        }
        if(m_flags & 1<<7) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<7) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        m_classType = static_cast<UpdatesTypeType>(x);
        return true;
    }
        break;
    
    case typeUpdateShort: {
        m_update.fetch(in);
        m_date = in->fetchInt();
        m_classType = static_cast<UpdatesTypeType>(x);
        return true;
    }
        break;
    
    case typeUpdatesCombined: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_updates_length = in->fetchInt();
        m_updates.clear();
        for (qint32 i = 0; i < m_updates_length; i++) {
            Update type;
            type.fetch(in);
            m_updates.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        m_date = in->fetchInt();
        m_seqStart = in->fetchInt();
        m_seq = in->fetchInt();
        m_classType = static_cast<UpdatesTypeType>(x);
        return true;
    }
        break;
    
    case typeUpdates: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_updates_length = in->fetchInt();
        m_updates.clear();
        for (qint32 i = 0; i < m_updates_length; i++) {
            Update type;
            type.fetch(in);
            m_updates.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        m_date = in->fetchInt();
        m_seq = in->fetchInt();
        m_classType = static_cast<UpdatesTypeType>(x);
        return true;
    }
        break;
    
    case typeUpdateShortSentMessage: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_date = in->fetchInt();
        if(m_flags & 1<<9) {
            m_media.fetch(in);
        }
        if(m_flags & 1<<7) {
            if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
            qint32 m_entities_length = in->fetchInt();
            m_entities.clear();
            for (qint32 i = 0; i < m_entities_length; i++) {
                MessageEntity type;
                if(m_flags & 1<<7) {
                type.fetch(in);
            }
                m_entities.append(type);
            }
        }
        m_classType = static_cast<UpdatesTypeType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool UpdatesType::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUpdatesTooLong: {
        return true;
    }
        break;
    
    case typeUpdateShortMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendInt(m_userId);
        out->appendQString(m_message);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_date);
        m_fwdFrom.push(out);
        out->appendInt(m_viaBotId);
        out->appendInt(m_replyToMsgId);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_entities.count());
        for (qint32 i = 0; i < m_entities.count(); i++) {
            m_entities[i].push(out);
        }
        return true;
    }
        break;
    
    case typeUpdateShortChatMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendInt(m_fromId);
        out->appendInt(m_chatId);
        out->appendQString(m_message);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_date);
        m_fwdFrom.push(out);
        out->appendInt(m_viaBotId);
        out->appendInt(m_replyToMsgId);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_entities.count());
        for (qint32 i = 0; i < m_entities.count(); i++) {
            m_entities[i].push(out);
        }
        return true;
    }
        break;
    
    case typeUpdateShort: {
        m_update.push(out);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeUpdatesCombined: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_updates.count());
        for (qint32 i = 0; i < m_updates.count(); i++) {
            m_updates[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(m_date);
        out->appendInt(m_seqStart);
        out->appendInt(m_seq);
        return true;
    }
        break;
    
    case typeUpdates: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_updates.count());
        for (qint32 i = 0; i < m_updates.count(); i++) {
            m_updates[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(m_date);
        out->appendInt(m_seq);
        return true;
    }
        break;
    
    case typeUpdateShortSentMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_date);
        m_media.push(out);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_entities.count());
        for (qint32 i = 0; i < m_entities.count(); i++) {
            m_entities[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray UpdatesType::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const UpdatesType &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UpdatesType::typeUpdatesTooLong:
        
        break;
    case UpdatesType::typeUpdateShortMessage:
        stream << item.flags();
        stream << item.id();
        stream << item.userId();
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.date();
        stream << item.fwdFrom();
        stream << item.viaBotId();
        stream << item.replyToMsgId();
        stream << item.entities();
        break;
    case UpdatesType::typeUpdateShortChatMessage:
        stream << item.flags();
        stream << item.id();
        stream << item.fromId();
        stream << item.chatId();
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.date();
        stream << item.fwdFrom();
        stream << item.viaBotId();
        stream << item.replyToMsgId();
        stream << item.entities();
        break;
    case UpdatesType::typeUpdateShort:
        stream << item.update();
        stream << item.date();
        break;
    case UpdatesType::typeUpdatesCombined:
        stream << item.updates();
        stream << item.users();
        stream << item.chats();
        stream << item.date();
        stream << item.seqStart();
        stream << item.seq();
        break;
    case UpdatesType::typeUpdates:
        stream << item.updates();
        stream << item.users();
        stream << item.chats();
        stream << item.date();
        stream << item.seq();
        break;
    case UpdatesType::typeUpdateShortSentMessage:
        stream << item.flags();
        stream << item.id();
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.date();
        stream << item.media();
        stream << item.entities();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, UpdatesType &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UpdatesType::UpdatesTypeType>(type));
    switch(type) {
    case UpdatesType::typeUpdatesTooLong: {
        
    }
        break;
    case UpdatesType::typeUpdateShortMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        MessageFwdHeader m_fwd_from;
        stream >> m_fwd_from;
        item.setFwdFrom(m_fwd_from);
        qint32 m_via_bot_id;
        stream >> m_via_bot_id;
        item.setViaBotId(m_via_bot_id);
        qint32 m_reply_to_msg_id;
        stream >> m_reply_to_msg_id;
        item.setReplyToMsgId(m_reply_to_msg_id);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
    }
        break;
    case UpdatesType::typeUpdateShortChatMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_from_id;
        stream >> m_from_id;
        item.setFromId(m_from_id);
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        MessageFwdHeader m_fwd_from;
        stream >> m_fwd_from;
        item.setFwdFrom(m_fwd_from);
        qint32 m_via_bot_id;
        stream >> m_via_bot_id;
        item.setViaBotId(m_via_bot_id);
        qint32 m_reply_to_msg_id;
        stream >> m_reply_to_msg_id;
        item.setReplyToMsgId(m_reply_to_msg_id);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
    }
        break;
    case UpdatesType::typeUpdateShort: {
        Update m_update;
        stream >> m_update;
        item.setUpdate(m_update);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case UpdatesType::typeUpdatesCombined: {
        QList<Update> m_updates;
        stream >> m_updates;
        item.setUpdates(m_updates);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_seq_start;
        stream >> m_seq_start;
        item.setSeqStart(m_seq_start);
        qint32 m_seq;
        stream >> m_seq;
        item.setSeq(m_seq);
    }
        break;
    case UpdatesType::typeUpdates: {
        QList<Update> m_updates;
        stream >> m_updates;
        item.setUpdates(m_updates);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_seq;
        stream >> m_seq;
        item.setSeq(m_seq);
    }
        break;
    case UpdatesType::typeUpdateShortSentMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        MessageMedia m_media;
        stream >> m_media;
        item.setMedia(m_media);
        QList<MessageEntity> m_entities;
        stream >> m_entities;
        item.setEntities(m_entities);
    }
        break;
    }
    return stream;
}

