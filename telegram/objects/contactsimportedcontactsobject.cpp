// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactsimportedcontactsobject.h"

ContactsImportedContactsObject::ContactsImportedContactsObject(const ContactsImportedContacts &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ContactsImportedContactsObject::ContactsImportedContactsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ContactsImportedContactsObject::~ContactsImportedContactsObject() {
}

void ContactsImportedContactsObject::setImported(const QList<ImportedContact> &imported) {
    if(m_core.imported() == imported) return;
    m_core.setImported(imported);
    Q_EMIT importedChanged();
    Q_EMIT coreChanged();
}

QList<ImportedContact> ContactsImportedContactsObject::imported() const {
    return m_core.imported();
}

void ContactsImportedContactsObject::setRetryContacts(const QList<qint64> &retryContacts) {
    if(m_core.retryContacts() == retryContacts) return;
    m_core.setRetryContacts(retryContacts);
    Q_EMIT retryContactsChanged();
    Q_EMIT coreChanged();
}

QList<qint64> ContactsImportedContactsObject::retryContacts() const {
    return m_core.retryContacts();
}

void ContactsImportedContactsObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> ContactsImportedContactsObject::users() const {
    return m_core.users();
}

ContactsImportedContactsObject &ContactsImportedContactsObject::operator =(const ContactsImportedContacts &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT importedChanged();
    Q_EMIT retryContactsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ContactsImportedContactsObject::operator ==(const ContactsImportedContacts &b) const {
    return m_core == b;
}

void ContactsImportedContactsObject::setClassType(quint32 classType) {
    ContactsImportedContacts::ContactsImportedContactsType result;
    switch(classType) {
    case TypeContactsImportedContacts:
        result = ContactsImportedContacts::typeContactsImportedContacts;
        break;
    default:
        result = ContactsImportedContacts::typeContactsImportedContacts;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactsImportedContactsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsImportedContacts::typeContactsImportedContacts:
        result = TypeContactsImportedContacts;
        break;
    default:
        result = TypeContactsImportedContacts;
        break;
    }

    return result;
}

void ContactsImportedContactsObject::setCore(const ContactsImportedContacts &core) {
    operator =(core);
}

ContactsImportedContacts ContactsImportedContactsObject::core() const {
    return m_core;
}

