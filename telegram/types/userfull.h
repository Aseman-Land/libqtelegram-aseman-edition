// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_USERFULL
#define LQTG_TYPE_USERFULL

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include <QString>
#include "botinfo.h"
#include <QtGlobal>
#include "contactslink.h"
#include "peernotifysettings.h"
#include "photo.h"
#include "user.h"

class LIBQTELEGRAMSHARED_EXPORT UserFull : public TelegramTypeObject
{
public:
    enum UserFullClassType {
        typeUserFull = 0x5932fc03
    };

    UserFull(UserFullClassType classType = typeUserFull, InboundPkt *in = 0);
    UserFull(InboundPkt *in);
    UserFull(const Null&);
    virtual ~UserFull();

    void setAbout(const QString &about);
    QString about() const;

    void setBlocked(bool blocked);
    bool blocked() const;

    void setBotInfo(const BotInfo &botInfo);
    BotInfo botInfo() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setLink(const ContactsLink &link);
    ContactsLink link() const;

    void setNotifySettings(const PeerNotifySettings &notifySettings);
    PeerNotifySettings notifySettings() const;

    void setProfilePhoto(const Photo &profilePhoto);
    Photo profilePhoto() const;

    void setUser(const User &user);
    User user() const;

    void setClassType(UserFullClassType classType);
    UserFullClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static UserFull fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const UserFull &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_about;
    BotInfo m_botInfo;
    qint32 m_flags;
    ContactsLink m_link;
    PeerNotifySettings m_notifySettings;
    Photo m_profilePhoto;
    User m_user;
    UserFullClassType m_classType;
};

Q_DECLARE_METATYPE(UserFull)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const UserFull &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, UserFull &item);

#endif // LQTG_TYPE_USERFULL
