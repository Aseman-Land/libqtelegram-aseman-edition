// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactscontactsobject.h"

ContactsContactsObject::ContactsContactsObject(const ContactsContacts &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ContactsContactsObject::ContactsContactsObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ContactsContactsObject::~ContactsContactsObject() {
}

void ContactsContactsObject::setContacts(const QList<Contact> &contacts) {
    if(m_core.contacts() == contacts) return;
    m_core.setContacts(contacts);
    Q_EMIT contactsChanged();
    Q_EMIT coreChanged();
}

QList<Contact> ContactsContactsObject::contacts() const {
    return m_core.contacts();
}

void ContactsContactsObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

QList<User> ContactsContactsObject::users() const {
    return m_core.users();
}

ContactsContactsObject &ContactsContactsObject::operator =(const ContactsContacts &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT contactsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ContactsContactsObject::operator ==(const ContactsContacts &b) const {
    return m_core == b;
}

void ContactsContactsObject::setClassType(quint32 classType) {
    ContactsContacts::ContactsContactsType result;
    switch(classType) {
    case TypeContactsContactsNotModified:
        result = ContactsContacts::typeContactsContactsNotModified;
        break;
    case TypeContactsContacts:
        result = ContactsContacts::typeContactsContacts;
        break;
    default:
        result = ContactsContacts::typeContactsContactsNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactsContactsObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsContacts::typeContactsContactsNotModified:
        result = TypeContactsContactsNotModified;
        break;
    case ContactsContacts::typeContactsContacts:
        result = TypeContactsContacts;
        break;
    default:
        result = TypeContactsContactsNotModified;
        break;
    }

    return result;
}

void ContactsContactsObject::setCore(const ContactsContacts &core) {
    operator =(core);
}

ContactsContacts ContactsContactsObject::core() const {
    return m_core;
}

