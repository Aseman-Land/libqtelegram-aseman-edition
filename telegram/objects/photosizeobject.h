// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_PHOTOSIZE_OBJECT
#define LQTG_TYPE_PHOTOSIZE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/photosize.h"

#include <QPointer>
#include "filelocationobject.h"

class LIBQTELEGRAMSHARED_EXPORT PhotoSizeObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(PhotoSizeClassType)
    Q_PROPERTY(QByteArray bytes READ bytes WRITE setBytes NOTIFY bytesChanged)
    Q_PROPERTY(qint32 h READ h WRITE setH NOTIFY hChanged)
    Q_PROPERTY(FileLocationObject* location READ location WRITE setLocation NOTIFY locationChanged)
    Q_PROPERTY(qint32 size READ size WRITE setSize NOTIFY sizeChanged)
    Q_PROPERTY(QString type READ type WRITE setType NOTIFY typeChanged)
    Q_PROPERTY(qint32 w READ w WRITE setW NOTIFY wChanged)
    Q_PROPERTY(PhotoSize core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum PhotoSizeClassType {
        TypePhotoSizeEmpty,
        TypePhotoSize,
        TypePhotoCachedSize
    };

    PhotoSizeObject(const PhotoSize &core, QObject *parent = 0);
    PhotoSizeObject(QObject *parent = 0);
    virtual ~PhotoSizeObject();

    void setBytes(const QByteArray &bytes);
    QByteArray bytes() const;

    void setH(qint32 h);
    qint32 h() const;

    void setLocation(FileLocationObject* location);
    FileLocationObject* location() const;

    void setSize(qint32 size);
    qint32 size() const;

    void setType(const QString &type);
    QString type() const;

    void setW(qint32 w);
    qint32 w() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const PhotoSize &core);
    PhotoSize core() const;

    PhotoSizeObject &operator =(const PhotoSize &b);
    bool operator ==(const PhotoSize &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void bytesChanged();
    void hChanged();
    void locationChanged();
    void sizeChanged();
    void typeChanged();
    void wChanged();

private Q_SLOTS:
    void coreLocationChanged();

private:
    QPointer<FileLocationObject> m_location;
    PhotoSize m_core;
};

inline PhotoSizeObject::PhotoSizeObject(const PhotoSize &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_location(0),
    m_core(core)
{
    m_location = new FileLocationObject(m_core.location(), this);
    connect(m_location.data(), &FileLocationObject::coreChanged, this, &PhotoSizeObject::coreLocationChanged);
}

inline PhotoSizeObject::PhotoSizeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_location(0),
    m_core()
{
    m_location = new FileLocationObject(m_core.location(), this);
    connect(m_location.data(), &FileLocationObject::coreChanged, this, &PhotoSizeObject::coreLocationChanged);
}

inline PhotoSizeObject::~PhotoSizeObject() {
}

inline void PhotoSizeObject::setBytes(const QByteArray &bytes) {
    if(m_core.bytes() == bytes) return;
    m_core.setBytes(bytes);
    Q_EMIT bytesChanged();
    Q_EMIT coreChanged();
}

inline QByteArray PhotoSizeObject::bytes() const {
    return m_core.bytes();
}

inline void PhotoSizeObject::setH(qint32 h) {
    if(m_core.h() == h) return;
    m_core.setH(h);
    Q_EMIT hChanged();
    Q_EMIT coreChanged();
}

inline qint32 PhotoSizeObject::h() const {
    return m_core.h();
}

inline void PhotoSizeObject::setLocation(FileLocationObject* location) {
    if(m_location == location) return;
    if(m_location) delete m_location;
    m_location = location;
    if(m_location) {
        m_location->setParent(this);
        m_core.setLocation(m_location->core());
        connect(m_location.data(), &FileLocationObject::coreChanged, this, &PhotoSizeObject::coreLocationChanged);
    }
    Q_EMIT locationChanged();
    Q_EMIT coreChanged();
}

inline FileLocationObject*  PhotoSizeObject::location() const {
    return m_location;
}

inline void PhotoSizeObject::setSize(qint32 size) {
    if(m_core.size() == size) return;
    m_core.setSize(size);
    Q_EMIT sizeChanged();
    Q_EMIT coreChanged();
}

inline qint32 PhotoSizeObject::size() const {
    return m_core.size();
}

inline void PhotoSizeObject::setType(const QString &type) {
    if(m_core.type() == type) return;
    m_core.setType(type);
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

inline QString PhotoSizeObject::type() const {
    return m_core.type();
}

inline void PhotoSizeObject::setW(qint32 w) {
    if(m_core.w() == w) return;
    m_core.setW(w);
    Q_EMIT wChanged();
    Q_EMIT coreChanged();
}

inline qint32 PhotoSizeObject::w() const {
    return m_core.w();
}

inline PhotoSizeObject &PhotoSizeObject::operator =(const PhotoSize &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_location->setCore(b.location());

    Q_EMIT bytesChanged();
    Q_EMIT hChanged();
    Q_EMIT locationChanged();
    Q_EMIT sizeChanged();
    Q_EMIT typeChanged();
    Q_EMIT wChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool PhotoSizeObject::operator ==(const PhotoSize &b) const {
    return m_core == b;
}

inline void PhotoSizeObject::setClassType(quint32 classType) {
    PhotoSize::PhotoSizeClassType result;
    switch(classType) {
    case TypePhotoSizeEmpty:
        result = PhotoSize::typePhotoSizeEmpty;
        break;
    case TypePhotoSize:
        result = PhotoSize::typePhotoSize;
        break;
    case TypePhotoCachedSize:
        result = PhotoSize::typePhotoCachedSize;
        break;
    default:
        result = PhotoSize::typePhotoSizeEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 PhotoSizeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case PhotoSize::typePhotoSizeEmpty:
        result = TypePhotoSizeEmpty;
        break;
    case PhotoSize::typePhotoSize:
        result = TypePhotoSize;
        break;
    case PhotoSize::typePhotoCachedSize:
        result = TypePhotoCachedSize;
        break;
    default:
        result = TypePhotoSizeEmpty;
        break;
    }

    return result;
}

inline void PhotoSizeObject::setCore(const PhotoSize &core) {
    operator =(core);
}

inline PhotoSize PhotoSizeObject::core() const {
    return m_core;
}

inline void PhotoSizeObject::coreLocationChanged() {
    if(m_core.location() == m_location->core()) return;
    m_core.setLocation(m_location->core());
    Q_EMIT locationChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_PHOTOSIZE_OBJECT
