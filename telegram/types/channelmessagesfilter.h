// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHANNELMESSAGESFILTER
#define LQTG_TYPE_CHANNELMESSAGESFILTER

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QList>
#include "messagerange.h"

class LIBQTELEGRAMSHARED_EXPORT ChannelMessagesFilter : public TelegramTypeObject
{
public:
    enum ChannelMessagesFilterClassType {
        typeChannelMessagesFilterEmpty = 0x94d42ee7,
        typeChannelMessagesFilter = 0xcd77d957
    };

    ChannelMessagesFilter(ChannelMessagesFilterClassType classType = typeChannelMessagesFilterEmpty, InboundPkt *in = 0);
    ChannelMessagesFilter(InboundPkt *in);
    ChannelMessagesFilter(const Null&);
    virtual ~ChannelMessagesFilter();

    void setExcludeNewMessages(bool excludeNewMessages);
    bool excludeNewMessages() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setRanges(const QList<MessageRange> &ranges);
    QList<MessageRange> ranges() const;

    void setClassType(ChannelMessagesFilterClassType classType);
    ChannelMessagesFilterClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ChannelMessagesFilter fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ChannelMessagesFilter &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_flags;
    QList<MessageRange> m_ranges;
    ChannelMessagesFilterClassType m_classType;
};

Q_DECLARE_METATYPE(ChannelMessagesFilter)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChannelMessagesFilter &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChannelMessagesFilter &item);

inline ChannelMessagesFilter::ChannelMessagesFilter(ChannelMessagesFilterClassType classType, InboundPkt *in) :
    m_flags(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline ChannelMessagesFilter::ChannelMessagesFilter(InboundPkt *in) :
    m_flags(0),
    m_classType(typeChannelMessagesFilterEmpty)
{
    fetch(in);
}

inline ChannelMessagesFilter::ChannelMessagesFilter(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_classType(typeChannelMessagesFilterEmpty)
{
}

inline ChannelMessagesFilter::~ChannelMessagesFilter() {
}

inline void ChannelMessagesFilter::setExcludeNewMessages(bool excludeNewMessages) {
    if(excludeNewMessages) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

inline bool ChannelMessagesFilter::excludeNewMessages() const {
    return (m_flags & 1<<1);
}

inline void ChannelMessagesFilter::setFlags(qint32 flags) {
    m_flags = flags;
}

inline qint32 ChannelMessagesFilter::flags() const {
    return m_flags;
}

inline void ChannelMessagesFilter::setRanges(const QList<MessageRange> &ranges) {
    m_ranges = ranges;
}

inline QList<MessageRange> ChannelMessagesFilter::ranges() const {
    return m_ranges;
}

inline bool ChannelMessagesFilter::operator ==(const ChannelMessagesFilter &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_ranges == b.m_ranges;
}

inline void ChannelMessagesFilter::setClassType(ChannelMessagesFilter::ChannelMessagesFilterClassType classType) {
    m_classType = classType;
}

inline ChannelMessagesFilter::ChannelMessagesFilterClassType ChannelMessagesFilter::classType() const {
    return m_classType;
}

inline bool ChannelMessagesFilter::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelMessagesFilterEmpty: {
        m_classType = static_cast<ChannelMessagesFilterClassType>(x);
        return true;
    }
        break;
    
    case typeChannelMessagesFilter: {
        m_flags = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_ranges_length = in->fetchInt();
        m_ranges.clear();
        for (qint32 i = 0; i < m_ranges_length; i++) {
            MessageRange type;
            type.fetch(in);
            m_ranges.append(type);
        }
        m_classType = static_cast<ChannelMessagesFilterClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool ChannelMessagesFilter::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelMessagesFilterEmpty: {
        return true;
    }
        break;
    
    case typeChannelMessagesFilter: {
        out->appendInt(m_flags);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_ranges.count());
        for (qint32 i = 0; i < m_ranges.count(); i++) {
            m_ranges[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> ChannelMessagesFilter::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChannelMessagesFilterEmpty: {
        result["classType"] = "ChannelMessagesFilter::typeChannelMessagesFilterEmpty";
        return result;
    }
        break;
    
    case typeChannelMessagesFilter: {
        result["classType"] = "ChannelMessagesFilter::typeChannelMessagesFilter";
        result["excludeNewMessages"] = QVariant::fromValue<bool>(excludeNewMessages());
        QList<QVariant> _ranges;
        Q_FOREACH(const MessageRange &m__type, m_ranges)
            _ranges << m__type.toMap();
        result["ranges"] = _ranges;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline ChannelMessagesFilter ChannelMessagesFilter::fromMap(const QMap<QString, QVariant> &map) {
    ChannelMessagesFilter result;
    if(map.value("classType").toString() == "ChannelMessagesFilter::typeChannelMessagesFilterEmpty") {
        result.setClassType(typeChannelMessagesFilterEmpty);
        return result;
    }
    if(map.value("classType").toString() == "ChannelMessagesFilter::typeChannelMessagesFilter") {
        result.setClassType(typeChannelMessagesFilter);
        result.setExcludeNewMessages( map.value("excludeNewMessages").value<bool>() );
        QList<QVariant> map_ranges = map["ranges"].toList();
        QList<MessageRange> _ranges;
        Q_FOREACH(const QVariant &var, map_ranges)
            _ranges << MessageRange::fromMap(var.toMap());
        result.setRanges(_ranges);
        return result;
    }
    return result;
}

inline QByteArray ChannelMessagesFilter::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const ChannelMessagesFilter &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelMessagesFilter::typeChannelMessagesFilterEmpty:
        
        break;
    case ChannelMessagesFilter::typeChannelMessagesFilter:
        stream << item.flags();
        stream << item.ranges();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, ChannelMessagesFilter &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelMessagesFilter::ChannelMessagesFilterClassType>(type));
    switch(type) {
    case ChannelMessagesFilter::typeChannelMessagesFilterEmpty: {
        
    }
        break;
    case ChannelMessagesFilter::typeChannelMessagesFilter: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        QList<MessageRange> m_ranges;
        stream >> m_ranges;
        item.setRanges(m_ranges);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_CHANNELMESSAGESFILTER
