// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "botcommandobject.h"

BotCommandObject::BotCommandObject(const BotCommand &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

BotCommandObject::BotCommandObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

BotCommandObject::~BotCommandObject() {
}

void BotCommandObject::setCommand(const QString &command) {
    if(m_core.command() == command) return;
    m_core.setCommand(command);
    Q_EMIT commandChanged();
    Q_EMIT coreChanged();
}

QString BotCommandObject::command() const {
    return m_core.command();
}

void BotCommandObject::setDescription(const QString &description) {
    if(m_core.description() == description) return;
    m_core.setDescription(description);
    Q_EMIT descriptionChanged();
    Q_EMIT coreChanged();
}

QString BotCommandObject::description() const {
    return m_core.description();
}

BotCommandObject &BotCommandObject::operator =(const BotCommand &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT commandChanged();
    Q_EMIT descriptionChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool BotCommandObject::operator ==(const BotCommand &b) const {
    return m_core == b;
}

void BotCommandObject::setClassType(quint32 classType) {
    BotCommand::BotCommandType result;
    switch(classType) {
    case TypeBotCommand:
        result = BotCommand::typeBotCommand;
        break;
    default:
        result = BotCommand::typeBotCommand;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 BotCommandObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case BotCommand::typeBotCommand:
        result = TypeBotCommand;
        break;
    default:
        result = TypeBotCommand;
        break;
    }

    return result;
}

void BotCommandObject::setCore(const BotCommand &core) {
    operator =(core);
}

BotCommand BotCommandObject::core() const {
    return m_core;
}

