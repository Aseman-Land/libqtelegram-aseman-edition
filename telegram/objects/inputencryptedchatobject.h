// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTENCRYPTEDCHAT_OBJECT
#define LQTG_TYPE_INPUTENCRYPTEDCHAT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputencryptedchat.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputEncryptedChatObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputEncryptedChatClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(InputEncryptedChat core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputEncryptedChatClassType {
        TypeInputEncryptedChat
    };

    InputEncryptedChatObject(const InputEncryptedChat &core, QObject *parent = 0);
    InputEncryptedChatObject(QObject *parent = 0);
    virtual ~InputEncryptedChatObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputEncryptedChat &core);
    InputEncryptedChat core() const;

    InputEncryptedChatObject &operator =(const InputEncryptedChat &b);
    bool operator ==(const InputEncryptedChat &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void chatIdChanged();

private Q_SLOTS:

private:
    InputEncryptedChat m_core;
};

inline InputEncryptedChatObject::InputEncryptedChatObject(const InputEncryptedChat &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputEncryptedChatObject::InputEncryptedChatObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputEncryptedChatObject::~InputEncryptedChatObject() {
}

inline void InputEncryptedChatObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputEncryptedChatObject::accessHash() const {
    return m_core.accessHash();
}

inline void InputEncryptedChatObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputEncryptedChatObject::chatId() const {
    return m_core.chatId();
}

inline InputEncryptedChatObject &InputEncryptedChatObject::operator =(const InputEncryptedChat &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputEncryptedChatObject::operator ==(const InputEncryptedChat &b) const {
    return m_core == b;
}

inline void InputEncryptedChatObject::setClassType(quint32 classType) {
    InputEncryptedChat::InputEncryptedChatClassType result;
    switch(classType) {
    case TypeInputEncryptedChat:
        result = InputEncryptedChat::typeInputEncryptedChat;
        break;
    default:
        result = InputEncryptedChat::typeInputEncryptedChat;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputEncryptedChatObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputEncryptedChat::typeInputEncryptedChat:
        result = TypeInputEncryptedChat;
        break;
    default:
        result = TypeInputEncryptedChat;
        break;
    }

    return result;
}

inline void InputEncryptedChatObject::setCore(const InputEncryptedChat &core) {
    operator =(core);
}

inline InputEncryptedChat InputEncryptedChatObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTENCRYPTEDCHAT_OBJECT
