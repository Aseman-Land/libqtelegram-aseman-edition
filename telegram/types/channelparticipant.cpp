// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "channelparticipant.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ChannelParticipant::ChannelParticipant(ChannelParticipantType classType, InboundPkt *in) :
    m_date(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

ChannelParticipant::ChannelParticipant(InboundPkt *in) :
    m_date(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_userId(0),
    m_classType(typeChannelParticipant)
{
    fetch(in);
}

ChannelParticipant::ChannelParticipant(const Null &null) :
    TelegramTypeObject(null),
    m_date(0),
    m_inviterId(0),
    m_kickedBy(0),
    m_userId(0),
    m_classType(typeChannelParticipant)
{
}

ChannelParticipant::~ChannelParticipant() {
}

void ChannelParticipant::setDate(qint32 date) {
    m_date = date;
}

qint32 ChannelParticipant::date() const {
    return m_date;
}

void ChannelParticipant::setInviterId(qint32 inviterId) {
    m_inviterId = inviterId;
}

qint32 ChannelParticipant::inviterId() const {
    return m_inviterId;
}

void ChannelParticipant::setKickedBy(qint32 kickedBy) {
    m_kickedBy = kickedBy;
}

qint32 ChannelParticipant::kickedBy() const {
    return m_kickedBy;
}

void ChannelParticipant::setUserId(qint32 userId) {
    m_userId = userId;
}

qint32 ChannelParticipant::userId() const {
    return m_userId;
}

bool ChannelParticipant::operator ==(const ChannelParticipant &b) const {
    return m_classType == b.m_classType &&
           m_date == b.m_date &&
           m_inviterId == b.m_inviterId &&
           m_kickedBy == b.m_kickedBy &&
           m_userId == b.m_userId;
}

void ChannelParticipant::setClassType(ChannelParticipant::ChannelParticipantType classType) {
    m_classType = classType;
}

ChannelParticipant::ChannelParticipantType ChannelParticipant::classType() const {
    return m_classType;
}

bool ChannelParticipant::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChannelParticipant: {
        m_userId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantSelf: {
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantModerator: {
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantEditor: {
        m_userId = in->fetchInt();
        m_inviterId = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantKicked: {
        m_userId = in->fetchInt();
        m_kickedBy = in->fetchInt();
        m_date = in->fetchInt();
        m_classType = static_cast<ChannelParticipantType>(x);
        return true;
    }
        break;
    
    case typeChannelParticipantCreator: {
        m_userId = in->fetchInt();
        m_classType = static_cast<ChannelParticipantType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ChannelParticipant::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChannelParticipant: {
        out->appendInt(m_userId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantSelf: {
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantModerator: {
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantEditor: {
        out->appendInt(m_userId);
        out->appendInt(m_inviterId);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantKicked: {
        out->appendInt(m_userId);
        out->appendInt(m_kickedBy);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeChannelParticipantCreator: {
        out->appendInt(m_userId);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray ChannelParticipant::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const ChannelParticipant &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChannelParticipant::typeChannelParticipant:
        stream << item.userId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantSelf:
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantModerator:
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantEditor:
        stream << item.userId();
        stream << item.inviterId();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantKicked:
        stream << item.userId();
        stream << item.kickedBy();
        stream << item.date();
        break;
    case ChannelParticipant::typeChannelParticipantCreator:
        stream << item.userId();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ChannelParticipant &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChannelParticipant::ChannelParticipantType>(type));
    switch(type) {
    case ChannelParticipant::typeChannelParticipant: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantSelf: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantModerator: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantEditor: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_inviter_id;
        stream >> m_inviter_id;
        item.setInviterId(m_inviter_id);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantKicked: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_kicked_by;
        stream >> m_kicked_by;
        item.setKickedBy(m_kicked_by);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case ChannelParticipant::typeChannelParticipantCreator: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
    }
        break;
    }
    return stream;
}

