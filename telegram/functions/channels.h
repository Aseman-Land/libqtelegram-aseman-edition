// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_FNC_CHANNELS
#define LQTG_FNC_CHANNELS

#include "telegramfunctionobject.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include "telegram/types/messagesdialogs.h"
#include <QtGlobal>
#include "telegram/types/messagesmessages.h"
#include "telegram/types/inputchannel.h"
#include "telegram/types/messagesaffectedmessages.h"
#include <QList>
#include "telegram/types/messagesaffectedhistory.h"
#include "telegram/types/inputuser.h"
#include "telegram/types/channelschannelparticipants.h"
#include "telegram/types/channelparticipantsfilter.h"
#include "telegram/types/channelschannelparticipant.h"
#include "telegram/types/messageschats.h"
#include "telegram/types/messageschatfull.h"
#include "telegram/types/updatestype.h"
#include <QString>
#include "telegram/types/channelparticipantrole.h"
#include "telegram/types/inputchatphoto.h"
#include "telegram/types/exportedchatinvite.h"
#include "telegram/types/exportedmessagelink.h"

namespace Tg {
namespace Functions {

class LIBQTELEGRAMSHARED_EXPORT Channels : public TelegramFunctionObject
{
public:
    enum ChannelsFunction {
        fncChannelsGetDialogs = 0xa9d3d249,
        fncChannelsGetImportantHistory = 0x8f494bb2,
        fncChannelsReadHistory = 0xcc104937,
        fncChannelsDeleteMessages = 0x84c1fd4e,
        fncChannelsDeleteUserHistory = 0xd10dd71b,
        fncChannelsReportSpam = 0xfe087810,
        fncChannelsGetMessages = 0x93d7b347,
        fncChannelsGetParticipants = 0x24d98f92,
        fncChannelsGetParticipant = 0x546dd7a6,
        fncChannelsGetChannels = 0xa7f6bbb,
        fncChannelsGetFullChannel = 0x8736a09,
        fncChannelsCreateChannel = 0xf4893d7f,
        fncChannelsEditAbout = 0x13e27f1e,
        fncChannelsEditAdmin = 0xeb7611d0,
        fncChannelsEditTitle = 0x566decd0,
        fncChannelsEditPhoto = 0xf12e57c9,
        fncChannelsToggleComments = 0xaaa29e88,
        fncChannelsCheckUsername = 0x10e6bd2c,
        fncChannelsUpdateUsername = 0x3514b3de,
        fncChannelsJoinChannel = 0x24b524c5,
        fncChannelsLeaveChannel = 0xf836aa95,
        fncChannelsInviteToChannel = 0x199f3a6c,
        fncChannelsKickFromChannel = 0xa672de14,
        fncChannelsExportInvite = 0xc7560885,
        fncChannelsDeleteChannel = 0xc0111fe3,
        fncChannelsToggleInvites = 0x49609307,
        fncChannelsExportMessageLink = 0xc846d22d,
        fncChannelsToggleSignatures = 0x1f69b606,
        fncChannelsUpdatePinnedMessage = 0xa72ded52
    };

    Channels();
    virtual ~Channels();

    static bool getDialogs(OutboundPkt *out, qint32 offset, qint32 limit);
    static MessagesDialogs getDialogsResult(InboundPkt *in);

    static bool getImportantHistory(OutboundPkt *out, const InputChannel &channel, qint32 offsetId, qint32 offsetDate, qint32 addOffset, qint32 limit, qint32 maxId, qint32 minId);
    static MessagesMessages getImportantHistoryResult(InboundPkt *in);

    static bool readHistory(OutboundPkt *out, const InputChannel &channel, qint32 maxId);
    static bool readHistoryResult(InboundPkt *in);

    static bool deleteMessages(OutboundPkt *out, const InputChannel &channel, const QList<qint32> &id);
    static MessagesAffectedMessages deleteMessagesResult(InboundPkt *in);

    static bool deleteUserHistory(OutboundPkt *out, const InputChannel &channel, const InputUser &userId);
    static MessagesAffectedHistory deleteUserHistoryResult(InboundPkt *in);

    static bool reportSpam(OutboundPkt *out, const InputChannel &channel, const InputUser &userId, const QList<qint32> &id);
    static bool reportSpamResult(InboundPkt *in);

    static bool getMessages(OutboundPkt *out, const InputChannel &channel, const QList<qint32> &id);
    static MessagesMessages getMessagesResult(InboundPkt *in);

    static bool getParticipants(OutboundPkt *out, const InputChannel &channel, const ChannelParticipantsFilter &filter, qint32 offset, qint32 limit);
    static ChannelsChannelParticipants getParticipantsResult(InboundPkt *in);

    static bool getParticipant(OutboundPkt *out, const InputChannel &channel, const InputUser &userId);
    static ChannelsChannelParticipant getParticipantResult(InboundPkt *in);

    static bool getChannels(OutboundPkt *out, const QList<InputChannel> &id);
    static MessagesChats getChannelsResult(InboundPkt *in);

    static bool getFullChannel(OutboundPkt *out, const InputChannel &channel);
    static MessagesChatFull getFullChannelResult(InboundPkt *in);

    static bool createChannel(OutboundPkt *out, bool broadcast, bool megagroup, const QString &title, const QString &about);
    static UpdatesType createChannelResult(InboundPkt *in);

    static bool editAbout(OutboundPkt *out, const InputChannel &channel, const QString &about);
    static bool editAboutResult(InboundPkt *in);

    static bool editAdmin(OutboundPkt *out, const InputChannel &channel, const InputUser &userId, const ChannelParticipantRole &role);
    static UpdatesType editAdminResult(InboundPkt *in);

    static bool editTitle(OutboundPkt *out, const InputChannel &channel, const QString &title);
    static UpdatesType editTitleResult(InboundPkt *in);

    static bool editPhoto(OutboundPkt *out, const InputChannel &channel, const InputChatPhoto &photo);
    static UpdatesType editPhotoResult(InboundPkt *in);

    static bool toggleComments(OutboundPkt *out, const InputChannel &channel, bool enabled);
    static UpdatesType toggleCommentsResult(InboundPkt *in);

    static bool checkUsername(OutboundPkt *out, const InputChannel &channel, const QString &username);
    static bool checkUsernameResult(InboundPkt *in);

    static bool updateUsername(OutboundPkt *out, const InputChannel &channel, const QString &username);
    static bool updateUsernameResult(InboundPkt *in);

    static bool joinChannel(OutboundPkt *out, const InputChannel &channel);
    static UpdatesType joinChannelResult(InboundPkt *in);

    static bool leaveChannel(OutboundPkt *out, const InputChannel &channel);
    static UpdatesType leaveChannelResult(InboundPkt *in);

    static bool inviteToChannel(OutboundPkt *out, const InputChannel &channel, const QList<InputUser> &users);
    static UpdatesType inviteToChannelResult(InboundPkt *in);

    static bool kickFromChannel(OutboundPkt *out, const InputChannel &channel, const InputUser &userId, bool kicked);
    static UpdatesType kickFromChannelResult(InboundPkt *in);

    static bool exportInvite(OutboundPkt *out, const InputChannel &channel);
    static ExportedChatInvite exportInviteResult(InboundPkt *in);

    static bool deleteChannel(OutboundPkt *out, const InputChannel &channel);
    static UpdatesType deleteChannelResult(InboundPkt *in);

    static bool toggleInvites(OutboundPkt *out, const InputChannel &channel, bool enabled);
    static UpdatesType toggleInvitesResult(InboundPkt *in);

    static bool exportMessageLink(OutboundPkt *out, const InputChannel &channel, qint32 id);
    static ExportedMessageLink exportMessageLinkResult(InboundPkt *in);

    static bool toggleSignatures(OutboundPkt *out, const InputChannel &channel, bool enabled);
    static UpdatesType toggleSignaturesResult(InboundPkt *in);

    static bool updatePinnedMessage(OutboundPkt *out, bool silent, const InputChannel &channel, qint32 id);
    static UpdatesType updatePinnedMessageResult(InboundPkt *in);

};

}
inline Functions::Channels::Channels() {
}

inline Functions::Channels::~Channels() {
}

inline bool Functions::Channels::getDialogs(OutboundPkt *out, qint32 offset, qint32 limit) {
    out->appendInt(fncChannelsGetDialogs);
    out->appendInt(offset);
    out->appendInt(limit);
    return true;
}

inline MessagesDialogs Functions::Channels::getDialogsResult(InboundPkt *in) {
    MessagesDialogs result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::getImportantHistory(OutboundPkt *out, const InputChannel &channel, qint32 offsetId, qint32 offsetDate, qint32 addOffset, qint32 limit, qint32 maxId, qint32 minId) {
    out->appendInt(fncChannelsGetImportantHistory);
    if(!channel.push(out)) return false;
    out->appendInt(offsetId);
    out->appendInt(offsetDate);
    out->appendInt(addOffset);
    out->appendInt(limit);
    out->appendInt(maxId);
    out->appendInt(minId);
    return true;
}

inline MessagesMessages Functions::Channels::getImportantHistoryResult(InboundPkt *in) {
    MessagesMessages result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::readHistory(OutboundPkt *out, const InputChannel &channel, qint32 maxId) {
    out->appendInt(fncChannelsReadHistory);
    if(!channel.push(out)) return false;
    out->appendInt(maxId);
    return true;
}

inline bool Functions::Channels::readHistoryResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

inline bool Functions::Channels::deleteMessages(OutboundPkt *out, const InputChannel &channel, const QList<qint32> &id) {
    out->appendInt(fncChannelsDeleteMessages);
    if(!channel.push(out)) return false;
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(id.count());
    for (qint32 i = 0; i < id.count(); i++) {
        out->appendInt(id[i]);
    }
    return true;
}

inline MessagesAffectedMessages Functions::Channels::deleteMessagesResult(InboundPkt *in) {
    MessagesAffectedMessages result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::deleteUserHistory(OutboundPkt *out, const InputChannel &channel, const InputUser &userId) {
    out->appendInt(fncChannelsDeleteUserHistory);
    if(!channel.push(out)) return false;
    if(!userId.push(out)) return false;
    return true;
}

inline MessagesAffectedHistory Functions::Channels::deleteUserHistoryResult(InboundPkt *in) {
    MessagesAffectedHistory result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::reportSpam(OutboundPkt *out, const InputChannel &channel, const InputUser &userId, const QList<qint32> &id) {
    out->appendInt(fncChannelsReportSpam);
    if(!channel.push(out)) return false;
    if(!userId.push(out)) return false;
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(id.count());
    for (qint32 i = 0; i < id.count(); i++) {
        out->appendInt(id[i]);
    }
    return true;
}

inline bool Functions::Channels::reportSpamResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

inline bool Functions::Channels::getMessages(OutboundPkt *out, const InputChannel &channel, const QList<qint32> &id) {
    out->appendInt(fncChannelsGetMessages);
    if(!channel.push(out)) return false;
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(id.count());
    for (qint32 i = 0; i < id.count(); i++) {
        out->appendInt(id[i]);
    }
    return true;
}

inline MessagesMessages Functions::Channels::getMessagesResult(InboundPkt *in) {
    MessagesMessages result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::getParticipants(OutboundPkt *out, const InputChannel &channel, const ChannelParticipantsFilter &filter, qint32 offset, qint32 limit) {
    out->appendInt(fncChannelsGetParticipants);
    if(!channel.push(out)) return false;
    if(!filter.push(out)) return false;
    out->appendInt(offset);
    out->appendInt(limit);
    return true;
}

inline ChannelsChannelParticipants Functions::Channels::getParticipantsResult(InboundPkt *in) {
    ChannelsChannelParticipants result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::getParticipant(OutboundPkt *out, const InputChannel &channel, const InputUser &userId) {
    out->appendInt(fncChannelsGetParticipant);
    if(!channel.push(out)) return false;
    if(!userId.push(out)) return false;
    return true;
}

inline ChannelsChannelParticipant Functions::Channels::getParticipantResult(InboundPkt *in) {
    ChannelsChannelParticipant result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::getChannels(OutboundPkt *out, const QList<InputChannel> &id) {
    out->appendInt(fncChannelsGetChannels);
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(id.count());
    for (qint32 i = 0; i < id.count(); i++) {
        if(!id[i].push(out)) return false;
    }
    return true;
}

inline MessagesChats Functions::Channels::getChannelsResult(InboundPkt *in) {
    MessagesChats result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::getFullChannel(OutboundPkt *out, const InputChannel &channel) {
    out->appendInt(fncChannelsGetFullChannel);
    if(!channel.push(out)) return false;
    return true;
}

inline MessagesChatFull Functions::Channels::getFullChannelResult(InboundPkt *in) {
    MessagesChatFull result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::createChannel(OutboundPkt *out, bool broadcast, bool megagroup, const QString &title, const QString &about) {
    out->appendInt(fncChannelsCreateChannel);
    
    qint32 flags = 0;
    if(broadcast != 0) flags = (1<<0 | flags);
    if(megagroup != 0) flags = (1<<1 | flags);
    
    out->appendInt(flags);
    out->appendQString(title);
    out->appendQString(about);
    return true;
}

inline UpdatesType Functions::Channels::createChannelResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::editAbout(OutboundPkt *out, const InputChannel &channel, const QString &about) {
    out->appendInt(fncChannelsEditAbout);
    if(!channel.push(out)) return false;
    out->appendQString(about);
    return true;
}

inline bool Functions::Channels::editAboutResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

inline bool Functions::Channels::editAdmin(OutboundPkt *out, const InputChannel &channel, const InputUser &userId, const ChannelParticipantRole &role) {
    out->appendInt(fncChannelsEditAdmin);
    if(!channel.push(out)) return false;
    if(!userId.push(out)) return false;
    if(!role.push(out)) return false;
    return true;
}

inline UpdatesType Functions::Channels::editAdminResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::editTitle(OutboundPkt *out, const InputChannel &channel, const QString &title) {
    out->appendInt(fncChannelsEditTitle);
    if(!channel.push(out)) return false;
    out->appendQString(title);
    return true;
}

inline UpdatesType Functions::Channels::editTitleResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::editPhoto(OutboundPkt *out, const InputChannel &channel, const InputChatPhoto &photo) {
    out->appendInt(fncChannelsEditPhoto);
    if(!channel.push(out)) return false;
    if(!photo.push(out)) return false;
    return true;
}

inline UpdatesType Functions::Channels::editPhotoResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::toggleComments(OutboundPkt *out, const InputChannel &channel, bool enabled) {
    out->appendInt(fncChannelsToggleComments);
    if(!channel.push(out)) return false;
    out->appendBool(enabled);
    return true;
}

inline UpdatesType Functions::Channels::toggleCommentsResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::checkUsername(OutboundPkt *out, const InputChannel &channel, const QString &username) {
    out->appendInt(fncChannelsCheckUsername);
    if(!channel.push(out)) return false;
    out->appendQString(username);
    return true;
}

inline bool Functions::Channels::checkUsernameResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

inline bool Functions::Channels::updateUsername(OutboundPkt *out, const InputChannel &channel, const QString &username) {
    out->appendInt(fncChannelsUpdateUsername);
    if(!channel.push(out)) return false;
    out->appendQString(username);
    return true;
}

inline bool Functions::Channels::updateUsernameResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

inline bool Functions::Channels::joinChannel(OutboundPkt *out, const InputChannel &channel) {
    out->appendInt(fncChannelsJoinChannel);
    if(!channel.push(out)) return false;
    return true;
}

inline UpdatesType Functions::Channels::joinChannelResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::leaveChannel(OutboundPkt *out, const InputChannel &channel) {
    out->appendInt(fncChannelsLeaveChannel);
    if(!channel.push(out)) return false;
    return true;
}

inline UpdatesType Functions::Channels::leaveChannelResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::inviteToChannel(OutboundPkt *out, const InputChannel &channel, const QList<InputUser> &users) {
    out->appendInt(fncChannelsInviteToChannel);
    if(!channel.push(out)) return false;
    out->appendInt(CoreTypes::typeVector);
    out->appendInt(users.count());
    for (qint32 i = 0; i < users.count(); i++) {
        if(!users[i].push(out)) return false;
    }
    return true;
}

inline UpdatesType Functions::Channels::inviteToChannelResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::kickFromChannel(OutboundPkt *out, const InputChannel &channel, const InputUser &userId, bool kicked) {
    out->appendInt(fncChannelsKickFromChannel);
    if(!channel.push(out)) return false;
    if(!userId.push(out)) return false;
    out->appendBool(kicked);
    return true;
}

inline UpdatesType Functions::Channels::kickFromChannelResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::exportInvite(OutboundPkt *out, const InputChannel &channel) {
    out->appendInt(fncChannelsExportInvite);
    if(!channel.push(out)) return false;
    return true;
}

inline ExportedChatInvite Functions::Channels::exportInviteResult(InboundPkt *in) {
    ExportedChatInvite result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::deleteChannel(OutboundPkt *out, const InputChannel &channel) {
    out->appendInt(fncChannelsDeleteChannel);
    if(!channel.push(out)) return false;
    return true;
}

inline UpdatesType Functions::Channels::deleteChannelResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::toggleInvites(OutboundPkt *out, const InputChannel &channel, bool enabled) {
    out->appendInt(fncChannelsToggleInvites);
    if(!channel.push(out)) return false;
    out->appendBool(enabled);
    return true;
}

inline UpdatesType Functions::Channels::toggleInvitesResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::exportMessageLink(OutboundPkt *out, const InputChannel &channel, qint32 id) {
    out->appendInt(fncChannelsExportMessageLink);
    if(!channel.push(out)) return false;
    out->appendInt(id);
    return true;
}

inline ExportedMessageLink Functions::Channels::exportMessageLinkResult(InboundPkt *in) {
    ExportedMessageLink result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::toggleSignatures(OutboundPkt *out, const InputChannel &channel, bool enabled) {
    out->appendInt(fncChannelsToggleSignatures);
    if(!channel.push(out)) return false;
    out->appendBool(enabled);
    return true;
}

inline UpdatesType Functions::Channels::toggleSignaturesResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Channels::updatePinnedMessage(OutboundPkt *out, bool silent, const InputChannel &channel, qint32 id) {
    out->appendInt(fncChannelsUpdatePinnedMessage);
    
    qint32 flags = 0;
    if(silent != 0) flags = (1<<0 | flags);
    
    out->appendInt(flags);
    if(!channel.push(out)) return false;
    out->appendInt(id);
    return true;
}

inline UpdatesType Functions::Channels::updatePinnedMessageResult(InboundPkt *in) {
    UpdatesType result;
    if(!result.fetch(in)) return result;
    return result;
}


}

#endif // LQTG_FNC_CHANNELS
