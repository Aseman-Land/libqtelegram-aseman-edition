// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "contactsuggestedobject.h"

ContactSuggestedObject::ContactSuggestedObject(const ContactSuggested &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

ContactSuggestedObject::ContactSuggestedObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

ContactSuggestedObject::~ContactSuggestedObject() {
}

void ContactSuggestedObject::setMutualContacts(qint32 mutualContacts) {
    if(m_core.mutualContacts() == mutualContacts) return;
    m_core.setMutualContacts(mutualContacts);
    Q_EMIT mutualContactsChanged();
    Q_EMIT coreChanged();
}

qint32 ContactSuggestedObject::mutualContacts() const {
    return m_core.mutualContacts();
}

void ContactSuggestedObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 ContactSuggestedObject::userId() const {
    return m_core.userId();
}

ContactSuggestedObject &ContactSuggestedObject::operator =(const ContactSuggested &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT mutualContactsChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool ContactSuggestedObject::operator ==(const ContactSuggested &b) const {
    return m_core == b;
}

void ContactSuggestedObject::setClassType(quint32 classType) {
    ContactSuggested::ContactSuggestedType result;
    switch(classType) {
    case TypeContactSuggested:
        result = ContactSuggested::typeContactSuggested;
        break;
    default:
        result = ContactSuggested::typeContactSuggested;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 ContactSuggestedObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactSuggested::typeContactSuggested:
        result = TypeContactSuggested;
        break;
    default:
        result = TypeContactSuggested;
        break;
    }

    return result;
}

void ContactSuggestedObject::setCore(const ContactSuggested &core) {
    operator =(core);
}

ContactSuggested ContactSuggestedObject::core() const {
    return m_core;
}

