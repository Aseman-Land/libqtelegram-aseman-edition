// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_DISABLEDFEATURE
#define LQTG_TYPE_DISABLEDFEATURE

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QString>

class LIBQTELEGRAMSHARED_EXPORT DisabledFeature : public TelegramTypeObject
{
public:
    enum DisabledFeatureClassType {
        typeDisabledFeature = 0xae636f24
    };

    DisabledFeature(DisabledFeatureClassType classType = typeDisabledFeature, InboundPkt *in = 0);
    DisabledFeature(InboundPkt *in);
    DisabledFeature(const Null&);
    virtual ~DisabledFeature();

    void setDescription(const QString &description);
    QString description() const;

    void setFeature(const QString &feature);
    QString feature() const;

    void setClassType(DisabledFeatureClassType classType);
    DisabledFeatureClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static DisabledFeature fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const DisabledFeature &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_description;
    QString m_feature;
    DisabledFeatureClassType m_classType;
};

Q_DECLARE_METATYPE(DisabledFeature)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const DisabledFeature &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, DisabledFeature &item);

inline DisabledFeature::DisabledFeature(DisabledFeatureClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

inline DisabledFeature::DisabledFeature(InboundPkt *in) :
    m_classType(typeDisabledFeature)
{
    fetch(in);
}

inline DisabledFeature::DisabledFeature(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeDisabledFeature)
{
}

inline DisabledFeature::~DisabledFeature() {
}

inline void DisabledFeature::setDescription(const QString &description) {
    m_description = description;
}

inline QString DisabledFeature::description() const {
    return m_description;
}

inline void DisabledFeature::setFeature(const QString &feature) {
    m_feature = feature;
}

inline QString DisabledFeature::feature() const {
    return m_feature;
}

inline bool DisabledFeature::operator ==(const DisabledFeature &b) const {
    return m_classType == b.m_classType &&
           m_description == b.m_description &&
           m_feature == b.m_feature;
}

inline void DisabledFeature::setClassType(DisabledFeature::DisabledFeatureClassType classType) {
    m_classType = classType;
}

inline DisabledFeature::DisabledFeatureClassType DisabledFeature::classType() const {
    return m_classType;
}

inline bool DisabledFeature::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDisabledFeature: {
        m_feature = in->fetchQString();
        m_description = in->fetchQString();
        m_classType = static_cast<DisabledFeatureClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool DisabledFeature::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDisabledFeature: {
        out->appendQString(m_feature);
        out->appendQString(m_description);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> DisabledFeature::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeDisabledFeature: {
        result["classType"] = "DisabledFeature::typeDisabledFeature";
        result["feature"] = QVariant::fromValue<QString>(feature());
        result["description"] = QVariant::fromValue<QString>(description());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline DisabledFeature DisabledFeature::fromMap(const QMap<QString, QVariant> &map) {
    DisabledFeature result;
    if(map.value("classType").toString() == "DisabledFeature::typeDisabledFeature") {
        result.setClassType(typeDisabledFeature);
        result.setFeature( map.value("feature").value<QString>() );
        result.setDescription( map.value("description").value<QString>() );
        return result;
    }
    return result;
}

inline QByteArray DisabledFeature::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const DisabledFeature &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case DisabledFeature::typeDisabledFeature:
        stream << item.feature();
        stream << item.description();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, DisabledFeature &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<DisabledFeature::DisabledFeatureClassType>(type));
    switch(type) {
    case DisabledFeature::typeDisabledFeature: {
        QString m_feature;
        stream >> m_feature;
        item.setFeature(m_feature);
        QString m_description;
        stream >> m_description;
        item.setDescription(m_description);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_DISABLEDFEATURE
