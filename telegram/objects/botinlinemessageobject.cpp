// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "botinlinemessageobject.h"

BotInlineMessageObject::BotInlineMessageObject(const BotInlineMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_geo(0),
    m_replyMarkup(0),
    m_core(core)
{
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), &GeoPointObject::coreChanged, this, &BotInlineMessageObject::coreGeoChanged);
    m_replyMarkup = new ReplyMarkupObject(m_core.replyMarkup(), this);
    connect(m_replyMarkup.data(), &ReplyMarkupObject::coreChanged, this, &BotInlineMessageObject::coreReplyMarkupChanged);
}

BotInlineMessageObject::BotInlineMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_geo(0),
    m_replyMarkup(0),
    m_core()
{
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), &GeoPointObject::coreChanged, this, &BotInlineMessageObject::coreGeoChanged);
    m_replyMarkup = new ReplyMarkupObject(m_core.replyMarkup(), this);
    connect(m_replyMarkup.data(), &ReplyMarkupObject::coreChanged, this, &BotInlineMessageObject::coreReplyMarkupChanged);
}

BotInlineMessageObject::~BotInlineMessageObject() {
}

void BotInlineMessageObject::setAddress(const QString &address) {
    if(m_core.address() == address) return;
    m_core.setAddress(address);
    Q_EMIT addressChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::address() const {
    return m_core.address();
}

void BotInlineMessageObject::setCaption(const QString &caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::caption() const {
    return m_core.caption();
}

void BotInlineMessageObject::setEntities(const QList<MessageEntity> &entities) {
    if(m_core.entities() == entities) return;
    m_core.setEntities(entities);
    Q_EMIT entitiesChanged();
    Q_EMIT coreChanged();
}

QList<MessageEntity> BotInlineMessageObject::entities() const {
    return m_core.entities();
}

void BotInlineMessageObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::firstName() const {
    return m_core.firstName();
}

void BotInlineMessageObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

qint32 BotInlineMessageObject::flags() const {
    return m_core.flags();
}

void BotInlineMessageObject::setGeo(GeoPointObject* geo) {
    if(m_geo == geo) return;
    if(m_geo) delete m_geo;
    m_geo = geo;
    if(m_geo) {
        m_geo->setParent(this);
        m_core.setGeo(m_geo->core());
        connect(m_geo.data(), &GeoPointObject::coreChanged, this, &BotInlineMessageObject::coreGeoChanged);
    }
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

GeoPointObject*  BotInlineMessageObject::geo() const {
    return m_geo;
}

void BotInlineMessageObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::lastName() const {
    return m_core.lastName();
}

void BotInlineMessageObject::setMessage(const QString &message) {
    if(m_core.message() == message) return;
    m_core.setMessage(message);
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::message() const {
    return m_core.message();
}

void BotInlineMessageObject::setNoWebpage(bool noWebpage) {
    if(m_core.noWebpage() == noWebpage) return;
    m_core.setNoWebpage(noWebpage);
    Q_EMIT noWebpageChanged();
    Q_EMIT coreChanged();
}

bool BotInlineMessageObject::noWebpage() const {
    return m_core.noWebpage();
}

void BotInlineMessageObject::setPhoneNumber(const QString &phoneNumber) {
    if(m_core.phoneNumber() == phoneNumber) return;
    m_core.setPhoneNumber(phoneNumber);
    Q_EMIT phoneNumberChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::phoneNumber() const {
    return m_core.phoneNumber();
}

void BotInlineMessageObject::setProvider(const QString &provider) {
    if(m_core.provider() == provider) return;
    m_core.setProvider(provider);
    Q_EMIT providerChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::provider() const {
    return m_core.provider();
}

void BotInlineMessageObject::setReplyMarkup(ReplyMarkupObject* replyMarkup) {
    if(m_replyMarkup == replyMarkup) return;
    if(m_replyMarkup) delete m_replyMarkup;
    m_replyMarkup = replyMarkup;
    if(m_replyMarkup) {
        m_replyMarkup->setParent(this);
        m_core.setReplyMarkup(m_replyMarkup->core());
        connect(m_replyMarkup.data(), &ReplyMarkupObject::coreChanged, this, &BotInlineMessageObject::coreReplyMarkupChanged);
    }
    Q_EMIT replyMarkupChanged();
    Q_EMIT coreChanged();
}

ReplyMarkupObject*  BotInlineMessageObject::replyMarkup() const {
    return m_replyMarkup;
}

void BotInlineMessageObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::title() const {
    return m_core.title();
}

void BotInlineMessageObject::setVenueId(const QString &venueId) {
    if(m_core.venueId() == venueId) return;
    m_core.setVenueId(venueId);
    Q_EMIT venueIdChanged();
    Q_EMIT coreChanged();
}

QString BotInlineMessageObject::venueId() const {
    return m_core.venueId();
}

BotInlineMessageObject &BotInlineMessageObject::operator =(const BotInlineMessage &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_geo->setCore(b.geo());
    m_replyMarkup->setCore(b.replyMarkup());

    Q_EMIT addressChanged();
    Q_EMIT captionChanged();
    Q_EMIT entitiesChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT flagsChanged();
    Q_EMIT geoChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT messageChanged();
    Q_EMIT noWebpageChanged();
    Q_EMIT phoneNumberChanged();
    Q_EMIT providerChanged();
    Q_EMIT replyMarkupChanged();
    Q_EMIT titleChanged();
    Q_EMIT venueIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool BotInlineMessageObject::operator ==(const BotInlineMessage &b) const {
    return m_core == b;
}

void BotInlineMessageObject::setClassType(quint32 classType) {
    BotInlineMessage::BotInlineMessageClassType result;
    switch(classType) {
    case TypeBotInlineMessageMediaAuto:
        result = BotInlineMessage::typeBotInlineMessageMediaAuto;
        break;
    case TypeBotInlineMessageText:
        result = BotInlineMessage::typeBotInlineMessageText;
        break;
    case TypeBotInlineMessageMediaGeo:
        result = BotInlineMessage::typeBotInlineMessageMediaGeo;
        break;
    case TypeBotInlineMessageMediaVenue:
        result = BotInlineMessage::typeBotInlineMessageMediaVenue;
        break;
    case TypeBotInlineMessageMediaContact:
        result = BotInlineMessage::typeBotInlineMessageMediaContact;
        break;
    default:
        result = BotInlineMessage::typeBotInlineMessageMediaAuto;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 BotInlineMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case BotInlineMessage::typeBotInlineMessageMediaAuto:
        result = TypeBotInlineMessageMediaAuto;
        break;
    case BotInlineMessage::typeBotInlineMessageText:
        result = TypeBotInlineMessageText;
        break;
    case BotInlineMessage::typeBotInlineMessageMediaGeo:
        result = TypeBotInlineMessageMediaGeo;
        break;
    case BotInlineMessage::typeBotInlineMessageMediaVenue:
        result = TypeBotInlineMessageMediaVenue;
        break;
    case BotInlineMessage::typeBotInlineMessageMediaContact:
        result = TypeBotInlineMessageMediaContact;
        break;
    default:
        result = TypeBotInlineMessageMediaAuto;
        break;
    }

    return result;
}

void BotInlineMessageObject::setCore(const BotInlineMessage &core) {
    operator =(core);
}

BotInlineMessage BotInlineMessageObject::core() const {
    return m_core;
}

void BotInlineMessageObject::coreGeoChanged() {
    if(m_core.geo() == m_geo->core()) return;
    m_core.setGeo(m_geo->core());
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

void BotInlineMessageObject::coreReplyMarkupChanged() {
    if(m_core.replyMarkup() == m_replyMarkup->core()) return;
    m_core.setReplyMarkup(m_replyMarkup->core());
    Q_EMIT replyMarkupChanged();
    Q_EMIT coreChanged();
}

