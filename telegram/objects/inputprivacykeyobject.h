// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTPRIVACYKEY_OBJECT
#define LQTG_TYPE_INPUTPRIVACYKEY_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputprivacykey.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputPrivacyKeyObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputPrivacyKeyClassType)
    Q_PROPERTY(InputPrivacyKey core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputPrivacyKeyClassType {
        TypeInputPrivacyKeyStatusTimestamp,
        TypeInputPrivacyKeyChatInvite
    };

    InputPrivacyKeyObject(const InputPrivacyKey &core, QObject *parent = 0);
    InputPrivacyKeyObject(QObject *parent = 0);
    virtual ~InputPrivacyKeyObject();

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputPrivacyKey &core);
    InputPrivacyKey core() const;

    InputPrivacyKeyObject &operator =(const InputPrivacyKey &b);
    bool operator ==(const InputPrivacyKey &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();

private Q_SLOTS:

private:
    InputPrivacyKey m_core;
};

inline InputPrivacyKeyObject::InputPrivacyKeyObject(const InputPrivacyKey &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputPrivacyKeyObject::InputPrivacyKeyObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputPrivacyKeyObject::~InputPrivacyKeyObject() {
}

inline InputPrivacyKeyObject &InputPrivacyKeyObject::operator =(const InputPrivacyKey &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

inline bool InputPrivacyKeyObject::operator ==(const InputPrivacyKey &b) const {
    return m_core == b;
}

inline void InputPrivacyKeyObject::setClassType(quint32 classType) {
    InputPrivacyKey::InputPrivacyKeyClassType result;
    switch(classType) {
    case TypeInputPrivacyKeyStatusTimestamp:
        result = InputPrivacyKey::typeInputPrivacyKeyStatusTimestamp;
        break;
    case TypeInputPrivacyKeyChatInvite:
        result = InputPrivacyKey::typeInputPrivacyKeyChatInvite;
        break;
    default:
        result = InputPrivacyKey::typeInputPrivacyKeyStatusTimestamp;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputPrivacyKeyObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputPrivacyKey::typeInputPrivacyKeyStatusTimestamp:
        result = TypeInputPrivacyKeyStatusTimestamp;
        break;
    case InputPrivacyKey::typeInputPrivacyKeyChatInvite:
        result = TypeInputPrivacyKeyChatInvite;
        break;
    default:
        result = TypeInputPrivacyKeyStatusTimestamp;
        break;
    }

    return result;
}

inline void InputPrivacyKeyObject::setCore(const InputPrivacyKey &core) {
    operator =(core);
}

inline InputPrivacyKey InputPrivacyKeyObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTPRIVACYKEY_OBJECT
