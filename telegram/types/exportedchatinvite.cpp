// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "exportedchatinvite.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

ExportedChatInvite::ExportedChatInvite(ExportedChatInviteType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

ExportedChatInvite::ExportedChatInvite(InboundPkt *in) :
    m_classType(typeChatInviteEmpty)
{
    fetch(in);
}

ExportedChatInvite::ExportedChatInvite(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeChatInviteEmpty)
{
}

ExportedChatInvite::~ExportedChatInvite() {
}

void ExportedChatInvite::setLink(const QString &link) {
    m_link = link;
}

QString ExportedChatInvite::link() const {
    return m_link;
}

bool ExportedChatInvite::operator ==(const ExportedChatInvite &b) const {
    return m_classType == b.m_classType &&
           m_link == b.m_link;
}

void ExportedChatInvite::setClassType(ExportedChatInvite::ExportedChatInviteType classType) {
    m_classType = classType;
}

ExportedChatInvite::ExportedChatInviteType ExportedChatInvite::classType() const {
    return m_classType;
}

bool ExportedChatInvite::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChatInviteEmpty: {
        m_classType = static_cast<ExportedChatInviteType>(x);
        return true;
    }
        break;
    
    case typeChatInviteExported: {
        m_link = in->fetchQString();
        m_classType = static_cast<ExportedChatInviteType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool ExportedChatInvite::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChatInviteEmpty: {
        return true;
    }
        break;
    
    case typeChatInviteExported: {
        out->appendQString(m_link);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QDataStream &operator<<(QDataStream &stream, const ExportedChatInvite &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ExportedChatInvite::typeChatInviteEmpty:
        
        break;
    case ExportedChatInvite::typeChatInviteExported:
        stream << item.link();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, ExportedChatInvite &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ExportedChatInvite::ExportedChatInviteType>(type));
    switch(type) {
    case ExportedChatInvite::typeChatInviteEmpty: {
        
    }
        break;
    case ExportedChatInvite::typeChatInviteExported: {
        QString m_link;
        stream >> m_link;
        item.setLink(m_link);
    }
        break;
    }
    return stream;
}

