// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authcodetype.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

AuthCodeType::AuthCodeType(AuthCodeTypeClassType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

AuthCodeType::AuthCodeType(InboundPkt *in) :
    m_classType(typeAuthCodeTypeSms)
{
    fetch(in);
}

AuthCodeType::AuthCodeType(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeAuthCodeTypeSms)
{
}

AuthCodeType::~AuthCodeType() {
}

bool AuthCodeType::operator ==(const AuthCodeType &b) const {
    return m_classType == b.m_classType;
}

void AuthCodeType::setClassType(AuthCodeType::AuthCodeTypeClassType classType) {
    m_classType = classType;
}

AuthCodeType::AuthCodeTypeClassType AuthCodeType::classType() const {
    return m_classType;
}

bool AuthCodeType::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAuthCodeTypeSms: {
        m_classType = static_cast<AuthCodeTypeClassType>(x);
        return true;
    }
        break;
    
    case typeAuthCodeTypeCall: {
        m_classType = static_cast<AuthCodeTypeClassType>(x);
        return true;
    }
        break;
    
    case typeAuthCodeTypeFlashCall: {
        m_classType = static_cast<AuthCodeTypeClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool AuthCodeType::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAuthCodeTypeSms: {
        return true;
    }
        break;
    
    case typeAuthCodeTypeCall: {
        return true;
    }
        break;
    
    case typeAuthCodeTypeFlashCall: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> AuthCodeType::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeAuthCodeTypeSms: {
        result["classType"] = "AuthCodeType::typeAuthCodeTypeSms";
        return result;
    }
        break;
    
    case typeAuthCodeTypeCall: {
        result["classType"] = "AuthCodeType::typeAuthCodeTypeCall";
        return result;
    }
        break;
    
    case typeAuthCodeTypeFlashCall: {
        result["classType"] = "AuthCodeType::typeAuthCodeTypeFlashCall";
        return result;
    }
        break;
    
    default:
        return result;
    }
}

AuthCodeType AuthCodeType::fromMap(const QMap<QString, QVariant> &map) {
    AuthCodeType result;
    if(map.value("classType").toString() == "AuthCodeType::typeAuthCodeTypeSms") {
        result.setClassType(typeAuthCodeTypeSms);
        return result;
    }
    if(map.value("classType").toString() == "AuthCodeType::typeAuthCodeTypeCall") {
        result.setClassType(typeAuthCodeTypeCall);
        return result;
    }
    if(map.value("classType").toString() == "AuthCodeType::typeAuthCodeTypeFlashCall") {
        result.setClassType(typeAuthCodeTypeFlashCall);
        return result;
    }
    return result;
}

QByteArray AuthCodeType::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const AuthCodeType &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AuthCodeType::typeAuthCodeTypeSms:
        
        break;
    case AuthCodeType::typeAuthCodeTypeCall:
        
        break;
    case AuthCodeType::typeAuthCodeTypeFlashCall:
        
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, AuthCodeType &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AuthCodeType::AuthCodeTypeClassType>(type));
    switch(type) {
    case AuthCodeType::typeAuthCodeTypeSms: {
        
    }
        break;
    case AuthCodeType::typeAuthCodeTypeCall: {
        
    }
        break;
    case AuthCodeType::typeAuthCodeTypeFlashCall: {
        
    }
        break;
    }
    return stream;
}

