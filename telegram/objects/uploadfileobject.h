// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_UPLOADFILE_OBJECT
#define LQTG_TYPE_UPLOADFILE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/uploadfile.h"

#include <QPointer>
#include "storagefiletypeobject.h"

class LIBQTELEGRAMSHARED_EXPORT UploadFileObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(UploadFileClassType)
    Q_PROPERTY(QByteArray bytes READ bytes WRITE setBytes NOTIFY bytesChanged)
    Q_PROPERTY(qint32 mtime READ mtime WRITE setMtime NOTIFY mtimeChanged)
    Q_PROPERTY(StorageFileTypeObject* type READ type WRITE setType NOTIFY typeChanged)
    Q_PROPERTY(UploadFile core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum UploadFileClassType {
        TypeUploadFile
    };

    UploadFileObject(const UploadFile &core, QObject *parent = 0);
    UploadFileObject(QObject *parent = 0);
    virtual ~UploadFileObject();

    void setBytes(const QByteArray &bytes);
    QByteArray bytes() const;

    void setMtime(qint32 mtime);
    qint32 mtime() const;

    void setType(StorageFileTypeObject* type);
    StorageFileTypeObject* type() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const UploadFile &core);
    UploadFile core() const;

    UploadFileObject &operator =(const UploadFile &b);
    bool operator ==(const UploadFile &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void bytesChanged();
    void mtimeChanged();
    void typeChanged();

private Q_SLOTS:
    void coreTypeChanged();

private:
    QPointer<StorageFileTypeObject> m_type;
    UploadFile m_core;
};

inline UploadFileObject::UploadFileObject(const UploadFile &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_type(0),
    m_core(core)
{
    m_type = new StorageFileTypeObject(m_core.type(), this);
    connect(m_type.data(), &StorageFileTypeObject::coreChanged, this, &UploadFileObject::coreTypeChanged);
}

inline UploadFileObject::UploadFileObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_type(0),
    m_core()
{
    m_type = new StorageFileTypeObject(m_core.type(), this);
    connect(m_type.data(), &StorageFileTypeObject::coreChanged, this, &UploadFileObject::coreTypeChanged);
}

inline UploadFileObject::~UploadFileObject() {
}

inline void UploadFileObject::setBytes(const QByteArray &bytes) {
    if(m_core.bytes() == bytes) return;
    m_core.setBytes(bytes);
    Q_EMIT bytesChanged();
    Q_EMIT coreChanged();
}

inline QByteArray UploadFileObject::bytes() const {
    return m_core.bytes();
}

inline void UploadFileObject::setMtime(qint32 mtime) {
    if(m_core.mtime() == mtime) return;
    m_core.setMtime(mtime);
    Q_EMIT mtimeChanged();
    Q_EMIT coreChanged();
}

inline qint32 UploadFileObject::mtime() const {
    return m_core.mtime();
}

inline void UploadFileObject::setType(StorageFileTypeObject* type) {
    if(m_type == type) return;
    if(m_type) delete m_type;
    m_type = type;
    if(m_type) {
        m_type->setParent(this);
        m_core.setType(m_type->core());
        connect(m_type.data(), &StorageFileTypeObject::coreChanged, this, &UploadFileObject::coreTypeChanged);
    }
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

inline StorageFileTypeObject*  UploadFileObject::type() const {
    return m_type;
}

inline UploadFileObject &UploadFileObject::operator =(const UploadFile &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_type->setCore(b.type());

    Q_EMIT bytesChanged();
    Q_EMIT mtimeChanged();
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool UploadFileObject::operator ==(const UploadFile &b) const {
    return m_core == b;
}

inline void UploadFileObject::setClassType(quint32 classType) {
    UploadFile::UploadFileClassType result;
    switch(classType) {
    case TypeUploadFile:
        result = UploadFile::typeUploadFile;
        break;
    default:
        result = UploadFile::typeUploadFile;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 UploadFileObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case UploadFile::typeUploadFile:
        result = TypeUploadFile;
        break;
    default:
        result = TypeUploadFile;
        break;
    }

    return result;
}

inline void UploadFileObject::setCore(const UploadFile &core) {
    operator =(core);
}

inline UploadFile UploadFileObject::core() const {
    return m_core;
}

inline void UploadFileObject::coreTypeChanged() {
    if(m_core.type() == m_type->core()) return;
    m_core.setType(m_type->core());
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_UPLOADFILE_OBJECT
