// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONFIG_OBJECT
#define LQTG_TYPE_CONFIG_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/config.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ConfigObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ConfigType)
    Q_PROPERTY(qint32 chatBigSize READ chatBigSize WRITE setChatBigSize NOTIFY chatBigSizeChanged)
    Q_PROPERTY(qint32 chatSizeMax READ chatSizeMax WRITE setChatSizeMax NOTIFY chatSizeMaxChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(QList<DcOption> dcOptions READ dcOptions WRITE setDcOptions NOTIFY dcOptionsChanged)
    Q_PROPERTY(QList<DisabledFeature> disabledFeatures READ disabledFeatures WRITE setDisabledFeatures NOTIFY disabledFeaturesChanged)
    Q_PROPERTY(qint32 editTimeLimit READ editTimeLimit WRITE setEditTimeLimit NOTIFY editTimeLimitChanged)
    Q_PROPERTY(qint32 expires READ expires WRITE setExpires NOTIFY expiresChanged)
    Q_PROPERTY(qint32 forwardedCountMax READ forwardedCountMax WRITE setForwardedCountMax NOTIFY forwardedCountMaxChanged)
    Q_PROPERTY(qint32 megagroupSizeMax READ megagroupSizeMax WRITE setMegagroupSizeMax NOTIFY megagroupSizeMaxChanged)
    Q_PROPERTY(qint32 notifyCloudDelayMs READ notifyCloudDelayMs WRITE setNotifyCloudDelayMs NOTIFY notifyCloudDelayMsChanged)
    Q_PROPERTY(qint32 notifyDefaultDelayMs READ notifyDefaultDelayMs WRITE setNotifyDefaultDelayMs NOTIFY notifyDefaultDelayMsChanged)
    Q_PROPERTY(qint32 offlineBlurTimeoutMs READ offlineBlurTimeoutMs WRITE setOfflineBlurTimeoutMs NOTIFY offlineBlurTimeoutMsChanged)
    Q_PROPERTY(qint32 offlineIdleTimeoutMs READ offlineIdleTimeoutMs WRITE setOfflineIdleTimeoutMs NOTIFY offlineIdleTimeoutMsChanged)
    Q_PROPERTY(qint32 onlineCloudTimeoutMs READ onlineCloudTimeoutMs WRITE setOnlineCloudTimeoutMs NOTIFY onlineCloudTimeoutMsChanged)
    Q_PROPERTY(qint32 onlineUpdatePeriodMs READ onlineUpdatePeriodMs WRITE setOnlineUpdatePeriodMs NOTIFY onlineUpdatePeriodMsChanged)
    Q_PROPERTY(qint32 pushChatLimit READ pushChatLimit WRITE setPushChatLimit NOTIFY pushChatLimitChanged)
    Q_PROPERTY(qint32 pushChatPeriodMs READ pushChatPeriodMs WRITE setPushChatPeriodMs NOTIFY pushChatPeriodMsChanged)
    Q_PROPERTY(qint32 savedGifsLimit READ savedGifsLimit WRITE setSavedGifsLimit NOTIFY savedGifsLimitChanged)
    Q_PROPERTY(bool testMode READ testMode WRITE setTestMode NOTIFY testModeChanged)
    Q_PROPERTY(qint32 thisDc READ thisDc WRITE setThisDc NOTIFY thisDcChanged)
    Q_PROPERTY(Config core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ConfigType {
        TypeConfig
    };

    ConfigObject(const Config &core, QObject *parent = 0);
    ConfigObject(QObject *parent = 0);
    virtual ~ConfigObject();

    void setChatBigSize(qint32 chatBigSize);
    qint32 chatBigSize() const;

    void setChatSizeMax(qint32 chatSizeMax);
    qint32 chatSizeMax() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setDcOptions(const QList<DcOption> &dcOptions);
    QList<DcOption> dcOptions() const;

    void setDisabledFeatures(const QList<DisabledFeature> &disabledFeatures);
    QList<DisabledFeature> disabledFeatures() const;

    void setEditTimeLimit(qint32 editTimeLimit);
    qint32 editTimeLimit() const;

    void setExpires(qint32 expires);
    qint32 expires() const;

    void setForwardedCountMax(qint32 forwardedCountMax);
    qint32 forwardedCountMax() const;

    void setMegagroupSizeMax(qint32 megagroupSizeMax);
    qint32 megagroupSizeMax() const;

    void setNotifyCloudDelayMs(qint32 notifyCloudDelayMs);
    qint32 notifyCloudDelayMs() const;

    void setNotifyDefaultDelayMs(qint32 notifyDefaultDelayMs);
    qint32 notifyDefaultDelayMs() const;

    void setOfflineBlurTimeoutMs(qint32 offlineBlurTimeoutMs);
    qint32 offlineBlurTimeoutMs() const;

    void setOfflineIdleTimeoutMs(qint32 offlineIdleTimeoutMs);
    qint32 offlineIdleTimeoutMs() const;

    void setOnlineCloudTimeoutMs(qint32 onlineCloudTimeoutMs);
    qint32 onlineCloudTimeoutMs() const;

    void setOnlineUpdatePeriodMs(qint32 onlineUpdatePeriodMs);
    qint32 onlineUpdatePeriodMs() const;

    void setPushChatLimit(qint32 pushChatLimit);
    qint32 pushChatLimit() const;

    void setPushChatPeriodMs(qint32 pushChatPeriodMs);
    qint32 pushChatPeriodMs() const;

    void setSavedGifsLimit(qint32 savedGifsLimit);
    qint32 savedGifsLimit() const;

    void setTestMode(bool testMode);
    bool testMode() const;

    void setThisDc(qint32 thisDc);
    qint32 thisDc() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const Config &core);
    Config core() const;

    ConfigObject &operator =(const Config &b);
    bool operator ==(const Config &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatBigSizeChanged();
    void chatSizeMaxChanged();
    void dateChanged();
    void dcOptionsChanged();
    void disabledFeaturesChanged();
    void editTimeLimitChanged();
    void expiresChanged();
    void forwardedCountMaxChanged();
    void megagroupSizeMaxChanged();
    void notifyCloudDelayMsChanged();
    void notifyDefaultDelayMsChanged();
    void offlineBlurTimeoutMsChanged();
    void offlineIdleTimeoutMsChanged();
    void onlineCloudTimeoutMsChanged();
    void onlineUpdatePeriodMsChanged();
    void pushChatLimitChanged();
    void pushChatPeriodMsChanged();
    void savedGifsLimitChanged();
    void testModeChanged();
    void thisDcChanged();

private Q_SLOTS:

private:
    Config m_core;
};

#endif // LQTG_TYPE_CONFIG_OBJECT
