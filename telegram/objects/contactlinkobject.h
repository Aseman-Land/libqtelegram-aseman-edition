// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTLINK_OBJECT
#define LQTG_TYPE_CONTACTLINK_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactlink.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ContactLinkObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactLinkClassType)
    Q_PROPERTY(ContactLink core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactLinkClassType {
        TypeContactLinkUnknown,
        TypeContactLinkNone,
        TypeContactLinkHasPhone,
        TypeContactLinkContact
    };

    ContactLinkObject(const ContactLink &core, QObject *parent = 0);
    ContactLinkObject(QObject *parent = 0);
    virtual ~ContactLinkObject();

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactLink &core);
    ContactLink core() const;

    ContactLinkObject &operator =(const ContactLink &b);
    bool operator ==(const ContactLink &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();

private Q_SLOTS:

private:
    ContactLink m_core;
};

inline ContactLinkObject::ContactLinkObject(const ContactLink &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ContactLinkObject::ContactLinkObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ContactLinkObject::~ContactLinkObject() {
}

inline ContactLinkObject &ContactLinkObject::operator =(const ContactLink &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactLinkObject::operator ==(const ContactLink &b) const {
    return m_core == b;
}

inline void ContactLinkObject::setClassType(quint32 classType) {
    ContactLink::ContactLinkClassType result;
    switch(classType) {
    case TypeContactLinkUnknown:
        result = ContactLink::typeContactLinkUnknown;
        break;
    case TypeContactLinkNone:
        result = ContactLink::typeContactLinkNone;
        break;
    case TypeContactLinkHasPhone:
        result = ContactLink::typeContactLinkHasPhone;
        break;
    case TypeContactLinkContact:
        result = ContactLink::typeContactLinkContact;
        break;
    default:
        result = ContactLink::typeContactLinkUnknown;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactLinkObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactLink::typeContactLinkUnknown:
        result = TypeContactLinkUnknown;
        break;
    case ContactLink::typeContactLinkNone:
        result = TypeContactLinkNone;
        break;
    case ContactLink::typeContactLinkHasPhone:
        result = TypeContactLinkHasPhone;
        break;
    case ContactLink::typeContactLinkContact:
        result = TypeContactLinkContact;
        break;
    default:
        result = TypeContactLinkUnknown;
        break;
    }

    return result;
}

inline void ContactLinkObject::setCore(const ContactLink &core) {
    operator =(core);
}

inline ContactLink ContactLinkObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CONTACTLINK_OBJECT
