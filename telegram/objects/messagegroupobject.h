// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGEGROUP_OBJECT
#define LQTG_TYPE_MESSAGEGROUP_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/messagegroup.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT MessageGroupObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(MessageGroupClassType)
    Q_PROPERTY(qint32 count READ count WRITE setCount NOTIFY countChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(qint32 maxId READ maxId WRITE setMaxId NOTIFY maxIdChanged)
    Q_PROPERTY(qint32 minId READ minId WRITE setMinId NOTIFY minIdChanged)
    Q_PROPERTY(MessageGroup core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum MessageGroupClassType {
        TypeMessageGroup
    };

    MessageGroupObject(const MessageGroup &core, QObject *parent = 0);
    MessageGroupObject(QObject *parent = 0);
    virtual ~MessageGroupObject();

    void setCount(qint32 count);
    qint32 count() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setMaxId(qint32 maxId);
    qint32 maxId() const;

    void setMinId(qint32 minId);
    qint32 minId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const MessageGroup &core);
    MessageGroup core() const;

    MessageGroupObject &operator =(const MessageGroup &b);
    bool operator ==(const MessageGroup &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void countChanged();
    void dateChanged();
    void maxIdChanged();
    void minIdChanged();

private Q_SLOTS:

private:
    MessageGroup m_core;
};

inline MessageGroupObject::MessageGroupObject(const MessageGroup &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline MessageGroupObject::MessageGroupObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline MessageGroupObject::~MessageGroupObject() {
}

inline void MessageGroupObject::setCount(qint32 count) {
    if(m_core.count() == count) return;
    m_core.setCount(count);
    Q_EMIT countChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessageGroupObject::count() const {
    return m_core.count();
}

inline void MessageGroupObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessageGroupObject::date() const {
    return m_core.date();
}

inline void MessageGroupObject::setMaxId(qint32 maxId) {
    if(m_core.maxId() == maxId) return;
    m_core.setMaxId(maxId);
    Q_EMIT maxIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessageGroupObject::maxId() const {
    return m_core.maxId();
}

inline void MessageGroupObject::setMinId(qint32 minId) {
    if(m_core.minId() == minId) return;
    m_core.setMinId(minId);
    Q_EMIT minIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessageGroupObject::minId() const {
    return m_core.minId();
}

inline MessageGroupObject &MessageGroupObject::operator =(const MessageGroup &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT countChanged();
    Q_EMIT dateChanged();
    Q_EMIT maxIdChanged();
    Q_EMIT minIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool MessageGroupObject::operator ==(const MessageGroup &b) const {
    return m_core == b;
}

inline void MessageGroupObject::setClassType(quint32 classType) {
    MessageGroup::MessageGroupClassType result;
    switch(classType) {
    case TypeMessageGroup:
        result = MessageGroup::typeMessageGroup;
        break;
    default:
        result = MessageGroup::typeMessageGroup;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 MessageGroupObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessageGroup::typeMessageGroup:
        result = TypeMessageGroup;
        break;
    default:
        result = TypeMessageGroup;
        break;
    }

    return result;
}

inline void MessageGroupObject::setCore(const MessageGroup &core) {
    operator =(core);
}

inline MessageGroup MessageGroupObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_MESSAGEGROUP_OBJECT
