// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "messagessavedgifs.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

MessagesSavedGifs::MessagesSavedGifs(MessagesSavedGifsType classType, InboundPkt *in) :
    m_hash(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

MessagesSavedGifs::MessagesSavedGifs(InboundPkt *in) :
    m_hash(0),
    m_classType(typeMessagesSavedGifsNotModified)
{
    fetch(in);
}

MessagesSavedGifs::MessagesSavedGifs(const Null &null) :
    TelegramTypeObject(null),
    m_hash(0),
    m_classType(typeMessagesSavedGifsNotModified)
{
}

MessagesSavedGifs::~MessagesSavedGifs() {
}

void MessagesSavedGifs::setGifs(const QList<Document> &gifs) {
    m_gifs = gifs;
}

QList<Document> MessagesSavedGifs::gifs() const {
    return m_gifs;
}

void MessagesSavedGifs::setHash(qint32 hash) {
    m_hash = hash;
}

qint32 MessagesSavedGifs::hash() const {
    return m_hash;
}

bool MessagesSavedGifs::operator ==(const MessagesSavedGifs &b) const {
    return m_classType == b.m_classType &&
           m_gifs == b.m_gifs &&
           m_hash == b.m_hash;
}

void MessagesSavedGifs::setClassType(MessagesSavedGifs::MessagesSavedGifsType classType) {
    m_classType = classType;
}

MessagesSavedGifs::MessagesSavedGifsType MessagesSavedGifs::classType() const {
    return m_classType;
}

bool MessagesSavedGifs::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeMessagesSavedGifsNotModified: {
        m_classType = static_cast<MessagesSavedGifsType>(x);
        return true;
    }
        break;
    
    case typeMessagesSavedGifs: {
        m_hash = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_gifs_length = in->fetchInt();
        m_gifs.clear();
        for (qint32 i = 0; i < m_gifs_length; i++) {
            Document type;
            type.fetch(in);
            m_gifs.append(type);
        }
        m_classType = static_cast<MessagesSavedGifsType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool MessagesSavedGifs::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeMessagesSavedGifsNotModified: {
        return true;
    }
        break;
    
    case typeMessagesSavedGifs: {
        out->appendInt(m_hash);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_gifs.count());
        for (qint32 i = 0; i < m_gifs.count(); i++) {
            m_gifs[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray MessagesSavedGifs::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const MessagesSavedGifs &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case MessagesSavedGifs::typeMessagesSavedGifsNotModified:
        
        break;
    case MessagesSavedGifs::typeMessagesSavedGifs:
        stream << item.hash();
        stream << item.gifs();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, MessagesSavedGifs &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<MessagesSavedGifs::MessagesSavedGifsType>(type));
    switch(type) {
    case MessagesSavedGifs::typeMessagesSavedGifsNotModified: {
        
    }
        break;
    case MessagesSavedGifs::typeMessagesSavedGifs: {
        qint32 m_hash;
        stream >> m_hash;
        item.setHash(m_hash);
        QList<Document> m_gifs;
        stream >> m_gifs;
        item.setGifs(m_gifs);
    }
        break;
    }
    return stream;
}

