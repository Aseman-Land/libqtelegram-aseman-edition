// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTBOTINLINERESULT_OBJECT
#define LQTG_TYPE_INPUTBOTINLINERESULT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputbotinlineresult.h"

#include <QPointer>
#include "inputdocumentobject.h"
#include "inputphotoobject.h"
#include "inputbotinlinemessageobject.h"

class LIBQTELEGRAMSHARED_EXPORT InputBotInlineResultObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputBotInlineResultClassType)
    Q_PROPERTY(QString contentType READ contentType WRITE setContentType NOTIFY contentTypeChanged)
    Q_PROPERTY(QString contentUrl READ contentUrl WRITE setContentUrl NOTIFY contentUrlChanged)
    Q_PROPERTY(QString description READ description WRITE setDescription NOTIFY descriptionChanged)
    Q_PROPERTY(InputDocumentObject* document READ document WRITE setDocument NOTIFY documentChanged)
    Q_PROPERTY(qint32 duration READ duration WRITE setDuration NOTIFY durationChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(qint32 h READ h WRITE setH NOTIFY hChanged)
    Q_PROPERTY(QString id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(InputPhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(InputBotInlineMessageObject* sendMessage READ sendMessage WRITE setSendMessage NOTIFY sendMessageChanged)
    Q_PROPERTY(QString thumbUrl READ thumbUrl WRITE setThumbUrl NOTIFY thumbUrlChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(QString type READ type WRITE setType NOTIFY typeChanged)
    Q_PROPERTY(QString url READ url WRITE setUrl NOTIFY urlChanged)
    Q_PROPERTY(qint32 w READ w WRITE setW NOTIFY wChanged)
    Q_PROPERTY(InputBotInlineResult core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputBotInlineResultClassType {
        TypeInputBotInlineResult,
        TypeInputBotInlineResultPhoto,
        TypeInputBotInlineResultDocument
    };

    InputBotInlineResultObject(const InputBotInlineResult &core, QObject *parent = 0);
    InputBotInlineResultObject(QObject *parent = 0);
    virtual ~InputBotInlineResultObject();

    void setContentType(const QString &contentType);
    QString contentType() const;

    void setContentUrl(const QString &contentUrl);
    QString contentUrl() const;

    void setDescription(const QString &description);
    QString description() const;

    void setDocument(InputDocumentObject* document);
    InputDocumentObject* document() const;

    void setDuration(qint32 duration);
    qint32 duration() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setH(qint32 h);
    qint32 h() const;

    void setId(const QString &id);
    QString id() const;

    void setPhoto(InputPhotoObject* photo);
    InputPhotoObject* photo() const;

    void setSendMessage(InputBotInlineMessageObject* sendMessage);
    InputBotInlineMessageObject* sendMessage() const;

    void setThumbUrl(const QString &thumbUrl);
    QString thumbUrl() const;

    void setTitle(const QString &title);
    QString title() const;

    void setType(const QString &type);
    QString type() const;

    void setUrl(const QString &url);
    QString url() const;

    void setW(qint32 w);
    qint32 w() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputBotInlineResult &core);
    InputBotInlineResult core() const;

    InputBotInlineResultObject &operator =(const InputBotInlineResult &b);
    bool operator ==(const InputBotInlineResult &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void contentTypeChanged();
    void contentUrlChanged();
    void descriptionChanged();
    void documentChanged();
    void durationChanged();
    void flagsChanged();
    void hChanged();
    void idChanged();
    void photoChanged();
    void sendMessageChanged();
    void thumbUrlChanged();
    void titleChanged();
    void typeChanged();
    void urlChanged();
    void wChanged();

private Q_SLOTS:
    void coreDocumentChanged();
    void corePhotoChanged();
    void coreSendMessageChanged();

private:
    QPointer<InputDocumentObject> m_document;
    QPointer<InputPhotoObject> m_photo;
    QPointer<InputBotInlineMessageObject> m_sendMessage;
    InputBotInlineResult m_core;
};

inline InputBotInlineResultObject::InputBotInlineResultObject(const InputBotInlineResult &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_document(0),
    m_photo(0),
    m_sendMessage(0),
    m_core(core)
{
    m_document = new InputDocumentObject(m_core.document(), this);
    connect(m_document.data(), &InputDocumentObject::coreChanged, this, &InputBotInlineResultObject::coreDocumentChanged);
    m_photo = new InputPhotoObject(m_core.photo(), this);
    connect(m_photo.data(), &InputPhotoObject::coreChanged, this, &InputBotInlineResultObject::corePhotoChanged);
    m_sendMessage = new InputBotInlineMessageObject(m_core.sendMessage(), this);
    connect(m_sendMessage.data(), &InputBotInlineMessageObject::coreChanged, this, &InputBotInlineResultObject::coreSendMessageChanged);
}

inline InputBotInlineResultObject::InputBotInlineResultObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_document(0),
    m_photo(0),
    m_sendMessage(0),
    m_core()
{
    m_document = new InputDocumentObject(m_core.document(), this);
    connect(m_document.data(), &InputDocumentObject::coreChanged, this, &InputBotInlineResultObject::coreDocumentChanged);
    m_photo = new InputPhotoObject(m_core.photo(), this);
    connect(m_photo.data(), &InputPhotoObject::coreChanged, this, &InputBotInlineResultObject::corePhotoChanged);
    m_sendMessage = new InputBotInlineMessageObject(m_core.sendMessage(), this);
    connect(m_sendMessage.data(), &InputBotInlineMessageObject::coreChanged, this, &InputBotInlineResultObject::coreSendMessageChanged);
}

inline InputBotInlineResultObject::~InputBotInlineResultObject() {
}

inline void InputBotInlineResultObject::setContentType(const QString &contentType) {
    if(m_core.contentType() == contentType) return;
    m_core.setContentType(contentType);
    Q_EMIT contentTypeChanged();
    Q_EMIT coreChanged();
}

inline QString InputBotInlineResultObject::contentType() const {
    return m_core.contentType();
}

inline void InputBotInlineResultObject::setContentUrl(const QString &contentUrl) {
    if(m_core.contentUrl() == contentUrl) return;
    m_core.setContentUrl(contentUrl);
    Q_EMIT contentUrlChanged();
    Q_EMIT coreChanged();
}

inline QString InputBotInlineResultObject::contentUrl() const {
    return m_core.contentUrl();
}

inline void InputBotInlineResultObject::setDescription(const QString &description) {
    if(m_core.description() == description) return;
    m_core.setDescription(description);
    Q_EMIT descriptionChanged();
    Q_EMIT coreChanged();
}

inline QString InputBotInlineResultObject::description() const {
    return m_core.description();
}

inline void InputBotInlineResultObject::setDocument(InputDocumentObject* document) {
    if(m_document == document) return;
    if(m_document) delete m_document;
    m_document = document;
    if(m_document) {
        m_document->setParent(this);
        m_core.setDocument(m_document->core());
        connect(m_document.data(), &InputDocumentObject::coreChanged, this, &InputBotInlineResultObject::coreDocumentChanged);
    }
    Q_EMIT documentChanged();
    Q_EMIT coreChanged();
}

inline InputDocumentObject*  InputBotInlineResultObject::document() const {
    return m_document;
}

inline void InputBotInlineResultObject::setDuration(qint32 duration) {
    if(m_core.duration() == duration) return;
    m_core.setDuration(duration);
    Q_EMIT durationChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputBotInlineResultObject::duration() const {
    return m_core.duration();
}

inline void InputBotInlineResultObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputBotInlineResultObject::flags() const {
    return m_core.flags();
}

inline void InputBotInlineResultObject::setH(qint32 h) {
    if(m_core.h() == h) return;
    m_core.setH(h);
    Q_EMIT hChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputBotInlineResultObject::h() const {
    return m_core.h();
}

inline void InputBotInlineResultObject::setId(const QString &id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline QString InputBotInlineResultObject::id() const {
    return m_core.id();
}

inline void InputBotInlineResultObject::setPhoto(InputPhotoObject* photo) {
    if(m_photo == photo) return;
    if(m_photo) delete m_photo;
    m_photo = photo;
    if(m_photo) {
        m_photo->setParent(this);
        m_core.setPhoto(m_photo->core());
        connect(m_photo.data(), &InputPhotoObject::coreChanged, this, &InputBotInlineResultObject::corePhotoChanged);
    }
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

inline InputPhotoObject*  InputBotInlineResultObject::photo() const {
    return m_photo;
}

inline void InputBotInlineResultObject::setSendMessage(InputBotInlineMessageObject* sendMessage) {
    if(m_sendMessage == sendMessage) return;
    if(m_sendMessage) delete m_sendMessage;
    m_sendMessage = sendMessage;
    if(m_sendMessage) {
        m_sendMessage->setParent(this);
        m_core.setSendMessage(m_sendMessage->core());
        connect(m_sendMessage.data(), &InputBotInlineMessageObject::coreChanged, this, &InputBotInlineResultObject::coreSendMessageChanged);
    }
    Q_EMIT sendMessageChanged();
    Q_EMIT coreChanged();
}

inline InputBotInlineMessageObject*  InputBotInlineResultObject::sendMessage() const {
    return m_sendMessage;
}

inline void InputBotInlineResultObject::setThumbUrl(const QString &thumbUrl) {
    if(m_core.thumbUrl() == thumbUrl) return;
    m_core.setThumbUrl(thumbUrl);
    Q_EMIT thumbUrlChanged();
    Q_EMIT coreChanged();
}

inline QString InputBotInlineResultObject::thumbUrl() const {
    return m_core.thumbUrl();
}

inline void InputBotInlineResultObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

inline QString InputBotInlineResultObject::title() const {
    return m_core.title();
}

inline void InputBotInlineResultObject::setType(const QString &type) {
    if(m_core.type() == type) return;
    m_core.setType(type);
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

inline QString InputBotInlineResultObject::type() const {
    return m_core.type();
}

inline void InputBotInlineResultObject::setUrl(const QString &url) {
    if(m_core.url() == url) return;
    m_core.setUrl(url);
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
}

inline QString InputBotInlineResultObject::url() const {
    return m_core.url();
}

inline void InputBotInlineResultObject::setW(qint32 w) {
    if(m_core.w() == w) return;
    m_core.setW(w);
    Q_EMIT wChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputBotInlineResultObject::w() const {
    return m_core.w();
}

inline InputBotInlineResultObject &InputBotInlineResultObject::operator =(const InputBotInlineResult &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_document->setCore(b.document());
    m_photo->setCore(b.photo());
    m_sendMessage->setCore(b.sendMessage());

    Q_EMIT contentTypeChanged();
    Q_EMIT contentUrlChanged();
    Q_EMIT descriptionChanged();
    Q_EMIT documentChanged();
    Q_EMIT durationChanged();
    Q_EMIT flagsChanged();
    Q_EMIT hChanged();
    Q_EMIT idChanged();
    Q_EMIT photoChanged();
    Q_EMIT sendMessageChanged();
    Q_EMIT thumbUrlChanged();
    Q_EMIT titleChanged();
    Q_EMIT typeChanged();
    Q_EMIT urlChanged();
    Q_EMIT wChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputBotInlineResultObject::operator ==(const InputBotInlineResult &b) const {
    return m_core == b;
}

inline void InputBotInlineResultObject::setClassType(quint32 classType) {
    InputBotInlineResult::InputBotInlineResultClassType result;
    switch(classType) {
    case TypeInputBotInlineResult:
        result = InputBotInlineResult::typeInputBotInlineResult;
        break;
    case TypeInputBotInlineResultPhoto:
        result = InputBotInlineResult::typeInputBotInlineResultPhoto;
        break;
    case TypeInputBotInlineResultDocument:
        result = InputBotInlineResult::typeInputBotInlineResultDocument;
        break;
    default:
        result = InputBotInlineResult::typeInputBotInlineResult;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputBotInlineResultObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputBotInlineResult::typeInputBotInlineResult:
        result = TypeInputBotInlineResult;
        break;
    case InputBotInlineResult::typeInputBotInlineResultPhoto:
        result = TypeInputBotInlineResultPhoto;
        break;
    case InputBotInlineResult::typeInputBotInlineResultDocument:
        result = TypeInputBotInlineResultDocument;
        break;
    default:
        result = TypeInputBotInlineResult;
        break;
    }

    return result;
}

inline void InputBotInlineResultObject::setCore(const InputBotInlineResult &core) {
    operator =(core);
}

inline InputBotInlineResult InputBotInlineResultObject::core() const {
    return m_core;
}

inline void InputBotInlineResultObject::coreDocumentChanged() {
    if(m_core.document() == m_document->core()) return;
    m_core.setDocument(m_document->core());
    Q_EMIT documentChanged();
    Q_EMIT coreChanged();
}

inline void InputBotInlineResultObject::corePhotoChanged() {
    if(m_core.photo() == m_photo->core()) return;
    m_core.setPhoto(m_photo->core());
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

inline void InputBotInlineResultObject::coreSendMessageChanged() {
    if(m_core.sendMessage() == m_sendMessage->core()) return;
    m_core.setSendMessage(m_sendMessage->core());
    Q_EMIT sendMessageChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_INPUTBOTINLINERESULT_OBJECT
