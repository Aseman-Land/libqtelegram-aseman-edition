// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "storagefiletype.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

StorageFileType::StorageFileType(StorageFileTypeType classType, InboundPkt *in) :
    m_classType(classType)
{
    if(in) fetch(in);
}

StorageFileType::StorageFileType(InboundPkt *in) :
    m_classType(typeStorageFileUnknown)
{
    fetch(in);
}

StorageFileType::StorageFileType(const Null &null) :
    TelegramTypeObject(null),
    m_classType(typeStorageFileUnknown)
{
}

StorageFileType::~StorageFileType() {
}

bool StorageFileType::operator ==(const StorageFileType &b) const {
    return m_classType == b.m_classType;
}

void StorageFileType::setClassType(StorageFileType::StorageFileTypeType classType) {
    m_classType = classType;
}

StorageFileType::StorageFileTypeType StorageFileType::classType() const {
    return m_classType;
}

bool StorageFileType::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeStorageFileUnknown: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileJpeg: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileGif: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFilePng: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFilePdf: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileMp3: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileMov: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFilePartial: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileMp4: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    case typeStorageFileWebp: {
        m_classType = static_cast<StorageFileTypeType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool StorageFileType::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeStorageFileUnknown: {
        return true;
    }
        break;
    
    case typeStorageFileJpeg: {
        return true;
    }
        break;
    
    case typeStorageFileGif: {
        return true;
    }
        break;
    
    case typeStorageFilePng: {
        return true;
    }
        break;
    
    case typeStorageFilePdf: {
        return true;
    }
        break;
    
    case typeStorageFileMp3: {
        return true;
    }
        break;
    
    case typeStorageFileMov: {
        return true;
    }
        break;
    
    case typeStorageFilePartial: {
        return true;
    }
        break;
    
    case typeStorageFileMp4: {
        return true;
    }
        break;
    
    case typeStorageFileWebp: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray StorageFileType::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const StorageFileType &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case StorageFileType::typeStorageFileUnknown:
        
        break;
    case StorageFileType::typeStorageFileJpeg:
        
        break;
    case StorageFileType::typeStorageFileGif:
        
        break;
    case StorageFileType::typeStorageFilePng:
        
        break;
    case StorageFileType::typeStorageFilePdf:
        
        break;
    case StorageFileType::typeStorageFileMp3:
        
        break;
    case StorageFileType::typeStorageFileMov:
        
        break;
    case StorageFileType::typeStorageFilePartial:
        
        break;
    case StorageFileType::typeStorageFileMp4:
        
        break;
    case StorageFileType::typeStorageFileWebp:
        
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, StorageFileType &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<StorageFileType::StorageFileTypeType>(type));
    switch(type) {
    case StorageFileType::typeStorageFileUnknown: {
        
    }
        break;
    case StorageFileType::typeStorageFileJpeg: {
        
    }
        break;
    case StorageFileType::typeStorageFileGif: {
        
    }
        break;
    case StorageFileType::typeStorageFilePng: {
        
    }
        break;
    case StorageFileType::typeStorageFilePdf: {
        
    }
        break;
    case StorageFileType::typeStorageFileMp3: {
        
    }
        break;
    case StorageFileType::typeStorageFileMov: {
        
    }
        break;
    case StorageFileType::typeStorageFilePartial: {
        
    }
        break;
    case StorageFileType::typeStorageFileMp4: {
        
    }
        break;
    case StorageFileType::typeStorageFileWebp: {
        
    }
        break;
    }
    return stream;
}

