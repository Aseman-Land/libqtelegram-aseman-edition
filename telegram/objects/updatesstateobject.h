// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_UPDATESSTATE_OBJECT
#define LQTG_TYPE_UPDATESSTATE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/updatesstate.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT UpdatesStateObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(UpdatesStateClassType)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(qint32 pts READ pts WRITE setPts NOTIFY ptsChanged)
    Q_PROPERTY(qint32 qts READ qts WRITE setQts NOTIFY qtsChanged)
    Q_PROPERTY(qint32 seq READ seq WRITE setSeq NOTIFY seqChanged)
    Q_PROPERTY(qint32 unreadCount READ unreadCount WRITE setUnreadCount NOTIFY unreadCountChanged)
    Q_PROPERTY(UpdatesState core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum UpdatesStateClassType {
        TypeUpdatesState
    };

    UpdatesStateObject(const UpdatesState &core, QObject *parent = 0);
    UpdatesStateObject(QObject *parent = 0);
    virtual ~UpdatesStateObject();

    void setDate(qint32 date);
    qint32 date() const;

    void setPts(qint32 pts);
    qint32 pts() const;

    void setQts(qint32 qts);
    qint32 qts() const;

    void setSeq(qint32 seq);
    qint32 seq() const;

    void setUnreadCount(qint32 unreadCount);
    qint32 unreadCount() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const UpdatesState &core);
    UpdatesState core() const;

    UpdatesStateObject &operator =(const UpdatesState &b);
    bool operator ==(const UpdatesState &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void dateChanged();
    void ptsChanged();
    void qtsChanged();
    void seqChanged();
    void unreadCountChanged();

private Q_SLOTS:

private:
    UpdatesState m_core;
};

inline UpdatesStateObject::UpdatesStateObject(const UpdatesState &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline UpdatesStateObject::UpdatesStateObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline UpdatesStateObject::~UpdatesStateObject() {
}

inline void UpdatesStateObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesStateObject::date() const {
    return m_core.date();
}

inline void UpdatesStateObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesStateObject::pts() const {
    return m_core.pts();
}

inline void UpdatesStateObject::setQts(qint32 qts) {
    if(m_core.qts() == qts) return;
    m_core.setQts(qts);
    Q_EMIT qtsChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesStateObject::qts() const {
    return m_core.qts();
}

inline void UpdatesStateObject::setSeq(qint32 seq) {
    if(m_core.seq() == seq) return;
    m_core.setSeq(seq);
    Q_EMIT seqChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesStateObject::seq() const {
    return m_core.seq();
}

inline void UpdatesStateObject::setUnreadCount(qint32 unreadCount) {
    if(m_core.unreadCount() == unreadCount) return;
    m_core.setUnreadCount(unreadCount);
    Q_EMIT unreadCountChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdatesStateObject::unreadCount() const {
    return m_core.unreadCount();
}

inline UpdatesStateObject &UpdatesStateObject::operator =(const UpdatesState &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT dateChanged();
    Q_EMIT ptsChanged();
    Q_EMIT qtsChanged();
    Q_EMIT seqChanged();
    Q_EMIT unreadCountChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool UpdatesStateObject::operator ==(const UpdatesState &b) const {
    return m_core == b;
}

inline void UpdatesStateObject::setClassType(quint32 classType) {
    UpdatesState::UpdatesStateClassType result;
    switch(classType) {
    case TypeUpdatesState:
        result = UpdatesState::typeUpdatesState;
        break;
    default:
        result = UpdatesState::typeUpdatesState;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 UpdatesStateObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case UpdatesState::typeUpdatesState:
        result = TypeUpdatesState;
        break;
    default:
        result = TypeUpdatesState;
        break;
    }

    return result;
}

inline void UpdatesStateObject::setCore(const UpdatesState &core) {
    operator =(core);
}

inline UpdatesState UpdatesStateObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_UPDATESSTATE_OBJECT
