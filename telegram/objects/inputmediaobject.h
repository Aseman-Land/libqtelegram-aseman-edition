// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTMEDIA_OBJECT
#define LQTG_TYPE_INPUTMEDIA_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputmedia.h"

#include <QPointer>
#include "inputfileobject.h"
#include "inputgeopointobject.h"
#include "inputdocumentobject.h"
#include "inputphotoobject.h"

class LIBQTELEGRAMSHARED_EXPORT InputMediaObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputMediaClassType)
    Q_PROPERTY(QString address READ address WRITE setAddress NOTIFY addressChanged)
    Q_PROPERTY(QList<DocumentAttribute> attributes READ attributes WRITE setAttributes NOTIFY attributesChanged)
    Q_PROPERTY(QString caption READ caption WRITE setCaption NOTIFY captionChanged)
    Q_PROPERTY(InputFileObject* file READ file WRITE setFile NOTIFY fileChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(InputGeoPointObject* geoPoint READ geoPoint WRITE setGeoPoint NOTIFY geoPointChanged)
    Q_PROPERTY(InputDocumentObject* idInputDocument READ idInputDocument WRITE setIdInputDocument NOTIFY idInputDocumentChanged)
    Q_PROPERTY(InputPhotoObject* idInputPhoto READ idInputPhoto WRITE setIdInputPhoto NOTIFY idInputPhotoChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(QString mimeType READ mimeType WRITE setMimeType NOTIFY mimeTypeChanged)
    Q_PROPERTY(QString phoneNumber READ phoneNumber WRITE setPhoneNumber NOTIFY phoneNumberChanged)
    Q_PROPERTY(QString provider READ provider WRITE setProvider NOTIFY providerChanged)
    Q_PROPERTY(QString q READ q WRITE setQ NOTIFY qChanged)
    Q_PROPERTY(InputFileObject* thumb READ thumb WRITE setThumb NOTIFY thumbChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(QString url READ url WRITE setUrl NOTIFY urlChanged)
    Q_PROPERTY(QString venueId READ venueId WRITE setVenueId NOTIFY venueIdChanged)
    Q_PROPERTY(InputMedia core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputMediaClassType {
        TypeInputMediaEmpty,
        TypeInputMediaUploadedPhoto,
        TypeInputMediaPhoto,
        TypeInputMediaGeoPoint,
        TypeInputMediaContact,
        TypeInputMediaUploadedDocument,
        TypeInputMediaUploadedThumbDocument,
        TypeInputMediaDocument,
        TypeInputMediaVenue,
        TypeInputMediaGifExternal
    };

    InputMediaObject(const InputMedia &core, QObject *parent = 0);
    InputMediaObject(QObject *parent = 0);
    virtual ~InputMediaObject();

    void setAddress(const QString &address);
    QString address() const;

    void setAttributes(const QList<DocumentAttribute> &attributes);
    QList<DocumentAttribute> attributes() const;

    void setCaption(const QString &caption);
    QString caption() const;

    void setFile(InputFileObject* file);
    InputFileObject* file() const;

    void setFirstName(const QString &firstName);
    QString firstName() const;

    void setGeoPoint(InputGeoPointObject* geoPoint);
    InputGeoPointObject* geoPoint() const;

    void setIdInputDocument(InputDocumentObject* idInputDocument);
    InputDocumentObject* idInputDocument() const;

    void setIdInputPhoto(InputPhotoObject* idInputPhoto);
    InputPhotoObject* idInputPhoto() const;

    void setLastName(const QString &lastName);
    QString lastName() const;

    void setMimeType(const QString &mimeType);
    QString mimeType() const;

    void setPhoneNumber(const QString &phoneNumber);
    QString phoneNumber() const;

    void setProvider(const QString &provider);
    QString provider() const;

    void setQ(const QString &q);
    QString q() const;

    void setThumb(InputFileObject* thumb);
    InputFileObject* thumb() const;

    void setTitle(const QString &title);
    QString title() const;

    void setUrl(const QString &url);
    QString url() const;

    void setVenueId(const QString &venueId);
    QString venueId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputMedia &core);
    InputMedia core() const;

    InputMediaObject &operator =(const InputMedia &b);
    bool operator ==(const InputMedia &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void addressChanged();
    void attributesChanged();
    void captionChanged();
    void fileChanged();
    void firstNameChanged();
    void geoPointChanged();
    void idInputDocumentChanged();
    void idInputPhotoChanged();
    void lastNameChanged();
    void mimeTypeChanged();
    void phoneNumberChanged();
    void providerChanged();
    void qChanged();
    void thumbChanged();
    void titleChanged();
    void urlChanged();
    void venueIdChanged();

private Q_SLOTS:
    void coreFileChanged();
    void coreGeoPointChanged();
    void coreIdInputDocumentChanged();
    void coreIdInputPhotoChanged();
    void coreThumbChanged();

private:
    QPointer<InputFileObject> m_file;
    QPointer<InputGeoPointObject> m_geoPoint;
    QPointer<InputDocumentObject> m_idInputDocument;
    QPointer<InputPhotoObject> m_idInputPhoto;
    QPointer<InputFileObject> m_thumb;
    InputMedia m_core;
};

inline InputMediaObject::InputMediaObject(const InputMedia &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_file(0),
    m_geoPoint(0),
    m_idInputDocument(0),
    m_idInputPhoto(0),
    m_thumb(0),
    m_core(core)
{
    m_file = new InputFileObject(m_core.file(), this);
    connect(m_file.data(), &InputFileObject::coreChanged, this, &InputMediaObject::coreFileChanged);
    m_geoPoint = new InputGeoPointObject(m_core.geoPoint(), this);
    connect(m_geoPoint.data(), &InputGeoPointObject::coreChanged, this, &InputMediaObject::coreGeoPointChanged);
    m_idInputDocument = new InputDocumentObject(m_core.idInputDocument(), this);
    connect(m_idInputDocument.data(), &InputDocumentObject::coreChanged, this, &InputMediaObject::coreIdInputDocumentChanged);
    m_idInputPhoto = new InputPhotoObject(m_core.idInputPhoto(), this);
    connect(m_idInputPhoto.data(), &InputPhotoObject::coreChanged, this, &InputMediaObject::coreIdInputPhotoChanged);
    m_thumb = new InputFileObject(m_core.thumb(), this);
    connect(m_thumb.data(), &InputFileObject::coreChanged, this, &InputMediaObject::coreThumbChanged);
}

inline InputMediaObject::InputMediaObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_file(0),
    m_geoPoint(0),
    m_idInputDocument(0),
    m_idInputPhoto(0),
    m_thumb(0),
    m_core()
{
    m_file = new InputFileObject(m_core.file(), this);
    connect(m_file.data(), &InputFileObject::coreChanged, this, &InputMediaObject::coreFileChanged);
    m_geoPoint = new InputGeoPointObject(m_core.geoPoint(), this);
    connect(m_geoPoint.data(), &InputGeoPointObject::coreChanged, this, &InputMediaObject::coreGeoPointChanged);
    m_idInputDocument = new InputDocumentObject(m_core.idInputDocument(), this);
    connect(m_idInputDocument.data(), &InputDocumentObject::coreChanged, this, &InputMediaObject::coreIdInputDocumentChanged);
    m_idInputPhoto = new InputPhotoObject(m_core.idInputPhoto(), this);
    connect(m_idInputPhoto.data(), &InputPhotoObject::coreChanged, this, &InputMediaObject::coreIdInputPhotoChanged);
    m_thumb = new InputFileObject(m_core.thumb(), this);
    connect(m_thumb.data(), &InputFileObject::coreChanged, this, &InputMediaObject::coreThumbChanged);
}

inline InputMediaObject::~InputMediaObject() {
}

inline void InputMediaObject::setAddress(const QString &address) {
    if(m_core.address() == address) return;
    m_core.setAddress(address);
    Q_EMIT addressChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::address() const {
    return m_core.address();
}

inline void InputMediaObject::setAttributes(const QList<DocumentAttribute> &attributes) {
    if(m_core.attributes() == attributes) return;
    m_core.setAttributes(attributes);
    Q_EMIT attributesChanged();
    Q_EMIT coreChanged();
}

inline QList<DocumentAttribute> InputMediaObject::attributes() const {
    return m_core.attributes();
}

inline void InputMediaObject::setCaption(const QString &caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::caption() const {
    return m_core.caption();
}

inline void InputMediaObject::setFile(InputFileObject* file) {
    if(m_file == file) return;
    if(m_file) delete m_file;
    m_file = file;
    if(m_file) {
        m_file->setParent(this);
        m_core.setFile(m_file->core());
        connect(m_file.data(), &InputFileObject::coreChanged, this, &InputMediaObject::coreFileChanged);
    }
    Q_EMIT fileChanged();
    Q_EMIT coreChanged();
}

inline InputFileObject*  InputMediaObject::file() const {
    return m_file;
}

inline void InputMediaObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::firstName() const {
    return m_core.firstName();
}

inline void InputMediaObject::setGeoPoint(InputGeoPointObject* geoPoint) {
    if(m_geoPoint == geoPoint) return;
    if(m_geoPoint) delete m_geoPoint;
    m_geoPoint = geoPoint;
    if(m_geoPoint) {
        m_geoPoint->setParent(this);
        m_core.setGeoPoint(m_geoPoint->core());
        connect(m_geoPoint.data(), &InputGeoPointObject::coreChanged, this, &InputMediaObject::coreGeoPointChanged);
    }
    Q_EMIT geoPointChanged();
    Q_EMIT coreChanged();
}

inline InputGeoPointObject*  InputMediaObject::geoPoint() const {
    return m_geoPoint;
}

inline void InputMediaObject::setIdInputDocument(InputDocumentObject* idInputDocument) {
    if(m_idInputDocument == idInputDocument) return;
    if(m_idInputDocument) delete m_idInputDocument;
    m_idInputDocument = idInputDocument;
    if(m_idInputDocument) {
        m_idInputDocument->setParent(this);
        m_core.setIdInputDocument(m_idInputDocument->core());
        connect(m_idInputDocument.data(), &InputDocumentObject::coreChanged, this, &InputMediaObject::coreIdInputDocumentChanged);
    }
    Q_EMIT idInputDocumentChanged();
    Q_EMIT coreChanged();
}

inline InputDocumentObject*  InputMediaObject::idInputDocument() const {
    return m_idInputDocument;
}

inline void InputMediaObject::setIdInputPhoto(InputPhotoObject* idInputPhoto) {
    if(m_idInputPhoto == idInputPhoto) return;
    if(m_idInputPhoto) delete m_idInputPhoto;
    m_idInputPhoto = idInputPhoto;
    if(m_idInputPhoto) {
        m_idInputPhoto->setParent(this);
        m_core.setIdInputPhoto(m_idInputPhoto->core());
        connect(m_idInputPhoto.data(), &InputPhotoObject::coreChanged, this, &InputMediaObject::coreIdInputPhotoChanged);
    }
    Q_EMIT idInputPhotoChanged();
    Q_EMIT coreChanged();
}

inline InputPhotoObject*  InputMediaObject::idInputPhoto() const {
    return m_idInputPhoto;
}

inline void InputMediaObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::lastName() const {
    return m_core.lastName();
}

inline void InputMediaObject::setMimeType(const QString &mimeType) {
    if(m_core.mimeType() == mimeType) return;
    m_core.setMimeType(mimeType);
    Q_EMIT mimeTypeChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::mimeType() const {
    return m_core.mimeType();
}

inline void InputMediaObject::setPhoneNumber(const QString &phoneNumber) {
    if(m_core.phoneNumber() == phoneNumber) return;
    m_core.setPhoneNumber(phoneNumber);
    Q_EMIT phoneNumberChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::phoneNumber() const {
    return m_core.phoneNumber();
}

inline void InputMediaObject::setProvider(const QString &provider) {
    if(m_core.provider() == provider) return;
    m_core.setProvider(provider);
    Q_EMIT providerChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::provider() const {
    return m_core.provider();
}

inline void InputMediaObject::setQ(const QString &q) {
    if(m_core.q() == q) return;
    m_core.setQ(q);
    Q_EMIT qChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::q() const {
    return m_core.q();
}

inline void InputMediaObject::setThumb(InputFileObject* thumb) {
    if(m_thumb == thumb) return;
    if(m_thumb) delete m_thumb;
    m_thumb = thumb;
    if(m_thumb) {
        m_thumb->setParent(this);
        m_core.setThumb(m_thumb->core());
        connect(m_thumb.data(), &InputFileObject::coreChanged, this, &InputMediaObject::coreThumbChanged);
    }
    Q_EMIT thumbChanged();
    Q_EMIT coreChanged();
}

inline InputFileObject*  InputMediaObject::thumb() const {
    return m_thumb;
}

inline void InputMediaObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::title() const {
    return m_core.title();
}

inline void InputMediaObject::setUrl(const QString &url) {
    if(m_core.url() == url) return;
    m_core.setUrl(url);
    Q_EMIT urlChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::url() const {
    return m_core.url();
}

inline void InputMediaObject::setVenueId(const QString &venueId) {
    if(m_core.venueId() == venueId) return;
    m_core.setVenueId(venueId);
    Q_EMIT venueIdChanged();
    Q_EMIT coreChanged();
}

inline QString InputMediaObject::venueId() const {
    return m_core.venueId();
}

inline InputMediaObject &InputMediaObject::operator =(const InputMedia &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_file->setCore(b.file());
    m_geoPoint->setCore(b.geoPoint());
    m_idInputDocument->setCore(b.idInputDocument());
    m_idInputPhoto->setCore(b.idInputPhoto());
    m_thumb->setCore(b.thumb());

    Q_EMIT addressChanged();
    Q_EMIT attributesChanged();
    Q_EMIT captionChanged();
    Q_EMIT fileChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT geoPointChanged();
    Q_EMIT idInputDocumentChanged();
    Q_EMIT idInputPhotoChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT mimeTypeChanged();
    Q_EMIT phoneNumberChanged();
    Q_EMIT providerChanged();
    Q_EMIT qChanged();
    Q_EMIT thumbChanged();
    Q_EMIT titleChanged();
    Q_EMIT urlChanged();
    Q_EMIT venueIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputMediaObject::operator ==(const InputMedia &b) const {
    return m_core == b;
}

inline void InputMediaObject::setClassType(quint32 classType) {
    InputMedia::InputMediaClassType result;
    switch(classType) {
    case TypeInputMediaEmpty:
        result = InputMedia::typeInputMediaEmpty;
        break;
    case TypeInputMediaUploadedPhoto:
        result = InputMedia::typeInputMediaUploadedPhoto;
        break;
    case TypeInputMediaPhoto:
        result = InputMedia::typeInputMediaPhoto;
        break;
    case TypeInputMediaGeoPoint:
        result = InputMedia::typeInputMediaGeoPoint;
        break;
    case TypeInputMediaContact:
        result = InputMedia::typeInputMediaContact;
        break;
    case TypeInputMediaUploadedDocument:
        result = InputMedia::typeInputMediaUploadedDocument;
        break;
    case TypeInputMediaUploadedThumbDocument:
        result = InputMedia::typeInputMediaUploadedThumbDocument;
        break;
    case TypeInputMediaDocument:
        result = InputMedia::typeInputMediaDocument;
        break;
    case TypeInputMediaVenue:
        result = InputMedia::typeInputMediaVenue;
        break;
    case TypeInputMediaGifExternal:
        result = InputMedia::typeInputMediaGifExternal;
        break;
    default:
        result = InputMedia::typeInputMediaEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputMediaObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputMedia::typeInputMediaEmpty:
        result = TypeInputMediaEmpty;
        break;
    case InputMedia::typeInputMediaUploadedPhoto:
        result = TypeInputMediaUploadedPhoto;
        break;
    case InputMedia::typeInputMediaPhoto:
        result = TypeInputMediaPhoto;
        break;
    case InputMedia::typeInputMediaGeoPoint:
        result = TypeInputMediaGeoPoint;
        break;
    case InputMedia::typeInputMediaContact:
        result = TypeInputMediaContact;
        break;
    case InputMedia::typeInputMediaUploadedDocument:
        result = TypeInputMediaUploadedDocument;
        break;
    case InputMedia::typeInputMediaUploadedThumbDocument:
        result = TypeInputMediaUploadedThumbDocument;
        break;
    case InputMedia::typeInputMediaDocument:
        result = TypeInputMediaDocument;
        break;
    case InputMedia::typeInputMediaVenue:
        result = TypeInputMediaVenue;
        break;
    case InputMedia::typeInputMediaGifExternal:
        result = TypeInputMediaGifExternal;
        break;
    default:
        result = TypeInputMediaEmpty;
        break;
    }

    return result;
}

inline void InputMediaObject::setCore(const InputMedia &core) {
    operator =(core);
}

inline InputMedia InputMediaObject::core() const {
    return m_core;
}

inline void InputMediaObject::coreFileChanged() {
    if(m_core.file() == m_file->core()) return;
    m_core.setFile(m_file->core());
    Q_EMIT fileChanged();
    Q_EMIT coreChanged();
}

inline void InputMediaObject::coreGeoPointChanged() {
    if(m_core.geoPoint() == m_geoPoint->core()) return;
    m_core.setGeoPoint(m_geoPoint->core());
    Q_EMIT geoPointChanged();
    Q_EMIT coreChanged();
}

inline void InputMediaObject::coreIdInputDocumentChanged() {
    if(m_core.idInputDocument() == m_idInputDocument->core()) return;
    m_core.setIdInputDocument(m_idInputDocument->core());
    Q_EMIT idInputDocumentChanged();
    Q_EMIT coreChanged();
}

inline void InputMediaObject::coreIdInputPhotoChanged() {
    if(m_core.idInputPhoto() == m_idInputPhoto->core()) return;
    m_core.setIdInputPhoto(m_idInputPhoto->core());
    Q_EMIT idInputPhotoChanged();
    Q_EMIT coreChanged();
}

inline void InputMediaObject::coreThumbChanged() {
    if(m_core.thumb() == m_thumb->core()) return;
    m_core.setThumb(m_thumb->core());
    Q_EMIT thumbChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_INPUTMEDIA_OBJECT
