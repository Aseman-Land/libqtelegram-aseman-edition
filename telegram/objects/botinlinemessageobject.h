// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_BOTINLINEMESSAGE_OBJECT
#define LQTG_TYPE_BOTINLINEMESSAGE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/botinlinemessage.h"

#include <QPointer>
#include "geopointobject.h"
#include "replymarkupobject.h"

class LIBQTELEGRAMSHARED_EXPORT BotInlineMessageObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(BotInlineMessageClassType)
    Q_PROPERTY(QString address READ address WRITE setAddress NOTIFY addressChanged)
    Q_PROPERTY(QString caption READ caption WRITE setCaption NOTIFY captionChanged)
    Q_PROPERTY(QList<MessageEntity> entities READ entities WRITE setEntities NOTIFY entitiesChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(qint32 flags READ flags WRITE setFlags NOTIFY flagsChanged)
    Q_PROPERTY(GeoPointObject* geo READ geo WRITE setGeo NOTIFY geoChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(QString message READ message WRITE setMessage NOTIFY messageChanged)
    Q_PROPERTY(bool noWebpage READ noWebpage WRITE setNoWebpage NOTIFY noWebpageChanged)
    Q_PROPERTY(QString phoneNumber READ phoneNumber WRITE setPhoneNumber NOTIFY phoneNumberChanged)
    Q_PROPERTY(QString provider READ provider WRITE setProvider NOTIFY providerChanged)
    Q_PROPERTY(ReplyMarkupObject* replyMarkup READ replyMarkup WRITE setReplyMarkup NOTIFY replyMarkupChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(QString venueId READ venueId WRITE setVenueId NOTIFY venueIdChanged)
    Q_PROPERTY(BotInlineMessage core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum BotInlineMessageClassType {
        TypeBotInlineMessageMediaAuto,
        TypeBotInlineMessageText,
        TypeBotInlineMessageMediaGeo,
        TypeBotInlineMessageMediaVenue,
        TypeBotInlineMessageMediaContact
    };

    BotInlineMessageObject(const BotInlineMessage &core, QObject *parent = 0);
    BotInlineMessageObject(QObject *parent = 0);
    virtual ~BotInlineMessageObject();

    void setAddress(const QString &address);
    QString address() const;

    void setCaption(const QString &caption);
    QString caption() const;

    void setEntities(const QList<MessageEntity> &entities);
    QList<MessageEntity> entities() const;

    void setFirstName(const QString &firstName);
    QString firstName() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setGeo(GeoPointObject* geo);
    GeoPointObject* geo() const;

    void setLastName(const QString &lastName);
    QString lastName() const;

    void setMessage(const QString &message);
    QString message() const;

    void setNoWebpage(bool noWebpage);
    bool noWebpage() const;

    void setPhoneNumber(const QString &phoneNumber);
    QString phoneNumber() const;

    void setProvider(const QString &provider);
    QString provider() const;

    void setReplyMarkup(ReplyMarkupObject* replyMarkup);
    ReplyMarkupObject* replyMarkup() const;

    void setTitle(const QString &title);
    QString title() const;

    void setVenueId(const QString &venueId);
    QString venueId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const BotInlineMessage &core);
    BotInlineMessage core() const;

    BotInlineMessageObject &operator =(const BotInlineMessage &b);
    bool operator ==(const BotInlineMessage &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void addressChanged();
    void captionChanged();
    void entitiesChanged();
    void firstNameChanged();
    void flagsChanged();
    void geoChanged();
    void lastNameChanged();
    void messageChanged();
    void noWebpageChanged();
    void phoneNumberChanged();
    void providerChanged();
    void replyMarkupChanged();
    void titleChanged();
    void venueIdChanged();

private Q_SLOTS:
    void coreGeoChanged();
    void coreReplyMarkupChanged();

private:
    QPointer<GeoPointObject> m_geo;
    QPointer<ReplyMarkupObject> m_replyMarkup;
    BotInlineMessage m_core;
};

inline BotInlineMessageObject::BotInlineMessageObject(const BotInlineMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_geo(0),
    m_replyMarkup(0),
    m_core(core)
{
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), &GeoPointObject::coreChanged, this, &BotInlineMessageObject::coreGeoChanged);
    m_replyMarkup = new ReplyMarkupObject(m_core.replyMarkup(), this);
    connect(m_replyMarkup.data(), &ReplyMarkupObject::coreChanged, this, &BotInlineMessageObject::coreReplyMarkupChanged);
}

inline BotInlineMessageObject::BotInlineMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_geo(0),
    m_replyMarkup(0),
    m_core()
{
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), &GeoPointObject::coreChanged, this, &BotInlineMessageObject::coreGeoChanged);
    m_replyMarkup = new ReplyMarkupObject(m_core.replyMarkup(), this);
    connect(m_replyMarkup.data(), &ReplyMarkupObject::coreChanged, this, &BotInlineMessageObject::coreReplyMarkupChanged);
}

inline BotInlineMessageObject::~BotInlineMessageObject() {
}

inline void BotInlineMessageObject::setAddress(const QString &address) {
    if(m_core.address() == address) return;
    m_core.setAddress(address);
    Q_EMIT addressChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::address() const {
    return m_core.address();
}

inline void BotInlineMessageObject::setCaption(const QString &caption) {
    if(m_core.caption() == caption) return;
    m_core.setCaption(caption);
    Q_EMIT captionChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::caption() const {
    return m_core.caption();
}

inline void BotInlineMessageObject::setEntities(const QList<MessageEntity> &entities) {
    if(m_core.entities() == entities) return;
    m_core.setEntities(entities);
    Q_EMIT entitiesChanged();
    Q_EMIT coreChanged();
}

inline QList<MessageEntity> BotInlineMessageObject::entities() const {
    return m_core.entities();
}

inline void BotInlineMessageObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::firstName() const {
    return m_core.firstName();
}

inline void BotInlineMessageObject::setFlags(qint32 flags) {
    if(m_core.flags() == flags) return;
    m_core.setFlags(flags);
    Q_EMIT flagsChanged();
    Q_EMIT coreChanged();
}

inline qint32 BotInlineMessageObject::flags() const {
    return m_core.flags();
}

inline void BotInlineMessageObject::setGeo(GeoPointObject* geo) {
    if(m_geo == geo) return;
    if(m_geo) delete m_geo;
    m_geo = geo;
    if(m_geo) {
        m_geo->setParent(this);
        m_core.setGeo(m_geo->core());
        connect(m_geo.data(), &GeoPointObject::coreChanged, this, &BotInlineMessageObject::coreGeoChanged);
    }
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

inline GeoPointObject*  BotInlineMessageObject::geo() const {
    return m_geo;
}

inline void BotInlineMessageObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::lastName() const {
    return m_core.lastName();
}

inline void BotInlineMessageObject::setMessage(const QString &message) {
    if(m_core.message() == message) return;
    m_core.setMessage(message);
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::message() const {
    return m_core.message();
}

inline void BotInlineMessageObject::setNoWebpage(bool noWebpage) {
    if(m_core.noWebpage() == noWebpage) return;
    m_core.setNoWebpage(noWebpage);
    Q_EMIT noWebpageChanged();
    Q_EMIT coreChanged();
}

inline bool BotInlineMessageObject::noWebpage() const {
    return m_core.noWebpage();
}

inline void BotInlineMessageObject::setPhoneNumber(const QString &phoneNumber) {
    if(m_core.phoneNumber() == phoneNumber) return;
    m_core.setPhoneNumber(phoneNumber);
    Q_EMIT phoneNumberChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::phoneNumber() const {
    return m_core.phoneNumber();
}

inline void BotInlineMessageObject::setProvider(const QString &provider) {
    if(m_core.provider() == provider) return;
    m_core.setProvider(provider);
    Q_EMIT providerChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::provider() const {
    return m_core.provider();
}

inline void BotInlineMessageObject::setReplyMarkup(ReplyMarkupObject* replyMarkup) {
    if(m_replyMarkup == replyMarkup) return;
    if(m_replyMarkup) delete m_replyMarkup;
    m_replyMarkup = replyMarkup;
    if(m_replyMarkup) {
        m_replyMarkup->setParent(this);
        m_core.setReplyMarkup(m_replyMarkup->core());
        connect(m_replyMarkup.data(), &ReplyMarkupObject::coreChanged, this, &BotInlineMessageObject::coreReplyMarkupChanged);
    }
    Q_EMIT replyMarkupChanged();
    Q_EMIT coreChanged();
}

inline ReplyMarkupObject*  BotInlineMessageObject::replyMarkup() const {
    return m_replyMarkup;
}

inline void BotInlineMessageObject::setTitle(const QString &title) {
    if(m_core.title() == title) return;
    m_core.setTitle(title);
    Q_EMIT titleChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::title() const {
    return m_core.title();
}

inline void BotInlineMessageObject::setVenueId(const QString &venueId) {
    if(m_core.venueId() == venueId) return;
    m_core.setVenueId(venueId);
    Q_EMIT venueIdChanged();
    Q_EMIT coreChanged();
}

inline QString BotInlineMessageObject::venueId() const {
    return m_core.venueId();
}

inline BotInlineMessageObject &BotInlineMessageObject::operator =(const BotInlineMessage &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_geo->setCore(b.geo());
    m_replyMarkup->setCore(b.replyMarkup());

    Q_EMIT addressChanged();
    Q_EMIT captionChanged();
    Q_EMIT entitiesChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT flagsChanged();
    Q_EMIT geoChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT messageChanged();
    Q_EMIT noWebpageChanged();
    Q_EMIT phoneNumberChanged();
    Q_EMIT providerChanged();
    Q_EMIT replyMarkupChanged();
    Q_EMIT titleChanged();
    Q_EMIT venueIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool BotInlineMessageObject::operator ==(const BotInlineMessage &b) const {
    return m_core == b;
}

inline void BotInlineMessageObject::setClassType(quint32 classType) {
    BotInlineMessage::BotInlineMessageClassType result;
    switch(classType) {
    case TypeBotInlineMessageMediaAuto:
        result = BotInlineMessage::typeBotInlineMessageMediaAuto;
        break;
    case TypeBotInlineMessageText:
        result = BotInlineMessage::typeBotInlineMessageText;
        break;
    case TypeBotInlineMessageMediaGeo:
        result = BotInlineMessage::typeBotInlineMessageMediaGeo;
        break;
    case TypeBotInlineMessageMediaVenue:
        result = BotInlineMessage::typeBotInlineMessageMediaVenue;
        break;
    case TypeBotInlineMessageMediaContact:
        result = BotInlineMessage::typeBotInlineMessageMediaContact;
        break;
    default:
        result = BotInlineMessage::typeBotInlineMessageMediaAuto;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 BotInlineMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case BotInlineMessage::typeBotInlineMessageMediaAuto:
        result = TypeBotInlineMessageMediaAuto;
        break;
    case BotInlineMessage::typeBotInlineMessageText:
        result = TypeBotInlineMessageText;
        break;
    case BotInlineMessage::typeBotInlineMessageMediaGeo:
        result = TypeBotInlineMessageMediaGeo;
        break;
    case BotInlineMessage::typeBotInlineMessageMediaVenue:
        result = TypeBotInlineMessageMediaVenue;
        break;
    case BotInlineMessage::typeBotInlineMessageMediaContact:
        result = TypeBotInlineMessageMediaContact;
        break;
    default:
        result = TypeBotInlineMessageMediaAuto;
        break;
    }

    return result;
}

inline void BotInlineMessageObject::setCore(const BotInlineMessage &core) {
    operator =(core);
}

inline BotInlineMessage BotInlineMessageObject::core() const {
    return m_core;
}

inline void BotInlineMessageObject::coreGeoChanged() {
    if(m_core.geo() == m_geo->core()) return;
    m_core.setGeo(m_geo->core());
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

inline void BotInlineMessageObject::coreReplyMarkupChanged() {
    if(m_core.replyMarkup() == m_replyMarkup->core()) return;
    m_core.setReplyMarkup(m_replyMarkup->core());
    Q_EMIT replyMarkupChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_BOTINLINEMESSAGE_OBJECT
