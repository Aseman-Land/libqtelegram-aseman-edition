// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSBLOCKED_OBJECT
#define LQTG_TYPE_CONTACTSBLOCKED_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactsblocked.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ContactsBlockedObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactsBlockedClassType)
    Q_PROPERTY(QList<ContactBlocked> blocked READ blocked WRITE setBlocked NOTIFY blockedChanged)
    Q_PROPERTY(qint32 count READ count WRITE setCount NOTIFY countChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(ContactsBlocked core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactsBlockedClassType {
        TypeContactsBlocked,
        TypeContactsBlockedSlice
    };

    ContactsBlockedObject(const ContactsBlocked &core, QObject *parent = 0);
    ContactsBlockedObject(QObject *parent = 0);
    virtual ~ContactsBlockedObject();

    void setBlocked(const QList<ContactBlocked> &blocked);
    QList<ContactBlocked> blocked() const;

    void setCount(qint32 count);
    qint32 count() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactsBlocked &core);
    ContactsBlocked core() const;

    ContactsBlockedObject &operator =(const ContactsBlocked &b);
    bool operator ==(const ContactsBlocked &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void blockedChanged();
    void countChanged();
    void usersChanged();

private Q_SLOTS:

private:
    ContactsBlocked m_core;
};

inline ContactsBlockedObject::ContactsBlockedObject(const ContactsBlocked &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ContactsBlockedObject::ContactsBlockedObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ContactsBlockedObject::~ContactsBlockedObject() {
}

inline void ContactsBlockedObject::setBlocked(const QList<ContactBlocked> &blocked) {
    if(m_core.blocked() == blocked) return;
    m_core.setBlocked(blocked);
    Q_EMIT blockedChanged();
    Q_EMIT coreChanged();
}

inline QList<ContactBlocked> ContactsBlockedObject::blocked() const {
    return m_core.blocked();
}

inline void ContactsBlockedObject::setCount(qint32 count) {
    if(m_core.count() == count) return;
    m_core.setCount(count);
    Q_EMIT countChanged();
    Q_EMIT coreChanged();
}

inline qint32 ContactsBlockedObject::count() const {
    return m_core.count();
}

inline void ContactsBlockedObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> ContactsBlockedObject::users() const {
    return m_core.users();
}

inline ContactsBlockedObject &ContactsBlockedObject::operator =(const ContactsBlocked &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT blockedChanged();
    Q_EMIT countChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactsBlockedObject::operator ==(const ContactsBlocked &b) const {
    return m_core == b;
}

inline void ContactsBlockedObject::setClassType(quint32 classType) {
    ContactsBlocked::ContactsBlockedClassType result;
    switch(classType) {
    case TypeContactsBlocked:
        result = ContactsBlocked::typeContactsBlocked;
        break;
    case TypeContactsBlockedSlice:
        result = ContactsBlocked::typeContactsBlockedSlice;
        break;
    default:
        result = ContactsBlocked::typeContactsBlocked;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactsBlockedObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsBlocked::typeContactsBlocked:
        result = TypeContactsBlocked;
        break;
    case ContactsBlocked::typeContactsBlockedSlice:
        result = TypeContactsBlockedSlice;
        break;
    default:
        result = TypeContactsBlocked;
        break;
    }

    return result;
}

inline void ContactsBlockedObject::setCore(const ContactsBlocked &core) {
    operator =(core);
}

inline ContactsBlocked ContactsBlockedObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CONTACTSBLOCKED_OBJECT
