// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "peernotifysettings.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

PeerNotifySettings::PeerNotifySettings(PeerNotifySettingsType classType, InboundPkt *in) :
    m_flags(0),
    m_muteUntil(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

PeerNotifySettings::PeerNotifySettings(InboundPkt *in) :
    m_flags(0),
    m_muteUntil(0),
    m_classType(typePeerNotifySettingsEmpty)
{
    fetch(in);
}

PeerNotifySettings::PeerNotifySettings(const Null &null) :
    TelegramTypeObject(null),
    m_flags(0),
    m_muteUntil(0),
    m_classType(typePeerNotifySettingsEmpty)
{
}

PeerNotifySettings::~PeerNotifySettings() {
}

void PeerNotifySettings::setFlags(qint32 flags) {
    m_flags = flags;
}

qint32 PeerNotifySettings::flags() const {
    return m_flags;
}

void PeerNotifySettings::setMuteUntil(qint32 muteUntil) {
    m_muteUntil = muteUntil;
}

qint32 PeerNotifySettings::muteUntil() const {
    return m_muteUntil;
}

void PeerNotifySettings::setShowPreviews(bool showPreviews) {
    if(showPreviews) m_flags = (m_flags | (1<<0));
    else m_flags = (m_flags & ~(1<<0));
}

bool PeerNotifySettings::showPreviews() const {
    return (m_flags & 1<<0);
}

void PeerNotifySettings::setSilent(bool silent) {
    if(silent) m_flags = (m_flags | (1<<1));
    else m_flags = (m_flags & ~(1<<1));
}

bool PeerNotifySettings::silent() const {
    return (m_flags & 1<<1);
}

void PeerNotifySettings::setSound(const QString &sound) {
    m_sound = sound;
}

QString PeerNotifySettings::sound() const {
    return m_sound;
}

bool PeerNotifySettings::operator ==(const PeerNotifySettings &b) const {
    return m_classType == b.m_classType &&
           m_flags == b.m_flags &&
           m_muteUntil == b.m_muteUntil &&
           m_sound == b.m_sound;
}

void PeerNotifySettings::setClassType(PeerNotifySettings::PeerNotifySettingsType classType) {
    m_classType = classType;
}

PeerNotifySettings::PeerNotifySettingsType PeerNotifySettings::classType() const {
    return m_classType;
}

bool PeerNotifySettings::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typePeerNotifySettingsEmpty: {
        m_classType = static_cast<PeerNotifySettingsType>(x);
        return true;
    }
        break;
    
    case typePeerNotifySettings: {
        m_flags = in->fetchInt();
        m_muteUntil = in->fetchInt();
        m_sound = in->fetchQString();
        m_classType = static_cast<PeerNotifySettingsType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool PeerNotifySettings::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typePeerNotifySettingsEmpty: {
        return true;
    }
        break;
    
    case typePeerNotifySettings: {
        out->appendInt(m_flags);
        out->appendInt(m_muteUntil);
        out->appendQString(m_sound);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QByteArray PeerNotifySettings::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const PeerNotifySettings &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case PeerNotifySettings::typePeerNotifySettingsEmpty:
        
        break;
    case PeerNotifySettings::typePeerNotifySettings:
        stream << item.flags();
        stream << item.muteUntil();
        stream << item.sound();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, PeerNotifySettings &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<PeerNotifySettings::PeerNotifySettingsType>(type));
    switch(type) {
    case PeerNotifySettings::typePeerNotifySettingsEmpty: {
        
    }
        break;
    case PeerNotifySettings::typePeerNotifySettings: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_mute_until;
        stream >> m_mute_until;
        item.setMuteUntil(m_mute_until);
        QString m_sound;
        stream >> m_sound;
        item.setSound(m_sound);
    }
        break;
    }
    return stream;
}

