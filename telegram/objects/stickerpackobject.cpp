// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "stickerpackobject.h"

StickerPackObject::StickerPackObject(const StickerPack &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

StickerPackObject::StickerPackObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

StickerPackObject::~StickerPackObject() {
}

void StickerPackObject::setDocuments(const QList<qint64> &documents) {
    if(m_core.documents() == documents) return;
    m_core.setDocuments(documents);
    Q_EMIT documentsChanged();
    Q_EMIT coreChanged();
}

QList<qint64> StickerPackObject::documents() const {
    return m_core.documents();
}

void StickerPackObject::setEmoticon(const QString &emoticon) {
    if(m_core.emoticon() == emoticon) return;
    m_core.setEmoticon(emoticon);
    Q_EMIT emoticonChanged();
    Q_EMIT coreChanged();
}

QString StickerPackObject::emoticon() const {
    return m_core.emoticon();
}

StickerPackObject &StickerPackObject::operator =(const StickerPack &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT documentsChanged();
    Q_EMIT emoticonChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool StickerPackObject::operator ==(const StickerPack &b) const {
    return m_core == b;
}

void StickerPackObject::setClassType(quint32 classType) {
    StickerPack::StickerPackClassType result;
    switch(classType) {
    case TypeStickerPack:
        result = StickerPack::typeStickerPack;
        break;
    default:
        result = StickerPack::typeStickerPack;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 StickerPackObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case StickerPack::typeStickerPack:
        result = TypeStickerPack;
        break;
    default:
        result = TypeStickerPack;
        break;
    }

    return result;
}

void StickerPackObject::setCore(const StickerPack &core) {
    operator =(core);
}

StickerPack StickerPackObject::core() const {
    return m_core;
}

