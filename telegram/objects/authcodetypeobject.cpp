// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "authcodetypeobject.h"

AuthCodeTypeObject::AuthCodeTypeObject(const AuthCodeType &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

AuthCodeTypeObject::AuthCodeTypeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

AuthCodeTypeObject::~AuthCodeTypeObject() {
}

AuthCodeTypeObject &AuthCodeTypeObject::operator =(const AuthCodeType &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

bool AuthCodeTypeObject::operator ==(const AuthCodeType &b) const {
    return m_core == b;
}

void AuthCodeTypeObject::setClassType(quint32 classType) {
    AuthCodeType::AuthCodeTypeClassType result;
    switch(classType) {
    case TypeAuthCodeTypeSms:
        result = AuthCodeType::typeAuthCodeTypeSms;
        break;
    case TypeAuthCodeTypeCall:
        result = AuthCodeType::typeAuthCodeTypeCall;
        break;
    case TypeAuthCodeTypeFlashCall:
        result = AuthCodeType::typeAuthCodeTypeFlashCall;
        break;
    default:
        result = AuthCodeType::typeAuthCodeTypeSms;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 AuthCodeTypeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthCodeType::typeAuthCodeTypeSms:
        result = TypeAuthCodeTypeSms;
        break;
    case AuthCodeType::typeAuthCodeTypeCall:
        result = TypeAuthCodeTypeCall;
        break;
    case AuthCodeType::typeAuthCodeTypeFlashCall:
        result = TypeAuthCodeTypeFlashCall;
        break;
    default:
        result = TypeAuthCodeTypeSms;
        break;
    }

    return result;
}

void AuthCodeTypeObject::setCore(const AuthCodeType &core) {
    operator =(core);
}

AuthCodeType AuthCodeTypeObject::core() const {
    return m_core;
}

